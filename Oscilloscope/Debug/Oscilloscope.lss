
Oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000615a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  0000615a  000061ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064d  008000c0  008000c0  0000624e  2**0
                  ALLOC
  3 .stab         000043d4  00000000  00000000  00006250  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001af2  00000000  00000000  0000a624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c116  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c256  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c3c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e00f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000eefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fe08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__ctors_end>
       4:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
       8:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
       c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      10:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      14:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      18:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      1c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      20:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      24:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      28:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      2c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      30:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      34:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      38:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      3c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      40:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__vector_16>
      44:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      48:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      4c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>
      50:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__bad_interrupt>

00000054 <Consolas18x32>:
	...

00000055 <Consolas14x24>:
	...
      8d:	00 f8 3f 07 f8 3f 07 f8 3f 07 00 00 00 00 00 00     ..?..?..?.......
	...
      b1:	00 7c 00 00 7c 00 00 7c 00 00 00 00 00 00 00 00     .|..|..|........
      c1:	7c 00 00 7c 00 00 7c 00 00 00 00 00 00 00 00 00     |..|..|.........
      d1:	00 00 00 00 00 00 60 00 00 63 00 00 e3 07 00 ff     ......`..c......
      e1:	07 f0 7f 00 f0 63 00 00 e3 07 00 ff 07 f0 7f 00     .....c..........
      f1:	f0 63 00 00 63 00 00 03 00 00 00 00 00 00 00 00     .c..c...........
     101:	00 00 c0 03 03 e0 07 06 60 06 06 30 0c 3e 30 fe     ........`..0.>0.
     111:	1f f8 3f 06 3c 18 06 30 38 03 60 f0 03 00 e0 01     ..?.<..08.`.....
	...
     129:	00 e0 03 0c f0 07 0e 30 86 07 30 c6 03 f0 e7 00     .......0..0.....
     139:	e0 7b 00 00 dc 07 00 ef 0f 80 63 0c e0 61 0c 70     .{........c..a.p
     149:	e0 0f 30 c0 07 00 00 00 00 00 00 00 f0 00 f0 fc     ..0.............
     159:	01 f8 8f 03 9c 07 03 0c 0f 03 0c 1d 03 8c b9 03     ................
     169:	f8 e0 01 70 f0 01 00 f8 03 00 1c 03 00 08 02 00     ...p............
	...
     189:	00 7c 00 00 7c 00 00 7c 00 00 00 00 00 00 00 00     .|..|..|........
	...
     1ad:	00 80 ff 01 e0 ff 0f f8 00 1f 3c 00 3c 0e 00 70     ..........<.<..p
     1bd:	06 00 60 02 00 40 00 00 00 00 00 00 00 00 00 00     ..`..@..........
	...
     1d9:	00 00 02 00 40 06 00 60 0e 00 70 3c 00 3c f8 00     ....@..`..p<.<..
     1e9:	1f e0 ff 07 80 ff 01 00 00 00 00 00 00 00 00 00     ................
     1f9:	00 00 00 00 00 00 10 02 00 38 07 00 30 03 00 e0     .........8..0...
     209:	01 00 fe 1f 00 fe 1f 00 e0 01 00 30 03 00 38 07     ...........0..8.
     219:	00 10 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     229:	00 18 00 00 18 00 00 18 00 00 18 00 c0 ff 03 c0     ................
     239:	ff 03 00 18 00 00 18 00 00 18 00 00 18 00 00 00     ................
	...
     255:	00 00 00 30 00 00 30 00 80 39 00 80 1f 00 80 1f     ...0..0..9......
     265:	00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     281:	18 00 00 18 00 00 18 00 00 18 00 00 18 00 00 18     ................
     291:	00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2ad:	00 00 01 00 80 03 00 80 03 00 00 01 00 00 00 00     ................
	...
     2cd:	00 00 00 30 00 00 3c 00 00 0f 00 c0 03 00 f0 00     ...0..<.........
     2dd:	00 3c 00 00 0f 00 c0 03 00 f0 00 00 3c 00 00 0c     .<..........<...
	...
     2f5:	00 00 00 80 3f 00 e0 ff 00 70 f0 01 38 98 03 18     ....?....p..8...
     305:	0c 03 18 0e 03 18 06 03 38 83 03 f0 c1 01 e0 ff     ........8.......
     315:	00 80 3f 00 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
     325:	20 00 03 70 00 03 30 00 03 18 00 03 f8 ff 03 f8      ..p..0.........
     335:	ff 03 00 00 03 00 00 03 00 00 03 00 00 00 00 00     ................
	...
     34d:	00 00 20 00 03 70 80 03 38 c0 03 18 60 03 18 30     .. ..p..8...`..0
     35d:	03 18 18 03 38 0e 03 f0 07 03 e0 03 03 00 00 03     ....8...........
	...
     379:	30 00 03 18 00 03 18 06 03 18 06 03 18 06 03 38     0..............8
     389:	07 03 f0 8d 01 e0 fc 01 00 78 00 00 00 00 00 00     .........x......
     399:	00 00 00 00 00 70 00 00 78 00 00 6e 00 80 67 00     .....p..x..n..g.
     3a9:	c0 61 00 70 60 00 38 60 00 f8 ff 03 f8 ff 03 00     .a.p`.8`........
     3b9:	60 00 00 60 00 00 60 00 00 00 00 00 00 00 00 00     `..`..`.........
     3c9:	00 00 00 00 f8 07 03 f8 07 03 18 06 03 18 06 03     ................
     3d9:	18 06 03 18 06 03 18 8e 01 18 fc 00 00 78 00 00     .............x..
	...
     3f5:	00 00 00 7f 00 c0 ff 01 60 8c 01 30 06 03 38 06     ........`..0..8.
     405:	03 18 06 03 18 06 03 18 8e 01 18 fc 01 00 78 00     ..............x.
	...
     421:	18 00 00 18 00 00 18 00 03 18 c0 03 18 f0 01 18     ................
     431:	3c 00 18 0f 00 d8 03 00 f8 00 00 38 00 00 00 00     <..........8....
	...
     449:	00 00 e0 f0 00 f0 f9 01 38 9f 03 18 0f 03 18 06     ........8.......
     459:	03 18 06 03 18 0f 03 38 9f 03 f0 f9 01 e0 f0 00     .......8........
	...
     475:	c0 03 00 f0 07 03 30 0e 03 18 0c 03 18 0c 03 18     ......0.........
     485:	8c 03 18 8c 01 30 e6 00 f0 7f 00 c0 1f 00 00 00     .....0..........
	...
     4a5:	00 00 00 80 83 03 80 83 03 80 83 03 00 00 00 00     ................
	...
     4cd:	00 30 00 00 30 80 83 39 80 83 1f 80 83 1f 00 00     .0..0..9........
     4dd:	07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4ed:	00 00 00 00 00 00 00 08 00 00 1c 00 00 3e 00 00     .............>..
     4fd:	36 00 00 63 00 80 c1 00 c0 80 01 e0 80 03 40 00     6..c..........@.
     50d:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     51d:	00 66 00 00 66 00 00 66 00 00 66 00 00 66 00 00     .f..f..f..f..f..
     52d:	66 00 00 66 00 00 66 00 00 66 00 00 66 00 00 00     f..f..f..f..f...
	...
     545:	00 00 40 00 01 e0 80 03 c0 80 01 80 c1 00 00 63     ..@............c
     555:	00 00 36 00 00 3e 00 00 1c 00 00 08 00 00 00 00     ..6..>..........
	...
     571:	00 00 00 0c 00 00 0c 80 03 0c 9e 03 18 9e 03 18     ................
     581:	06 00 f0 07 00 e0 03 00 00 00 00 00 00 00 00 00     ................
     591:	00 00 00 00 00 fc 03 80 ff 1f e0 03 38 70 f8 71     ............8p.q
     5a1:	18 fe 63 0c 0f 63 0c 03 63 0c e3 61 0c ff 63 0c     ..c..c..c..a..c.
     5b1:	07 63 38 80 33 f0 ff 19 c0 7f 00 00 00 00 00 00     .c8.3...........
     5c1:	00 00 c0 03 00 f8 03 00 7f 00 e0 67 00 f0 60 00     ...........g..`.
     5d1:	38 60 00 f0 60 00 e0 67 00 00 7f 00 00 f8 03 00     8`..`..g........
     5e1:	c0 03 00 00 00 00 00 00 00 00 00 00 00 00 f8 ff     ................
     5f1:	03 f8 ff 03 18 06 03 18 06 03 18 06 03 18 06 03     ................
     601:	38 07 03 f0 8d 01 e0 fc 01 00 70 00 00 00 00 00     8.........p.....
     611:	00 00 00 00 00 80 3f 00 c0 ff 00 e0 e0 01 30 80     ......?.......0.
     621:	01 38 80 03 18 00 03 18 00 03 18 00 03 18 00 03     .8..............
     631:	18 00 03 30 80 01 00 00 00 00 00 00 00 00 00 f8     ...0............
     641:	ff 03 f8 ff 03 18 00 03 18 00 03 18 00 03 18 00     ................
     651:	03 18 80 03 30 80 01 70 e0 01 e0 ff 00 80 3f 00     ....0..p......?.
	...
     66d:	f8 ff 03 f8 ff 03 18 06 03 18 06 03 18 06 03 18     ................
     67d:	06 03 18 06 03 18 06 03 00 00 00 00 00 00 00 00     ................
	...
     695:	00 00 f8 ff 03 f8 ff 03 18 06 00 18 06 00 18 06     ................
     6a5:	00 18 06 00 18 06 00 18 06 00 00 00 00 00 00 00     ................
	...
     6bd:	00 00 3f 00 c0 ff 00 e0 e0 01 30 80 01 38 00 03     ..?.......0..8..
     6cd:	18 00 03 18 06 03 18 06 03 18 06 03 18 fe 03 30     ...............0
     6dd:	fe 01 00 00 00 00 00 00 00 00 00 f8 ff 03 f8 ff     ................
     6ed:	03 00 06 00 00 06 00 00 06 00 00 06 00 00 06 00     ................
     6fd:	00 06 00 f8 ff 03 f8 ff 03 00 00 00 00 00 00 00     ................
	...
     715:	18 00 03 18 00 03 18 00 03 f8 ff 03 f8 ff 03 18     ................
     725:	00 03 18 00 03 18 00 03 00 00 00 00 00 00 00 00     ................
	...
     73d:	00 00 18 80 01 18 00 03 18 00 03 18 00 03 18 00     ................
     74d:	03 18 80 03 f8 ff 01 f8 ff 00 00 00 00 00 00 00     ................
	...
     769:	f8 ff 03 f8 ff 03 00 04 00 00 1f 00 80 3b 00 e0     .............;..
     779:	f0 00 70 c0 01 38 80 03 08 00 02 00 00 00 00 00     ..p..8..........
	...
     795:	00 f8 ff 03 f8 ff 03 00 00 03 00 00 03 00 00 03     ................
     7a5:	00 00 03 00 00 03 00 00 03 00 00 00 00 00 00 00     ................
     7b5:	00 00 00 00 00 f8 ff 03 f8 ff 03 78 00 00 c0 03     ...........x....
     7c5:	00 00 0f 00 00 18 00 00 0f 00 c0 03 00 70 00 00     .............p..
     7d5:	f8 ff 03 f8 ff 03 00 00 00 00 00 00 00 00 00 00     ................
     7e5:	00 00 f8 ff 03 f8 ff 03 38 00 00 e0 01 00 80 07     ........8.......
     7f5:	00 00 3c 00 00 f0 00 00 80 03 f8 ff 03 f8 ff 03     ..<.............
	...
     80d:	00 80 3f 00 e0 ff 00 70 c0 01 38 80 03 18 00 03     ..?....p..8.....
     81d:	18 00 03 18 00 03 38 80 03 70 c0 01 e0 ff 00 80     ......8..p......
     82d:	3f 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 ff     ?...............
     83d:	03 f8 ff 03 18 18 00 18 18 00 18 18 00 18 18 00     ................
     84d:	18 18 00 30 0c 00 f0 07 00 c0 03 00 00 00 00 00     ...0............
     85d:	00 00 00 00 00 80 3f 00 e0 ff 00 70 c0 01 38 80     ......?....p..8.
     86d:	03 18 00 0f 18 00 1f 18 00 3b 38 80 33 70 c0 31     .........;8.3p.1
     87d:	e0 ff 30 80 3f 18 00 00 18 00 00 00 00 00 00 00     ..0.?...........
     88d:	00 00 f8 ff 03 f8 ff 03 18 0c 00 18 0c 00 18 0c     ................
     89d:	00 18 1c 00 38 76 00 f0 e7 01 e0 81 03 00 00 02     ....8v..........
	...
     8b5:	00 e0 81 01 f0 03 03 30 03 03 18 06 03 18 06 03     .......0........
     8c5:	18 0c 03 18 0c 03 18 9c 01 30 f8 01 00 f0 00 00     .........0......
	...
     8dd:	00 00 00 18 00 00 18 00 00 18 00 00 18 00 00 f8     ................
     8ed:	ff 03 f8 ff 03 18 00 00 18 00 00 18 00 00 18 00     ................
	...
     909:	00 f8 ff 00 f8 ff 01 00 80 03 00 00 03 00 00 03     ................
     919:	00 00 03 00 00 03 00 80 01 f8 ff 01 f8 7f 00 00     ................
	...
     931:	00 00 00 38 00 00 f8 03 00 c0 1f 00 00 fe 00 00     ...8............
     941:	e0 03 00 80 03 00 e0 03 00 fe 00 c0 0f 00 f8 01     ................
     951:	00 38 00 00 00 00 00 00 00 00 00 00 00 f8 3f 00     .8............?.
     961:	f8 ff 03 00 e0 03 00 f8 03 00 7e 00 00 0f 00 00     ..........~.....
     971:	7e 00 00 f8 03 00 c0 03 f8 ff 03 f8 3f 00 00 00     ~...........?...
     981:	00 00 00 00 00 00 02 08 00 03 18 c0 03 78 e0 00     .............x..
     991:	e0 79 00 c0 1f 00 00 0f 00 c0 1f 00 e0 79 00 78     .y...........y.x
     9a1:	e0 00 18 c0 03 08 00 03 00 00 02 00 00 00 00 00     ................
     9b1:	00 08 00 00 38 00 00 f0 00 00 c0 03 00 00 0f 00     ....8...........
     9c1:	00 fc 03 00 fc 03 00 0f 00 c0 03 00 f0 00 00 38     ...............8
     9d1:	00 00 08 00 00 00 00 00 00 00 00 18 00 03 18 80     ................
     9e1:	03 18 e0 03 18 38 03 18 1c 03 18 07 03 98 03 03     .....8..........
     9f1:	f8 00 03 78 00 03 18 00 03 00 00 03 00 00 00 00     ...x............
	...
     a0d:	00 00 fc ff 7f fc ff 7f 0c 00 60 0c 00 60 0c 00     ..........`..`..
     a1d:	60 0c 00 60 00 00 00 00 00 00 00 00 00 00 00 00     `..`............
     a2d:	00 00 00 0c 00 00 3c 00 00 f0 00 00 c0 03 00 00     ......<.........
     a3d:	0f 00 00 3c 00 00 f0 00 00 c0 03 00 00 0f 00 00     ...<............
     a4d:	3c 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00     <..0............
     a5d:	00 00 00 0c 00 60 0c 00 60 0c 00 60 0c 00 60 fc     .....`..`..`..`.
     a6d:	ff 7f fc ff 7f 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     a85:	00 00 00 03 00 80 03 00 e0 00 00 38 00 00 18 00     ...........8....
     a95:	00 38 00 00 e0 00 00 80 03 00 00 03 00 00 00 00     .8..............
	...
     aad:	60 00 00 60 00 00 60 00 00 60 00 00 60 00 00 60     `..`..`..`..`..`
     abd:	00 00 60 00 00 60 00 00 60 00 00 60 00 00 60 00     ..`..`..`..`..`.
     acd:	00 60 00 00 60 00 00 60 00 00 00 00 00 00 00 00     .`..`..`........
     add:	00 04 00 00 0c 00 00 1c 00 00 38 00 00 30 00 00     ..........8..0..
     aed:	20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
     b05:	00 e0 01 00 f3 03 80 39 03 80 19 03 80 19 03 80     .......9........
     b15:	19 03 80 99 01 00 ff 03 00 fe 03 00 00 00 00 00     ................
	...
     b2d:	00 00 fc ff 01 fc ff 03 00 03 03 00 03 03 80 01     ................
     b3d:	03 80 01 03 80 01 03 80 83 01 00 ff 00 00 7e 00     ..............~.
	...
     b59:	00 7c 00 00 fe 01 00 87 01 80 83 03 80 01 03 80     .|..............
     b69:	01 03 80 01 03 80 01 03 00 83 01 00 00 00 00 00     ................
	...
     b81:	fc 00 00 fe 01 00 83 03 80 01 03 80 01 03 80 01     ................
     b91:	03 80 81 01 80 c1 01 fc ff 03 fc ff 03 00 00 00     ................
	...
     ba9:	00 00 7c 00 00 ff 01 00 9b 01 80 19 03 80 19 03     ..|.............
     bb9:	80 19 03 80 19 03 80 1b 03 00 1f 03 00 1e 00 00     ................
	...
     bd5:	03 00 00 03 00 00 03 00 00 03 00 f0 ff 03 f8 ff     ................
     be5:	03 1c 03 00 0c 03 00 0c 03 00 0c 00 00 00 00 00     ................
	...
     bfd:	00 00 c0 1c 00 ee 3f 00 3f 73 80 3b 63 80 31 63     ......?.?s.;c.1c
     c0d:	80 31 63 80 31 63 80 3b 63 80 1f 33 80 0f 3e 80     .1c.1c.;c..3..>.
     c1d:	01 1e 00 00 00 00 00 00 00 00 00 00 00 00 fc ff     ................
     c2d:	03 fc ff 03 00 07 00 00 03 00 80 01 00 80 01 00     ................
     c3d:	80 03 00 80 ff 03 00 fe 03 00 00 00 00 00 00 00     ................
	...
     c55:	80 01 03 80 01 03 80 01 03 9c 01 03 9c ff 03 9c     ................
     c65:	ff 03 00 00 03 00 00 03 00 00 03 00 00 00 00 00     ................
	...
     c7d:	00 00 80 01 30 80 01 60 80 01 60 80 01 60 80 01     ....0..`..`..`..
     c8d:	60 9c 01 70 9c ff 3f 9c ff 1f 00 00 00 00 00 00     `..p..?.........
	...
     ca9:	fc ff 03 fc ff 03 00 18 00 00 3c 00 00 76 00 00     ..........<..v..
     cb9:	e7 00 80 c3 01 80 81 03 80 00 03 00 00 02 00 00     ................
	...
     cd1:	00 00 0c 00 03 0c 00 03 0c 00 03 0c 00 03 fc ff     ................
     ce1:	03 fc ff 03 00 00 03 00 00 03 00 00 03 00 00 00     ................
	...
     cfd:	80 ff 03 80 ff 03 00 03 00 80 01 00 80 ff 03 00     ................
     d0d:	ff 03 00 03 00 80 01 00 80 ff 03 00 ff 03 00 00     ................
	...
     d25:	00 00 80 ff 03 80 ff 03 00 07 00 80 03 00 80 01     ................
     d35:	00 80 01 00 80 03 00 80 ff 03 00 fe 03 00 00 00     ................
	...
     d4d:	00 00 7c 00 00 fe 01 00 83 01 80 01 03 80 01 03     ..|.............
     d5d:	80 01 03 80 01 03 80 81 03 00 83 01 00 ff 00 00     ................
     d6d:	7c 00 00 00 00 00 00 00 00 00 00 00 00 00 80 ff     |...............
     d7d:	7f 80 ff 7f 00 03 03 80 01 03 80 01 03 80 01 03     ................
     d8d:	80 83 01 00 ff 01 00 7e 00 00 00 00 00 00 00 00     .......~........
     d9d:	00 00 00 00 00 00 fc 00 00 fe 01 00 83 03 80 01     ................
     dad:	03 80 01 03 80 01 03 80 81 01 80 c1 01 80 ff 7f     ................
     dbd:	80 ff 7f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dcd:	00 00 80 ff 03 80 ff 03 00 03 00 00 03 00 80 01     ................
     ddd:	00 80 01 00 80 01 00 80 07 00 00 07 00 00 00 00     ................
	...
     df9:	00 86 01 00 0f 03 80 19 03 80 19 03 80 11 03 80     ................
     e09:	31 03 80 31 03 00 e3 01 00 e0 00 00 00 00 00 00     1..1............
     e19:	00 00 00 00 00 00 00 80 01 00 80 01 00 80 01 00     ................
     e29:	f8 ff 00 f8 ff 01 80 81 03 80 01 03 80 01 03 80     ................
     e39:	01 03 80 01 03 00 00 00 00 00 00 00 00 00 00 00     ................
     e49:	00 00 00 00 80 ff 00 80 ff 03 00 80 03 00 00 03     ................
     e59:	00 00 03 00 80 03 00 c0 01 80 ff 03 80 ff 03 00     ................
	...
     e71:	00 00 00 80 01 00 80 0f 00 00 3e 00 00 f8 00 00     ..........>.....
     e81:	c0 03 00 80 03 00 c0 03 00 f8 00 00 3e 00 80 0f     ............>...
     e91:	00 80 01 00 00 00 00 00 00 00 00 00 00 80 ff 00     ................
     ea1:	00 ff 03 00 80 03 00 e0 03 00 78 00 00 3c 00 00     ..........x..<..
     eb1:	78 00 00 e0 03 00 80 03 00 ff 03 80 ff 00 00 00     x...............
     ec1:	00 00 00 00 00 00 00 80 00 02 80 01 03 80 83 03     ................
     ed1:	00 cf 01 00 7c 00 00 38 00 00 7c 00 00 ee 01 80     ....|..8..|.....
     ee1:	83 03 80 01 03 80 00 02 00 00 00 00 00 00 00 00     ................
     ef1:	60 80 01 60 80 0f 60 00 3e 70 00 f8 38 00 c0 1f     `..`..`.>p..8...
     f01:	00 00 0f 00 e0 03 00 fc 00 80 1f 00 80 03 00 00     ................
	...
     f1d:	00 00 80 01 03 80 81 03 80 c1 03 80 61 03 80 39     ............a..9
     f2d:	03 80 0d 03 80 07 03 80 03 03 80 01 03 00 00 00     ................
	...
     f49:	00 18 00 00 18 00 00 3c 00 f0 ff 1f f8 e7 3f 1c     .......<......?.
     f59:	00 70 0c 00 60 0c 00 60 00 00 00 00 00 00 00 00     .p..`..`........
	...
     f79:	00 00 00 ff ff 7f ff ff 7f 00 00 00 00 00 00 00     ................
	...
     f9d:	00 00 00 0c 00 60 0c 00 60 1c 00 70 f8 e7 3f f0     .....`..`..p..?.
     fad:	ff 1f 00 3c 00 00 18 00 00 18 00 00 00 00 00 00     ...<............
	...
     fc5:	30 00 00 3c 00 00 0c 00 00 0c 00 00 1c 00 00 38     0..<...........8
     fd5:	00 00 70 00 00 60 00 00 60 00 00 78 00 00 18 00     ..p..`..`..x....
     fe5:	00 00 00 00 00 00 f8 ff 01 08 00 01 08 00 01 08     ................
     ff5:	00 01 f8 ff 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00001015 <asc2_1608>:
	...

00001016 <__ctors_end>:
    1016:	11 24       	eor	r1, r1
    1018:	1f be       	out	0x3f, r1	; 63
    101a:	cf e5       	ldi	r28, 0x5F	; 95
    101c:	d8 e0       	ldi	r29, 0x08	; 8
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	cd bf       	out	0x3d, r28	; 61

00001022 <__do_copy_data>:
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	a0 e6       	ldi	r26, 0x60	; 96
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ea e5       	ldi	r30, 0x5A	; 90
    102a:	f1 e6       	ldi	r31, 0x61	; 97
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <.do_copy_data_start>

0000102e <.do_copy_data_loop>:
    102e:	05 90       	lpm	r0, Z+
    1030:	0d 92       	st	X+, r0

00001032 <.do_copy_data_start>:
    1032:	a0 3c       	cpi	r26, 0xC0	; 192
    1034:	b1 07       	cpc	r27, r17
    1036:	d9 f7       	brne	.-10     	; 0x102e <.do_copy_data_loop>

00001038 <__do_clear_bss>:
    1038:	17 e0       	ldi	r17, 0x07	; 7
    103a:	a0 ec       	ldi	r26, 0xC0	; 192
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <.do_clear_bss_start>

00001040 <.do_clear_bss_loop>:
    1040:	1d 92       	st	X+, r1

00001042 <.do_clear_bss_start>:
    1042:	ad 30       	cpi	r26, 0x0D	; 13
    1044:	b1 07       	cpc	r27, r17
    1046:	e1 f7       	brne	.-8      	; 0x1040 <.do_clear_bss_loop>
    1048:	0e 94 0f 30 	call	0x601e	; 0x601e <main>
    104c:	0c 94 ab 30 	jmp	0x6156	; 0x6156 <_exit>

00001050 <__bad_interrupt>:
    1050:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001054 <__fixunssfsi>:
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	7b 01       	movw	r14, r22
    105e:	8c 01       	movw	r16, r24
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	5f e4       	ldi	r21, 0x4F	; 79
    1068:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
    106c:	88 23       	and	r24, r24
    106e:	8c f0       	brlt	.+34     	; 0x1092 <__fixunssfsi+0x3e>
    1070:	c8 01       	movw	r24, r16
    1072:	b7 01       	movw	r22, r14
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	5f e4       	ldi	r21, 0x4F	; 79
    107c:	0e 94 a2 09 	call	0x1344	; 0x1344 <__subsf3>
    1080:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__fixsfsi>
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	20 50       	subi	r18, 0x00	; 0
    108a:	30 40       	sbci	r19, 0x00	; 0
    108c:	40 40       	sbci	r20, 0x00	; 0
    108e:	50 48       	sbci	r21, 0x80	; 128
    1090:	06 c0       	rjmp	.+12     	; 0x109e <__fixunssfsi+0x4a>
    1092:	c8 01       	movw	r24, r16
    1094:	b7 01       	movw	r22, r14
    1096:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__fixsfsi>
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	b9 01       	movw	r22, r18
    10a0:	ca 01       	movw	r24, r20
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	08 95       	ret

000010ac <_fpadd_parts>:
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ec e5       	ldi	r30, 0x5C	; 92
    10b2:	f8 e0       	ldi	r31, 0x08	; 8
    10b4:	0c 94 74 30 	jmp	0x60e8	; 0x60e8 <__prologue_saves__>
    10b8:	dc 01       	movw	r26, r24
    10ba:	2b 01       	movw	r4, r22
    10bc:	fa 01       	movw	r30, r20
    10be:	9c 91       	ld	r25, X
    10c0:	92 30       	cpi	r25, 0x02	; 2
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <_fpadd_parts+0x1a>
    10c4:	39 c1       	rjmp	.+626    	; 0x1338 <_fpadd_parts+0x28c>
    10c6:	eb 01       	movw	r28, r22
    10c8:	88 81       	ld	r24, Y
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	08 f4       	brcc	.+2      	; 0x10d0 <_fpadd_parts+0x24>
    10ce:	33 c1       	rjmp	.+614    	; 0x1336 <_fpadd_parts+0x28a>
    10d0:	94 30       	cpi	r25, 0x04	; 4
    10d2:	69 f4       	brne	.+26     	; 0x10ee <_fpadd_parts+0x42>
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	09 f0       	breq	.+2      	; 0x10da <_fpadd_parts+0x2e>
    10d8:	2f c1       	rjmp	.+606    	; 0x1338 <_fpadd_parts+0x28c>
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	9c 91       	ld	r25, X
    10de:	11 97       	sbiw	r26, 0x01	; 1
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	98 17       	cp	r25, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <_fpadd_parts+0x3c>
    10e6:	28 c1       	rjmp	.+592    	; 0x1338 <_fpadd_parts+0x28c>
    10e8:	ac ea       	ldi	r26, 0xAC	; 172
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	25 c1       	rjmp	.+586    	; 0x1338 <_fpadd_parts+0x28c>
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <_fpadd_parts+0x48>
    10f2:	21 c1       	rjmp	.+578    	; 0x1336 <_fpadd_parts+0x28a>
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	a9 f4       	brne	.+42     	; 0x1122 <_fpadd_parts+0x76>
    10f8:	92 30       	cpi	r25, 0x02	; 2
    10fa:	09 f0       	breq	.+2      	; 0x10fe <_fpadd_parts+0x52>
    10fc:	1d c1       	rjmp	.+570    	; 0x1338 <_fpadd_parts+0x28c>
    10fe:	9a 01       	movw	r18, r20
    1100:	ad 01       	movw	r20, r26
    1102:	88 e0       	ldi	r24, 0x08	; 8
    1104:	ea 01       	movw	r28, r20
    1106:	09 90       	ld	r0, Y+
    1108:	ae 01       	movw	r20, r28
    110a:	e9 01       	movw	r28, r18
    110c:	09 92       	st	Y+, r0
    110e:	9e 01       	movw	r18, r28
    1110:	81 50       	subi	r24, 0x01	; 1
    1112:	c1 f7       	brne	.-16     	; 0x1104 <_fpadd_parts+0x58>
    1114:	e2 01       	movw	r28, r4
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	9c 91       	ld	r25, X
    111c:	89 23       	and	r24, r25
    111e:	81 83       	std	Z+1, r24	; 0x01
    1120:	08 c1       	rjmp	.+528    	; 0x1332 <_fpadd_parts+0x286>
    1122:	92 30       	cpi	r25, 0x02	; 2
    1124:	09 f4       	brne	.+2      	; 0x1128 <_fpadd_parts+0x7c>
    1126:	07 c1       	rjmp	.+526    	; 0x1336 <_fpadd_parts+0x28a>
    1128:	12 96       	adiw	r26, 0x02	; 2
    112a:	2d 90       	ld	r2, X+
    112c:	3c 90       	ld	r3, X
    112e:	13 97       	sbiw	r26, 0x03	; 3
    1130:	eb 01       	movw	r28, r22
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	14 96       	adiw	r26, 0x04	; 4
    1138:	ad 90       	ld	r10, X+
    113a:	bd 90       	ld	r11, X+
    113c:	cd 90       	ld	r12, X+
    113e:	dc 90       	ld	r13, X
    1140:	17 97       	sbiw	r26, 0x07	; 7
    1142:	ec 80       	ldd	r14, Y+4	; 0x04
    1144:	fd 80       	ldd	r15, Y+5	; 0x05
    1146:	0e 81       	ldd	r16, Y+6	; 0x06
    1148:	1f 81       	ldd	r17, Y+7	; 0x07
    114a:	91 01       	movw	r18, r2
    114c:	28 1b       	sub	r18, r24
    114e:	39 0b       	sbc	r19, r25
    1150:	b9 01       	movw	r22, r18
    1152:	37 ff       	sbrs	r19, 7
    1154:	04 c0       	rjmp	.+8      	; 0x115e <_fpadd_parts+0xb2>
    1156:	66 27       	eor	r22, r22
    1158:	77 27       	eor	r23, r23
    115a:	62 1b       	sub	r22, r18
    115c:	73 0b       	sbc	r23, r19
    115e:	60 32       	cpi	r22, 0x20	; 32
    1160:	71 05       	cpc	r23, r1
    1162:	0c f0       	brlt	.+2      	; 0x1166 <_fpadd_parts+0xba>
    1164:	61 c0       	rjmp	.+194    	; 0x1228 <_fpadd_parts+0x17c>
    1166:	12 16       	cp	r1, r18
    1168:	13 06       	cpc	r1, r19
    116a:	6c f5       	brge	.+90     	; 0x11c6 <_fpadd_parts+0x11a>
    116c:	37 01       	movw	r6, r14
    116e:	48 01       	movw	r8, r16
    1170:	06 2e       	mov	r0, r22
    1172:	04 c0       	rjmp	.+8      	; 0x117c <_fpadd_parts+0xd0>
    1174:	96 94       	lsr	r9
    1176:	87 94       	ror	r8
    1178:	77 94       	ror	r7
    117a:	67 94       	ror	r6
    117c:	0a 94       	dec	r0
    117e:	d2 f7       	brpl	.-12     	; 0x1174 <_fpadd_parts+0xc8>
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <_fpadd_parts+0xe6>
    118a:	22 0f       	add	r18, r18
    118c:	33 1f       	adc	r19, r19
    118e:	44 1f       	adc	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	6a 95       	dec	r22
    1194:	d2 f7       	brpl	.-12     	; 0x118a <_fpadd_parts+0xde>
    1196:	21 50       	subi	r18, 0x01	; 1
    1198:	30 40       	sbci	r19, 0x00	; 0
    119a:	40 40       	sbci	r20, 0x00	; 0
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	2e 21       	and	r18, r14
    11a0:	3f 21       	and	r19, r15
    11a2:	40 23       	and	r20, r16
    11a4:	51 23       	and	r21, r17
    11a6:	21 15       	cp	r18, r1
    11a8:	31 05       	cpc	r19, r1
    11aa:	41 05       	cpc	r20, r1
    11ac:	51 05       	cpc	r21, r1
    11ae:	21 f0       	breq	.+8      	; 0x11b8 <_fpadd_parts+0x10c>
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	79 01       	movw	r14, r18
    11ba:	8a 01       	movw	r16, r20
    11bc:	e6 28       	or	r14, r6
    11be:	f7 28       	or	r15, r7
    11c0:	08 29       	or	r16, r8
    11c2:	19 29       	or	r17, r9
    11c4:	3c c0       	rjmp	.+120    	; 0x123e <_fpadd_parts+0x192>
    11c6:	23 2b       	or	r18, r19
    11c8:	d1 f1       	breq	.+116    	; 0x123e <_fpadd_parts+0x192>
    11ca:	26 0e       	add	r2, r22
    11cc:	37 1e       	adc	r3, r23
    11ce:	35 01       	movw	r6, r10
    11d0:	46 01       	movw	r8, r12
    11d2:	06 2e       	mov	r0, r22
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <_fpadd_parts+0x132>
    11d6:	96 94       	lsr	r9
    11d8:	87 94       	ror	r8
    11da:	77 94       	ror	r7
    11dc:	67 94       	ror	r6
    11de:	0a 94       	dec	r0
    11e0:	d2 f7       	brpl	.-12     	; 0x11d6 <_fpadd_parts+0x12a>
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <_fpadd_parts+0x148>
    11ec:	22 0f       	add	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	44 1f       	adc	r20, r20
    11f2:	55 1f       	adc	r21, r21
    11f4:	6a 95       	dec	r22
    11f6:	d2 f7       	brpl	.-12     	; 0x11ec <_fpadd_parts+0x140>
    11f8:	21 50       	subi	r18, 0x01	; 1
    11fa:	30 40       	sbci	r19, 0x00	; 0
    11fc:	40 40       	sbci	r20, 0x00	; 0
    11fe:	50 40       	sbci	r21, 0x00	; 0
    1200:	2a 21       	and	r18, r10
    1202:	3b 21       	and	r19, r11
    1204:	4c 21       	and	r20, r12
    1206:	5d 21       	and	r21, r13
    1208:	21 15       	cp	r18, r1
    120a:	31 05       	cpc	r19, r1
    120c:	41 05       	cpc	r20, r1
    120e:	51 05       	cpc	r21, r1
    1210:	21 f0       	breq	.+8      	; 0x121a <_fpadd_parts+0x16e>
    1212:	21 e0       	ldi	r18, 0x01	; 1
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	59 01       	movw	r10, r18
    121c:	6a 01       	movw	r12, r20
    121e:	a6 28       	or	r10, r6
    1220:	b7 28       	or	r11, r7
    1222:	c8 28       	or	r12, r8
    1224:	d9 28       	or	r13, r9
    1226:	0b c0       	rjmp	.+22     	; 0x123e <_fpadd_parts+0x192>
    1228:	82 15       	cp	r24, r2
    122a:	93 05       	cpc	r25, r3
    122c:	2c f0       	brlt	.+10     	; 0x1238 <_fpadd_parts+0x18c>
    122e:	1c 01       	movw	r2, r24
    1230:	aa 24       	eor	r10, r10
    1232:	bb 24       	eor	r11, r11
    1234:	65 01       	movw	r12, r10
    1236:	03 c0       	rjmp	.+6      	; 0x123e <_fpadd_parts+0x192>
    1238:	ee 24       	eor	r14, r14
    123a:	ff 24       	eor	r15, r15
    123c:	87 01       	movw	r16, r14
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	9c 91       	ld	r25, X
    1242:	d2 01       	movw	r26, r4
    1244:	11 96       	adiw	r26, 0x01	; 1
    1246:	8c 91       	ld	r24, X
    1248:	98 17       	cp	r25, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <_fpadd_parts+0x1a2>
    124c:	45 c0       	rjmp	.+138    	; 0x12d8 <_fpadd_parts+0x22c>
    124e:	99 23       	and	r25, r25
    1250:	39 f0       	breq	.+14     	; 0x1260 <_fpadd_parts+0x1b4>
    1252:	a8 01       	movw	r20, r16
    1254:	97 01       	movw	r18, r14
    1256:	2a 19       	sub	r18, r10
    1258:	3b 09       	sbc	r19, r11
    125a:	4c 09       	sbc	r20, r12
    125c:	5d 09       	sbc	r21, r13
    125e:	06 c0       	rjmp	.+12     	; 0x126c <_fpadd_parts+0x1c0>
    1260:	a6 01       	movw	r20, r12
    1262:	95 01       	movw	r18, r10
    1264:	2e 19       	sub	r18, r14
    1266:	3f 09       	sbc	r19, r15
    1268:	40 0b       	sbc	r20, r16
    126a:	51 0b       	sbc	r21, r17
    126c:	57 fd       	sbrc	r21, 7
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <_fpadd_parts+0x1d4>
    1270:	11 82       	std	Z+1, r1	; 0x01
    1272:	33 82       	std	Z+3, r3	; 0x03
    1274:	22 82       	std	Z+2, r2	; 0x02
    1276:	24 83       	std	Z+4, r18	; 0x04
    1278:	35 83       	std	Z+5, r19	; 0x05
    127a:	46 83       	std	Z+6, r20	; 0x06
    127c:	57 83       	std	Z+7, r21	; 0x07
    127e:	1d c0       	rjmp	.+58     	; 0x12ba <_fpadd_parts+0x20e>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	81 83       	std	Z+1, r24	; 0x01
    1284:	33 82       	std	Z+3, r3	; 0x03
    1286:	22 82       	std	Z+2, r2	; 0x02
    1288:	88 27       	eor	r24, r24
    128a:	99 27       	eor	r25, r25
    128c:	dc 01       	movw	r26, r24
    128e:	82 1b       	sub	r24, r18
    1290:	93 0b       	sbc	r25, r19
    1292:	a4 0b       	sbc	r26, r20
    1294:	b5 0b       	sbc	r27, r21
    1296:	84 83       	std	Z+4, r24	; 0x04
    1298:	95 83       	std	Z+5, r25	; 0x05
    129a:	a6 83       	std	Z+6, r26	; 0x06
    129c:	b7 83       	std	Z+7, r27	; 0x07
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <_fpadd_parts+0x20e>
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	44 1f       	adc	r20, r20
    12a6:	55 1f       	adc	r21, r21
    12a8:	24 83       	std	Z+4, r18	; 0x04
    12aa:	35 83       	std	Z+5, r19	; 0x05
    12ac:	46 83       	std	Z+6, r20	; 0x06
    12ae:	57 83       	std	Z+7, r21	; 0x07
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	93 83       	std	Z+3, r25	; 0x03
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	24 81       	ldd	r18, Z+4	; 0x04
    12bc:	35 81       	ldd	r19, Z+5	; 0x05
    12be:	46 81       	ldd	r20, Z+6	; 0x06
    12c0:	57 81       	ldd	r21, Z+7	; 0x07
    12c2:	da 01       	movw	r26, r20
    12c4:	c9 01       	movw	r24, r18
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	a1 09       	sbc	r26, r1
    12ca:	b1 09       	sbc	r27, r1
    12cc:	8f 5f       	subi	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	af 4f       	sbci	r26, 0xFF	; 255
    12d2:	bf 43       	sbci	r27, 0x3F	; 63
    12d4:	28 f3       	brcs	.-54     	; 0x12a0 <_fpadd_parts+0x1f4>
    12d6:	0b c0       	rjmp	.+22     	; 0x12ee <_fpadd_parts+0x242>
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	33 82       	std	Z+3, r3	; 0x03
    12dc:	22 82       	std	Z+2, r2	; 0x02
    12de:	ea 0c       	add	r14, r10
    12e0:	fb 1c       	adc	r15, r11
    12e2:	0c 1d       	adc	r16, r12
    12e4:	1d 1d       	adc	r17, r13
    12e6:	e4 82       	std	Z+4, r14	; 0x04
    12e8:	f5 82       	std	Z+5, r15	; 0x05
    12ea:	06 83       	std	Z+6, r16	; 0x06
    12ec:	17 83       	std	Z+7, r17	; 0x07
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	80 83       	st	Z, r24
    12f2:	24 81       	ldd	r18, Z+4	; 0x04
    12f4:	35 81       	ldd	r19, Z+5	; 0x05
    12f6:	46 81       	ldd	r20, Z+6	; 0x06
    12f8:	57 81       	ldd	r21, Z+7	; 0x07
    12fa:	57 ff       	sbrs	r21, 7
    12fc:	1a c0       	rjmp	.+52     	; 0x1332 <_fpadd_parts+0x286>
    12fe:	c9 01       	movw	r24, r18
    1300:	aa 27       	eor	r26, r26
    1302:	97 fd       	sbrc	r25, 7
    1304:	a0 95       	com	r26
    1306:	ba 2f       	mov	r27, r26
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	a0 70       	andi	r26, 0x00	; 0
    130e:	b0 70       	andi	r27, 0x00	; 0
    1310:	56 95       	lsr	r21
    1312:	47 95       	ror	r20
    1314:	37 95       	ror	r19
    1316:	27 95       	ror	r18
    1318:	82 2b       	or	r24, r18
    131a:	93 2b       	or	r25, r19
    131c:	a4 2b       	or	r26, r20
    131e:	b5 2b       	or	r27, r21
    1320:	84 83       	std	Z+4, r24	; 0x04
    1322:	95 83       	std	Z+5, r25	; 0x05
    1324:	a6 83       	std	Z+6, r26	; 0x06
    1326:	b7 83       	std	Z+7, r27	; 0x07
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	93 83       	std	Z+3, r25	; 0x03
    1330:	82 83       	std	Z+2, r24	; 0x02
    1332:	df 01       	movw	r26, r30
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <_fpadd_parts+0x28c>
    1336:	d2 01       	movw	r26, r4
    1338:	cd 01       	movw	r24, r26
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	e2 e1       	ldi	r30, 0x12	; 18
    1340:	0c 94 90 30 	jmp	0x6120	; 0x6120 <__epilogue_restores__>

00001344 <__subsf3>:
    1344:	a0 e2       	ldi	r26, 0x20	; 32
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 ea       	ldi	r30, 0xA8	; 168
    134a:	f9 e0       	ldi	r31, 0x09	; 9
    134c:	0c 94 80 30 	jmp	0x6100	; 0x6100 <__prologue_saves__+0x18>
    1350:	69 83       	std	Y+1, r22	; 0x01
    1352:	7a 83       	std	Y+2, r23	; 0x02
    1354:	8b 83       	std	Y+3, r24	; 0x03
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	2d 83       	std	Y+5, r18	; 0x05
    135a:	3e 83       	std	Y+6, r19	; 0x06
    135c:	4f 83       	std	Y+7, r20	; 0x07
    135e:	58 87       	std	Y+8, r21	; 0x08
    1360:	e9 e0       	ldi	r30, 0x09	; 9
    1362:	ee 2e       	mov	r14, r30
    1364:	f1 2c       	mov	r15, r1
    1366:	ec 0e       	add	r14, r28
    1368:	fd 1e       	adc	r15, r29
    136a:	ce 01       	movw	r24, r28
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	b7 01       	movw	r22, r14
    1370:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1374:	8e 01       	movw	r16, r28
    1376:	0f 5e       	subi	r16, 0xEF	; 239
    1378:	1f 4f       	sbci	r17, 0xFF	; 255
    137a:	ce 01       	movw	r24, r28
    137c:	05 96       	adiw	r24, 0x05	; 5
    137e:	b8 01       	movw	r22, r16
    1380:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1384:	8a 89       	ldd	r24, Y+18	; 0x12
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	89 27       	eor	r24, r25
    138a:	8a 8b       	std	Y+18, r24	; 0x12
    138c:	c7 01       	movw	r24, r14
    138e:	b8 01       	movw	r22, r16
    1390:	ae 01       	movw	r20, r28
    1392:	47 5e       	subi	r20, 0xE7	; 231
    1394:	5f 4f       	sbci	r21, 0xFF	; 255
    1396:	0e 94 56 08 	call	0x10ac	; 0x10ac <_fpadd_parts>
    139a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__pack_f>
    139e:	a0 96       	adiw	r28, 0x20	; 32
    13a0:	e6 e0       	ldi	r30, 0x06	; 6
    13a2:	0c 94 9c 30 	jmp	0x6138	; 0x6138 <__epilogue_restores__+0x18>

000013a6 <__addsf3>:
    13a6:	a0 e2       	ldi	r26, 0x20	; 32
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e9 ed       	ldi	r30, 0xD9	; 217
    13ac:	f9 e0       	ldi	r31, 0x09	; 9
    13ae:	0c 94 80 30 	jmp	0x6100	; 0x6100 <__prologue_saves__+0x18>
    13b2:	69 83       	std	Y+1, r22	; 0x01
    13b4:	7a 83       	std	Y+2, r23	; 0x02
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	2d 83       	std	Y+5, r18	; 0x05
    13bc:	3e 83       	std	Y+6, r19	; 0x06
    13be:	4f 83       	std	Y+7, r20	; 0x07
    13c0:	58 87       	std	Y+8, r21	; 0x08
    13c2:	f9 e0       	ldi	r31, 0x09	; 9
    13c4:	ef 2e       	mov	r14, r31
    13c6:	f1 2c       	mov	r15, r1
    13c8:	ec 0e       	add	r14, r28
    13ca:	fd 1e       	adc	r15, r29
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	b7 01       	movw	r22, r14
    13d2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    13d6:	8e 01       	movw	r16, r28
    13d8:	0f 5e       	subi	r16, 0xEF	; 239
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	ce 01       	movw	r24, r28
    13de:	05 96       	adiw	r24, 0x05	; 5
    13e0:	b8 01       	movw	r22, r16
    13e2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    13e6:	c7 01       	movw	r24, r14
    13e8:	b8 01       	movw	r22, r16
    13ea:	ae 01       	movw	r20, r28
    13ec:	47 5e       	subi	r20, 0xE7	; 231
    13ee:	5f 4f       	sbci	r21, 0xFF	; 255
    13f0:	0e 94 56 08 	call	0x10ac	; 0x10ac <_fpadd_parts>
    13f4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__pack_f>
    13f8:	a0 96       	adiw	r28, 0x20	; 32
    13fa:	e6 e0       	ldi	r30, 0x06	; 6
    13fc:	0c 94 9c 30 	jmp	0x6138	; 0x6138 <__epilogue_restores__+0x18>

00001400 <__mulsf3>:
    1400:	a0 e2       	ldi	r26, 0x20	; 32
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e6 e0       	ldi	r30, 0x06	; 6
    1406:	fa e0       	ldi	r31, 0x0A	; 10
    1408:	0c 94 74 30 	jmp	0x60e8	; 0x60e8 <__prologue_saves__>
    140c:	69 83       	std	Y+1, r22	; 0x01
    140e:	7a 83       	std	Y+2, r23	; 0x02
    1410:	8b 83       	std	Y+3, r24	; 0x03
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	2d 83       	std	Y+5, r18	; 0x05
    1416:	3e 83       	std	Y+6, r19	; 0x06
    1418:	4f 83       	std	Y+7, r20	; 0x07
    141a:	58 87       	std	Y+8, r21	; 0x08
    141c:	ce 01       	movw	r24, r28
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	be 01       	movw	r22, r28
    1422:	67 5f       	subi	r22, 0xF7	; 247
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    142a:	ce 01       	movw	r24, r28
    142c:	05 96       	adiw	r24, 0x05	; 5
    142e:	be 01       	movw	r22, r28
    1430:	6f 5e       	subi	r22, 0xEF	; 239
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1438:	99 85       	ldd	r25, Y+9	; 0x09
    143a:	92 30       	cpi	r25, 0x02	; 2
    143c:	88 f0       	brcs	.+34     	; 0x1460 <__mulsf3+0x60>
    143e:	89 89       	ldd	r24, Y+17	; 0x11
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	c8 f0       	brcs	.+50     	; 0x1476 <__mulsf3+0x76>
    1444:	94 30       	cpi	r25, 0x04	; 4
    1446:	19 f4       	brne	.+6      	; 0x144e <__mulsf3+0x4e>
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	51 f4       	brne	.+20     	; 0x1460 <__mulsf3+0x60>
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <__mulsf3+0x56>
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	29 f4       	brne	.+10     	; 0x145c <__mulsf3+0x5c>
    1452:	92 30       	cpi	r25, 0x02	; 2
    1454:	81 f4       	brne	.+32     	; 0x1476 <__mulsf3+0x76>
    1456:	8c ea       	ldi	r24, 0xAC	; 172
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	c6 c0       	rjmp	.+396    	; 0x15e8 <__mulsf3+0x1e8>
    145c:	92 30       	cpi	r25, 0x02	; 2
    145e:	49 f4       	brne	.+18     	; 0x1472 <__mulsf3+0x72>
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	8a 89       	ldd	r24, Y+18	; 0x12
    1466:	98 13       	cpse	r25, r24
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	2a 87       	std	Y+10, r18	; 0x0a
    146c:	ce 01       	movw	r24, r28
    146e:	09 96       	adiw	r24, 0x09	; 9
    1470:	bb c0       	rjmp	.+374    	; 0x15e8 <__mulsf3+0x1e8>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	49 f4       	brne	.+18     	; 0x1488 <__mulsf3+0x88>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	8a 89       	ldd	r24, Y+18	; 0x12
    147c:	98 13       	cpse	r25, r24
    147e:	21 e0       	ldi	r18, 0x01	; 1
    1480:	2a 8b       	std	Y+18, r18	; 0x12
    1482:	ce 01       	movw	r24, r28
    1484:	41 96       	adiw	r24, 0x11	; 17
    1486:	b0 c0       	rjmp	.+352    	; 0x15e8 <__mulsf3+0x1e8>
    1488:	2d 84       	ldd	r2, Y+13	; 0x0d
    148a:	3e 84       	ldd	r3, Y+14	; 0x0e
    148c:	4f 84       	ldd	r4, Y+15	; 0x0f
    148e:	58 88       	ldd	r5, Y+16	; 0x10
    1490:	6d 88       	ldd	r6, Y+21	; 0x15
    1492:	7e 88       	ldd	r7, Y+22	; 0x16
    1494:	8f 88       	ldd	r8, Y+23	; 0x17
    1496:	98 8c       	ldd	r9, Y+24	; 0x18
    1498:	ee 24       	eor	r14, r14
    149a:	ff 24       	eor	r15, r15
    149c:	87 01       	movw	r16, r14
    149e:	aa 24       	eor	r10, r10
    14a0:	bb 24       	eor	r11, r11
    14a2:	65 01       	movw	r12, r10
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	e0 e0       	ldi	r30, 0x00	; 0
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	c1 01       	movw	r24, r2
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	90 70       	andi	r25, 0x00	; 0
    14b6:	89 2b       	or	r24, r25
    14b8:	e9 f0       	breq	.+58     	; 0x14f4 <__mulsf3+0xf4>
    14ba:	e6 0c       	add	r14, r6
    14bc:	f7 1c       	adc	r15, r7
    14be:	08 1d       	adc	r16, r8
    14c0:	19 1d       	adc	r17, r9
    14c2:	9a 01       	movw	r18, r20
    14c4:	ab 01       	movw	r20, r22
    14c6:	2a 0d       	add	r18, r10
    14c8:	3b 1d       	adc	r19, r11
    14ca:	4c 1d       	adc	r20, r12
    14cc:	5d 1d       	adc	r21, r13
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e6 14       	cp	r14, r6
    14d8:	f7 04       	cpc	r15, r7
    14da:	08 05       	cpc	r16, r8
    14dc:	19 05       	cpc	r17, r9
    14de:	20 f4       	brcc	.+8      	; 0x14e8 <__mulsf3+0xe8>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ba 01       	movw	r22, r20
    14ea:	a9 01       	movw	r20, r18
    14ec:	48 0f       	add	r20, r24
    14ee:	59 1f       	adc	r21, r25
    14f0:	6a 1f       	adc	r22, r26
    14f2:	7b 1f       	adc	r23, r27
    14f4:	aa 0c       	add	r10, r10
    14f6:	bb 1c       	adc	r11, r11
    14f8:	cc 1c       	adc	r12, r12
    14fa:	dd 1c       	adc	r13, r13
    14fc:	97 fe       	sbrs	r9, 7
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <__mulsf3+0x110>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	a8 2a       	or	r10, r24
    150a:	b9 2a       	or	r11, r25
    150c:	ca 2a       	or	r12, r26
    150e:	db 2a       	or	r13, r27
    1510:	31 96       	adiw	r30, 0x01	; 1
    1512:	e0 32       	cpi	r30, 0x20	; 32
    1514:	f1 05       	cpc	r31, r1
    1516:	49 f0       	breq	.+18     	; 0x152a <__mulsf3+0x12a>
    1518:	66 0c       	add	r6, r6
    151a:	77 1c       	adc	r7, r7
    151c:	88 1c       	adc	r8, r8
    151e:	99 1c       	adc	r9, r9
    1520:	56 94       	lsr	r5
    1522:	47 94       	ror	r4
    1524:	37 94       	ror	r3
    1526:	27 94       	ror	r2
    1528:	c3 cf       	rjmp	.-122    	; 0x14b0 <__mulsf3+0xb0>
    152a:	fa 85       	ldd	r31, Y+10	; 0x0a
    152c:	ea 89       	ldd	r30, Y+18	; 0x12
    152e:	2b 89       	ldd	r18, Y+19	; 0x13
    1530:	3c 89       	ldd	r19, Y+20	; 0x14
    1532:	8b 85       	ldd	r24, Y+11	; 0x0b
    1534:	9c 85       	ldd	r25, Y+12	; 0x0c
    1536:	28 0f       	add	r18, r24
    1538:	39 1f       	adc	r19, r25
    153a:	2e 5f       	subi	r18, 0xFE	; 254
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	17 c0       	rjmp	.+46     	; 0x156e <__mulsf3+0x16e>
    1540:	ca 01       	movw	r24, r20
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	90 70       	andi	r25, 0x00	; 0
    1546:	89 2b       	or	r24, r25
    1548:	61 f0       	breq	.+24     	; 0x1562 <__mulsf3+0x162>
    154a:	16 95       	lsr	r17
    154c:	07 95       	ror	r16
    154e:	f7 94       	ror	r15
    1550:	e7 94       	ror	r14
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e8       	ldi	r27, 0x80	; 128
    155a:	e8 2a       	or	r14, r24
    155c:	f9 2a       	or	r15, r25
    155e:	0a 2b       	or	r16, r26
    1560:	1b 2b       	or	r17, r27
    1562:	76 95       	lsr	r23
    1564:	67 95       	ror	r22
    1566:	57 95       	ror	r21
    1568:	47 95       	ror	r20
    156a:	2f 5f       	subi	r18, 0xFF	; 255
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	77 fd       	sbrc	r23, 7
    1570:	e7 cf       	rjmp	.-50     	; 0x1540 <__mulsf3+0x140>
    1572:	0c c0       	rjmp	.+24     	; 0x158c <__mulsf3+0x18c>
    1574:	44 0f       	add	r20, r20
    1576:	55 1f       	adc	r21, r21
    1578:	66 1f       	adc	r22, r22
    157a:	77 1f       	adc	r23, r23
    157c:	17 fd       	sbrc	r17, 7
    157e:	41 60       	ori	r20, 0x01	; 1
    1580:	ee 0c       	add	r14, r14
    1582:	ff 1c       	adc	r15, r15
    1584:	00 1f       	adc	r16, r16
    1586:	11 1f       	adc	r17, r17
    1588:	21 50       	subi	r18, 0x01	; 1
    158a:	30 40       	sbci	r19, 0x00	; 0
    158c:	40 30       	cpi	r20, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	59 07       	cpc	r21, r25
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	69 07       	cpc	r22, r25
    1596:	90 e4       	ldi	r25, 0x40	; 64
    1598:	79 07       	cpc	r23, r25
    159a:	60 f3       	brcs	.-40     	; 0x1574 <__mulsf3+0x174>
    159c:	2b 8f       	std	Y+27, r18	; 0x1b
    159e:	3c 8f       	std	Y+28, r19	; 0x1c
    15a0:	db 01       	movw	r26, r22
    15a2:	ca 01       	movw	r24, r20
    15a4:	8f 77       	andi	r24, 0x7F	; 127
    15a6:	90 70       	andi	r25, 0x00	; 0
    15a8:	a0 70       	andi	r26, 0x00	; 0
    15aa:	b0 70       	andi	r27, 0x00	; 0
    15ac:	80 34       	cpi	r24, 0x40	; 64
    15ae:	91 05       	cpc	r25, r1
    15b0:	a1 05       	cpc	r26, r1
    15b2:	b1 05       	cpc	r27, r1
    15b4:	61 f4       	brne	.+24     	; 0x15ce <__mulsf3+0x1ce>
    15b6:	47 fd       	sbrc	r20, 7
    15b8:	0a c0       	rjmp	.+20     	; 0x15ce <__mulsf3+0x1ce>
    15ba:	e1 14       	cp	r14, r1
    15bc:	f1 04       	cpc	r15, r1
    15be:	01 05       	cpc	r16, r1
    15c0:	11 05       	cpc	r17, r1
    15c2:	29 f0       	breq	.+10     	; 0x15ce <__mulsf3+0x1ce>
    15c4:	40 5c       	subi	r20, 0xC0	; 192
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
    15c8:	6f 4f       	sbci	r22, 0xFF	; 255
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	40 78       	andi	r20, 0x80	; 128
    15ce:	1a 8e       	std	Y+26, r1	; 0x1a
    15d0:	fe 17       	cp	r31, r30
    15d2:	11 f0       	breq	.+4      	; 0x15d8 <__mulsf3+0x1d8>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	8a 8f       	std	Y+26, r24	; 0x1a
    15d8:	4d 8f       	std	Y+29, r20	; 0x1d
    15da:	5e 8f       	std	Y+30, r21	; 0x1e
    15dc:	6f 8f       	std	Y+31, r22	; 0x1f
    15de:	78 a3       	std	Y+32, r23	; 0x20
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	89 8f       	std	Y+25, r24	; 0x19
    15e4:	ce 01       	movw	r24, r28
    15e6:	49 96       	adiw	r24, 0x19	; 25
    15e8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__pack_f>
    15ec:	a0 96       	adiw	r28, 0x20	; 32
    15ee:	e2 e1       	ldi	r30, 0x12	; 18
    15f0:	0c 94 90 30 	jmp	0x6120	; 0x6120 <__epilogue_restores__>

000015f4 <__gtsf2>:
    15f4:	a8 e1       	ldi	r26, 0x18	; 24
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e0 e0       	ldi	r30, 0x00	; 0
    15fa:	fb e0       	ldi	r31, 0x0B	; 11
    15fc:	0c 94 80 30 	jmp	0x6100	; 0x6100 <__prologue_saves__+0x18>
    1600:	69 83       	std	Y+1, r22	; 0x01
    1602:	7a 83       	std	Y+2, r23	; 0x02
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	2d 83       	std	Y+5, r18	; 0x05
    160a:	3e 83       	std	Y+6, r19	; 0x06
    160c:	4f 83       	std	Y+7, r20	; 0x07
    160e:	58 87       	std	Y+8, r21	; 0x08
    1610:	89 e0       	ldi	r24, 0x09	; 9
    1612:	e8 2e       	mov	r14, r24
    1614:	f1 2c       	mov	r15, r1
    1616:	ec 0e       	add	r14, r28
    1618:	fd 1e       	adc	r15, r29
    161a:	ce 01       	movw	r24, r28
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	b7 01       	movw	r22, r14
    1620:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1624:	8e 01       	movw	r16, r28
    1626:	0f 5e       	subi	r16, 0xEF	; 239
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	ce 01       	movw	r24, r28
    162c:	05 96       	adiw	r24, 0x05	; 5
    162e:	b8 01       	movw	r22, r16
    1630:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	40 f0       	brcs	.+16     	; 0x164a <__gtsf2+0x56>
    163a:	89 89       	ldd	r24, Y+17	; 0x11
    163c:	82 30       	cpi	r24, 0x02	; 2
    163e:	28 f0       	brcs	.+10     	; 0x164a <__gtsf2+0x56>
    1640:	c7 01       	movw	r24, r14
    1642:	b8 01       	movw	r22, r16
    1644:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__fpcmp_parts_f>
    1648:	01 c0       	rjmp	.+2      	; 0x164c <__gtsf2+0x58>
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	68 96       	adiw	r28, 0x18	; 24
    164e:	e6 e0       	ldi	r30, 0x06	; 6
    1650:	0c 94 9c 30 	jmp	0x6138	; 0x6138 <__epilogue_restores__+0x18>

00001654 <__gesf2>:
    1654:	a8 e1       	ldi	r26, 0x18	; 24
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	fb e0       	ldi	r31, 0x0B	; 11
    165c:	0c 94 80 30 	jmp	0x6100	; 0x6100 <__prologue_saves__+0x18>
    1660:	69 83       	std	Y+1, r22	; 0x01
    1662:	7a 83       	std	Y+2, r23	; 0x02
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	2d 83       	std	Y+5, r18	; 0x05
    166a:	3e 83       	std	Y+6, r19	; 0x06
    166c:	4f 83       	std	Y+7, r20	; 0x07
    166e:	58 87       	std	Y+8, r21	; 0x08
    1670:	89 e0       	ldi	r24, 0x09	; 9
    1672:	e8 2e       	mov	r14, r24
    1674:	f1 2c       	mov	r15, r1
    1676:	ec 0e       	add	r14, r28
    1678:	fd 1e       	adc	r15, r29
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	b7 01       	movw	r22, r14
    1680:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1684:	8e 01       	movw	r16, r28
    1686:	0f 5e       	subi	r16, 0xEF	; 239
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	ce 01       	movw	r24, r28
    168c:	05 96       	adiw	r24, 0x05	; 5
    168e:	b8 01       	movw	r22, r16
    1690:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	40 f0       	brcs	.+16     	; 0x16aa <__gesf2+0x56>
    169a:	89 89       	ldd	r24, Y+17	; 0x11
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	28 f0       	brcs	.+10     	; 0x16aa <__gesf2+0x56>
    16a0:	c7 01       	movw	r24, r14
    16a2:	b8 01       	movw	r22, r16
    16a4:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__fpcmp_parts_f>
    16a8:	01 c0       	rjmp	.+2      	; 0x16ac <__gesf2+0x58>
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	68 96       	adiw	r28, 0x18	; 24
    16ae:	e6 e0       	ldi	r30, 0x06	; 6
    16b0:	0c 94 9c 30 	jmp	0x6138	; 0x6138 <__epilogue_restores__+0x18>

000016b4 <__ltsf2>:
    16b4:	a8 e1       	ldi	r26, 0x18	; 24
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e0 e6       	ldi	r30, 0x60	; 96
    16ba:	fb e0       	ldi	r31, 0x0B	; 11
    16bc:	0c 94 80 30 	jmp	0x6100	; 0x6100 <__prologue_saves__+0x18>
    16c0:	69 83       	std	Y+1, r22	; 0x01
    16c2:	7a 83       	std	Y+2, r23	; 0x02
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	2d 83       	std	Y+5, r18	; 0x05
    16ca:	3e 83       	std	Y+6, r19	; 0x06
    16cc:	4f 83       	std	Y+7, r20	; 0x07
    16ce:	58 87       	std	Y+8, r21	; 0x08
    16d0:	89 e0       	ldi	r24, 0x09	; 9
    16d2:	e8 2e       	mov	r14, r24
    16d4:	f1 2c       	mov	r15, r1
    16d6:	ec 0e       	add	r14, r28
    16d8:	fd 1e       	adc	r15, r29
    16da:	ce 01       	movw	r24, r28
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	b7 01       	movw	r22, r14
    16e0:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    16e4:	8e 01       	movw	r16, r28
    16e6:	0f 5e       	subi	r16, 0xEF	; 239
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	ce 01       	movw	r24, r28
    16ec:	05 96       	adiw	r24, 0x05	; 5
    16ee:	b8 01       	movw	r22, r16
    16f0:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	40 f0       	brcs	.+16     	; 0x170a <__ltsf2+0x56>
    16fa:	89 89       	ldd	r24, Y+17	; 0x11
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	28 f0       	brcs	.+10     	; 0x170a <__ltsf2+0x56>
    1700:	c7 01       	movw	r24, r14
    1702:	b8 01       	movw	r22, r16
    1704:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__fpcmp_parts_f>
    1708:	01 c0       	rjmp	.+2      	; 0x170c <__ltsf2+0x58>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	68 96       	adiw	r28, 0x18	; 24
    170e:	e6 e0       	ldi	r30, 0x06	; 6
    1710:	0c 94 9c 30 	jmp	0x6138	; 0x6138 <__epilogue_restores__+0x18>

00001714 <__fixsfsi>:
    1714:	ac e0       	ldi	r26, 0x0C	; 12
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e0 e9       	ldi	r30, 0x90	; 144
    171a:	fb e0       	ldi	r31, 0x0B	; 11
    171c:	0c 94 84 30 	jmp	0x6108	; 0x6108 <__prologue_saves__+0x20>
    1720:	69 83       	std	Y+1, r22	; 0x01
    1722:	7a 83       	std	Y+2, r23	; 0x02
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	ce 01       	movw	r24, r28
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	be 01       	movw	r22, r28
    172e:	6b 5f       	subi	r22, 0xFB	; 251
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__unpack_f>
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	61 f1       	breq	.+88     	; 0x1794 <__fixsfsi+0x80>
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	50 f1       	brcs	.+84     	; 0x1794 <__fixsfsi+0x80>
    1740:	84 30       	cpi	r24, 0x04	; 4
    1742:	21 f4       	brne	.+8      	; 0x174c <__fixsfsi+0x38>
    1744:	8e 81       	ldd	r24, Y+6	; 0x06
    1746:	88 23       	and	r24, r24
    1748:	51 f1       	breq	.+84     	; 0x179e <__fixsfsi+0x8a>
    174a:	2e c0       	rjmp	.+92     	; 0x17a8 <__fixsfsi+0x94>
    174c:	2f 81       	ldd	r18, Y+7	; 0x07
    174e:	38 85       	ldd	r19, Y+8	; 0x08
    1750:	37 fd       	sbrc	r19, 7
    1752:	20 c0       	rjmp	.+64     	; 0x1794 <__fixsfsi+0x80>
    1754:	6e 81       	ldd	r22, Y+6	; 0x06
    1756:	2f 31       	cpi	r18, 0x1F	; 31
    1758:	31 05       	cpc	r19, r1
    175a:	1c f0       	brlt	.+6      	; 0x1762 <__fixsfsi+0x4e>
    175c:	66 23       	and	r22, r22
    175e:	f9 f0       	breq	.+62     	; 0x179e <__fixsfsi+0x8a>
    1760:	23 c0       	rjmp	.+70     	; 0x17a8 <__fixsfsi+0x94>
    1762:	8e e1       	ldi	r24, 0x1E	; 30
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	82 1b       	sub	r24, r18
    1768:	93 0b       	sbc	r25, r19
    176a:	29 85       	ldd	r18, Y+9	; 0x09
    176c:	3a 85       	ldd	r19, Y+10	; 0x0a
    176e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1770:	5c 85       	ldd	r21, Y+12	; 0x0c
    1772:	04 c0       	rjmp	.+8      	; 0x177c <__fixsfsi+0x68>
    1774:	56 95       	lsr	r21
    1776:	47 95       	ror	r20
    1778:	37 95       	ror	r19
    177a:	27 95       	ror	r18
    177c:	8a 95       	dec	r24
    177e:	d2 f7       	brpl	.-12     	; 0x1774 <__fixsfsi+0x60>
    1780:	66 23       	and	r22, r22
    1782:	b1 f0       	breq	.+44     	; 0x17b0 <__fixsfsi+0x9c>
    1784:	50 95       	com	r21
    1786:	40 95       	com	r20
    1788:	30 95       	com	r19
    178a:	21 95       	neg	r18
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	4f 4f       	sbci	r20, 0xFF	; 255
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <__fixsfsi+0x9c>
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <__fixsfsi+0x9c>
    179e:	2f ef       	ldi	r18, 0xFF	; 255
    17a0:	3f ef       	ldi	r19, 0xFF	; 255
    17a2:	4f ef       	ldi	r20, 0xFF	; 255
    17a4:	5f e7       	ldi	r21, 0x7F	; 127
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <__fixsfsi+0x9c>
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e8       	ldi	r21, 0x80	; 128
    17b0:	b9 01       	movw	r22, r18
    17b2:	ca 01       	movw	r24, r20
    17b4:	2c 96       	adiw	r28, 0x0c	; 12
    17b6:	e2 e0       	ldi	r30, 0x02	; 2
    17b8:	0c 94 a0 30 	jmp	0x6140	; 0x6140 <__epilogue_restores__+0x20>

000017bc <__pack_f>:
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	fc 01       	movw	r30, r24
    17c8:	e4 80       	ldd	r14, Z+4	; 0x04
    17ca:	f5 80       	ldd	r15, Z+5	; 0x05
    17cc:	06 81       	ldd	r16, Z+6	; 0x06
    17ce:	17 81       	ldd	r17, Z+7	; 0x07
    17d0:	d1 80       	ldd	r13, Z+1	; 0x01
    17d2:	80 81       	ld	r24, Z
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	48 f4       	brcc	.+18     	; 0x17ea <__pack_f+0x2e>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e1       	ldi	r26, 0x10	; 16
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e8 2a       	or	r14, r24
    17e2:	f9 2a       	or	r15, r25
    17e4:	0a 2b       	or	r16, r26
    17e6:	1b 2b       	or	r17, r27
    17e8:	a5 c0       	rjmp	.+330    	; 0x1934 <__pack_f+0x178>
    17ea:	84 30       	cpi	r24, 0x04	; 4
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <__pack_f+0x34>
    17ee:	9f c0       	rjmp	.+318    	; 0x192e <__pack_f+0x172>
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	21 f4       	brne	.+8      	; 0x17fc <__pack_f+0x40>
    17f4:	ee 24       	eor	r14, r14
    17f6:	ff 24       	eor	r15, r15
    17f8:	87 01       	movw	r16, r14
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <__pack_f+0x4a>
    17fc:	e1 14       	cp	r14, r1
    17fe:	f1 04       	cpc	r15, r1
    1800:	01 05       	cpc	r16, r1
    1802:	11 05       	cpc	r17, r1
    1804:	19 f4       	brne	.+6      	; 0x180c <__pack_f+0x50>
    1806:	e0 e0       	ldi	r30, 0x00	; 0
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	96 c0       	rjmp	.+300    	; 0x1938 <__pack_f+0x17c>
    180c:	62 81       	ldd	r22, Z+2	; 0x02
    180e:	73 81       	ldd	r23, Z+3	; 0x03
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	62 38       	cpi	r22, 0x82	; 130
    1814:	79 07       	cpc	r23, r25
    1816:	0c f0       	brlt	.+2      	; 0x181a <__pack_f+0x5e>
    1818:	5b c0       	rjmp	.+182    	; 0x18d0 <__pack_f+0x114>
    181a:	22 e8       	ldi	r18, 0x82	; 130
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	26 1b       	sub	r18, r22
    1820:	37 0b       	sbc	r19, r23
    1822:	2a 31       	cpi	r18, 0x1A	; 26
    1824:	31 05       	cpc	r19, r1
    1826:	2c f0       	brlt	.+10     	; 0x1832 <__pack_f+0x76>
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	2a c0       	rjmp	.+84     	; 0x1886 <__pack_f+0xca>
    1832:	b8 01       	movw	r22, r16
    1834:	a7 01       	movw	r20, r14
    1836:	02 2e       	mov	r0, r18
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <__pack_f+0x86>
    183a:	76 95       	lsr	r23
    183c:	67 95       	ror	r22
    183e:	57 95       	ror	r21
    1840:	47 95       	ror	r20
    1842:	0a 94       	dec	r0
    1844:	d2 f7       	brpl	.-12     	; 0x183a <__pack_f+0x7e>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <__pack_f+0x9c>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	aa 1f       	adc	r26, r26
    1856:	bb 1f       	adc	r27, r27
    1858:	2a 95       	dec	r18
    185a:	d2 f7       	brpl	.-12     	; 0x1850 <__pack_f+0x94>
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	a1 09       	sbc	r26, r1
    1860:	b1 09       	sbc	r27, r1
    1862:	8e 21       	and	r24, r14
    1864:	9f 21       	and	r25, r15
    1866:	a0 23       	and	r26, r16
    1868:	b1 23       	and	r27, r17
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	a1 05       	cpc	r26, r1
    186e:	b1 05       	cpc	r27, r1
    1870:	21 f0       	breq	.+8      	; 0x187a <__pack_f+0xbe>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e0       	ldi	r26, 0x00	; 0
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	9a 01       	movw	r18, r20
    187c:	ab 01       	movw	r20, r22
    187e:	28 2b       	or	r18, r24
    1880:	39 2b       	or	r19, r25
    1882:	4a 2b       	or	r20, r26
    1884:	5b 2b       	or	r21, r27
    1886:	da 01       	movw	r26, r20
    1888:	c9 01       	movw	r24, r18
    188a:	8f 77       	andi	r24, 0x7F	; 127
    188c:	90 70       	andi	r25, 0x00	; 0
    188e:	a0 70       	andi	r26, 0x00	; 0
    1890:	b0 70       	andi	r27, 0x00	; 0
    1892:	80 34       	cpi	r24, 0x40	; 64
    1894:	91 05       	cpc	r25, r1
    1896:	a1 05       	cpc	r26, r1
    1898:	b1 05       	cpc	r27, r1
    189a:	39 f4       	brne	.+14     	; 0x18aa <__pack_f+0xee>
    189c:	27 ff       	sbrs	r18, 7
    189e:	09 c0       	rjmp	.+18     	; 0x18b2 <__pack_f+0xf6>
    18a0:	20 5c       	subi	r18, 0xC0	; 192
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	4f 4f       	sbci	r20, 0xFF	; 255
    18a6:	5f 4f       	sbci	r21, 0xFF	; 255
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <__pack_f+0xf6>
    18aa:	21 5c       	subi	r18, 0xC1	; 193
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	4f 4f       	sbci	r20, 0xFF	; 255
    18b0:	5f 4f       	sbci	r21, 0xFF	; 255
    18b2:	e0 e0       	ldi	r30, 0x00	; 0
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	20 30       	cpi	r18, 0x00	; 0
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	3a 07       	cpc	r19, r26
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	4a 07       	cpc	r20, r26
    18c0:	a0 e4       	ldi	r26, 0x40	; 64
    18c2:	5a 07       	cpc	r21, r26
    18c4:	10 f0       	brcs	.+4      	; 0x18ca <__pack_f+0x10e>
    18c6:	e1 e0       	ldi	r30, 0x01	; 1
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	79 01       	movw	r14, r18
    18cc:	8a 01       	movw	r16, r20
    18ce:	27 c0       	rjmp	.+78     	; 0x191e <__pack_f+0x162>
    18d0:	60 38       	cpi	r22, 0x80	; 128
    18d2:	71 05       	cpc	r23, r1
    18d4:	64 f5       	brge	.+88     	; 0x192e <__pack_f+0x172>
    18d6:	fb 01       	movw	r30, r22
    18d8:	e1 58       	subi	r30, 0x81	; 129
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	d8 01       	movw	r26, r16
    18de:	c7 01       	movw	r24, r14
    18e0:	8f 77       	andi	r24, 0x7F	; 127
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	a0 70       	andi	r26, 0x00	; 0
    18e6:	b0 70       	andi	r27, 0x00	; 0
    18e8:	80 34       	cpi	r24, 0x40	; 64
    18ea:	91 05       	cpc	r25, r1
    18ec:	a1 05       	cpc	r26, r1
    18ee:	b1 05       	cpc	r27, r1
    18f0:	39 f4       	brne	.+14     	; 0x1900 <__pack_f+0x144>
    18f2:	e7 fe       	sbrs	r14, 7
    18f4:	0d c0       	rjmp	.+26     	; 0x1910 <__pack_f+0x154>
    18f6:	80 e4       	ldi	r24, 0x40	; 64
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <__pack_f+0x14c>
    1900:	8f e3       	ldi	r24, 0x3F	; 63
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e0       	ldi	r26, 0x00	; 0
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e8 0e       	add	r14, r24
    190a:	f9 1e       	adc	r15, r25
    190c:	0a 1f       	adc	r16, r26
    190e:	1b 1f       	adc	r17, r27
    1910:	17 ff       	sbrs	r17, 7
    1912:	05 c0       	rjmp	.+10     	; 0x191e <__pack_f+0x162>
    1914:	16 95       	lsr	r17
    1916:	07 95       	ror	r16
    1918:	f7 94       	ror	r15
    191a:	e7 94       	ror	r14
    191c:	31 96       	adiw	r30, 0x01	; 1
    191e:	87 e0       	ldi	r24, 0x07	; 7
    1920:	16 95       	lsr	r17
    1922:	07 95       	ror	r16
    1924:	f7 94       	ror	r15
    1926:	e7 94       	ror	r14
    1928:	8a 95       	dec	r24
    192a:	d1 f7       	brne	.-12     	; 0x1920 <__pack_f+0x164>
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <__pack_f+0x17c>
    192e:	ee 24       	eor	r14, r14
    1930:	ff 24       	eor	r15, r15
    1932:	87 01       	movw	r16, r14
    1934:	ef ef       	ldi	r30, 0xFF	; 255
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	6e 2f       	mov	r22, r30
    193a:	67 95       	ror	r22
    193c:	66 27       	eor	r22, r22
    193e:	67 95       	ror	r22
    1940:	90 2f       	mov	r25, r16
    1942:	9f 77       	andi	r25, 0x7F	; 127
    1944:	d7 94       	ror	r13
    1946:	dd 24       	eor	r13, r13
    1948:	d7 94       	ror	r13
    194a:	8e 2f       	mov	r24, r30
    194c:	86 95       	lsr	r24
    194e:	49 2f       	mov	r20, r25
    1950:	46 2b       	or	r20, r22
    1952:	58 2f       	mov	r21, r24
    1954:	5d 29       	or	r21, r13
    1956:	b7 01       	movw	r22, r14
    1958:	ca 01       	movw	r24, r20
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	08 95       	ret

00001966 <__unpack_f>:
    1966:	fc 01       	movw	r30, r24
    1968:	db 01       	movw	r26, r22
    196a:	40 81       	ld	r20, Z
    196c:	51 81       	ldd	r21, Z+1	; 0x01
    196e:	22 81       	ldd	r18, Z+2	; 0x02
    1970:	62 2f       	mov	r22, r18
    1972:	6f 77       	andi	r22, 0x7F	; 127
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	22 1f       	adc	r18, r18
    1978:	22 27       	eor	r18, r18
    197a:	22 1f       	adc	r18, r18
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	89 2f       	mov	r24, r25
    1980:	88 0f       	add	r24, r24
    1982:	82 2b       	or	r24, r18
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	99 1f       	adc	r25, r25
    198a:	99 27       	eor	r25, r25
    198c:	99 1f       	adc	r25, r25
    198e:	11 96       	adiw	r26, 0x01	; 1
    1990:	9c 93       	st	X, r25
    1992:	11 97       	sbiw	r26, 0x01	; 1
    1994:	21 15       	cp	r18, r1
    1996:	31 05       	cpc	r19, r1
    1998:	a9 f5       	brne	.+106    	; 0x1a04 <__unpack_f+0x9e>
    199a:	41 15       	cp	r20, r1
    199c:	51 05       	cpc	r21, r1
    199e:	61 05       	cpc	r22, r1
    19a0:	71 05       	cpc	r23, r1
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <__unpack_f+0x42>
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	37 c0       	rjmp	.+110    	; 0x1a16 <__unpack_f+0xb0>
    19a8:	82 e8       	ldi	r24, 0x82	; 130
    19aa:	9f ef       	ldi	r25, 0xFF	; 255
    19ac:	13 96       	adiw	r26, 0x03	; 3
    19ae:	9c 93       	st	X, r25
    19b0:	8e 93       	st	-X, r24
    19b2:	12 97       	sbiw	r26, 0x02	; 2
    19b4:	9a 01       	movw	r18, r20
    19b6:	ab 01       	movw	r20, r22
    19b8:	67 e0       	ldi	r22, 0x07	; 7
    19ba:	22 0f       	add	r18, r18
    19bc:	33 1f       	adc	r19, r19
    19be:	44 1f       	adc	r20, r20
    19c0:	55 1f       	adc	r21, r21
    19c2:	6a 95       	dec	r22
    19c4:	d1 f7       	brne	.-12     	; 0x19ba <__unpack_f+0x54>
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	8c 93       	st	X, r24
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <__unpack_f+0x80>
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	44 1f       	adc	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	12 96       	adiw	r26, 0x02	; 2
    19d6:	8d 91       	ld	r24, X+
    19d8:	9c 91       	ld	r25, X
    19da:	13 97       	sbiw	r26, 0x03	; 3
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	13 96       	adiw	r26, 0x03	; 3
    19e0:	9c 93       	st	X, r25
    19e2:	8e 93       	st	-X, r24
    19e4:	12 97       	sbiw	r26, 0x02	; 2
    19e6:	20 30       	cpi	r18, 0x00	; 0
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	38 07       	cpc	r19, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	48 07       	cpc	r20, r24
    19f0:	80 e4       	ldi	r24, 0x40	; 64
    19f2:	58 07       	cpc	r21, r24
    19f4:	58 f3       	brcs	.-42     	; 0x19cc <__unpack_f+0x66>
    19f6:	14 96       	adiw	r26, 0x04	; 4
    19f8:	2d 93       	st	X+, r18
    19fa:	3d 93       	st	X+, r19
    19fc:	4d 93       	st	X+, r20
    19fe:	5c 93       	st	X, r21
    1a00:	17 97       	sbiw	r26, 0x07	; 7
    1a02:	08 95       	ret
    1a04:	2f 3f       	cpi	r18, 0xFF	; 255
    1a06:	31 05       	cpc	r19, r1
    1a08:	79 f4       	brne	.+30     	; 0x1a28 <__unpack_f+0xc2>
    1a0a:	41 15       	cp	r20, r1
    1a0c:	51 05       	cpc	r21, r1
    1a0e:	61 05       	cpc	r22, r1
    1a10:	71 05       	cpc	r23, r1
    1a12:	19 f4       	brne	.+6      	; 0x1a1a <__unpack_f+0xb4>
    1a14:	84 e0       	ldi	r24, 0x04	; 4
    1a16:	8c 93       	st	X, r24
    1a18:	08 95       	ret
    1a1a:	64 ff       	sbrs	r22, 4
    1a1c:	03 c0       	rjmp	.+6      	; 0x1a24 <__unpack_f+0xbe>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	8c 93       	st	X, r24
    1a22:	12 c0       	rjmp	.+36     	; 0x1a48 <__unpack_f+0xe2>
    1a24:	1c 92       	st	X, r1
    1a26:	10 c0       	rjmp	.+32     	; 0x1a48 <__unpack_f+0xe2>
    1a28:	2f 57       	subi	r18, 0x7F	; 127
    1a2a:	30 40       	sbci	r19, 0x00	; 0
    1a2c:	13 96       	adiw	r26, 0x03	; 3
    1a2e:	3c 93       	st	X, r19
    1a30:	2e 93       	st	-X, r18
    1a32:	12 97       	sbiw	r26, 0x02	; 2
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	8c 93       	st	X, r24
    1a38:	87 e0       	ldi	r24, 0x07	; 7
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	66 1f       	adc	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	8a 95       	dec	r24
    1a44:	d1 f7       	brne	.-12     	; 0x1a3a <__unpack_f+0xd4>
    1a46:	70 64       	ori	r23, 0x40	; 64
    1a48:	14 96       	adiw	r26, 0x04	; 4
    1a4a:	4d 93       	st	X+, r20
    1a4c:	5d 93       	st	X+, r21
    1a4e:	6d 93       	st	X+, r22
    1a50:	7c 93       	st	X, r23
    1a52:	17 97       	sbiw	r26, 0x07	; 7
    1a54:	08 95       	ret

00001a56 <__fpcmp_parts_f>:
    1a56:	1f 93       	push	r17
    1a58:	dc 01       	movw	r26, r24
    1a5a:	fb 01       	movw	r30, r22
    1a5c:	9c 91       	ld	r25, X
    1a5e:	92 30       	cpi	r25, 0x02	; 2
    1a60:	08 f4       	brcc	.+2      	; 0x1a64 <__fpcmp_parts_f+0xe>
    1a62:	47 c0       	rjmp	.+142    	; 0x1af2 <__fpcmp_parts_f+0x9c>
    1a64:	80 81       	ld	r24, Z
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <__fpcmp_parts_f+0x16>
    1a6a:	43 c0       	rjmp	.+134    	; 0x1af2 <__fpcmp_parts_f+0x9c>
    1a6c:	94 30       	cpi	r25, 0x04	; 4
    1a6e:	51 f4       	brne	.+20     	; 0x1a84 <__fpcmp_parts_f+0x2e>
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	1c 91       	ld	r17, X
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	99 f5       	brne	.+102    	; 0x1ade <__fpcmp_parts_f+0x88>
    1a78:	81 81       	ldd	r24, Z+1	; 0x01
    1a7a:	68 2f       	mov	r22, r24
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	61 1b       	sub	r22, r17
    1a80:	71 09       	sbc	r23, r1
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <__fpcmp_parts_f+0xac>
    1a84:	84 30       	cpi	r24, 0x04	; 4
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <__fpcmp_parts_f+0x3a>
    1a88:	92 30       	cpi	r25, 0x02	; 2
    1a8a:	31 f4       	brne	.+12     	; 0x1a98 <__fpcmp_parts_f+0x42>
    1a8c:	82 30       	cpi	r24, 0x02	; 2
    1a8e:	b9 f1       	breq	.+110    	; 0x1afe <__fpcmp_parts_f+0xa8>
    1a90:	81 81       	ldd	r24, Z+1	; 0x01
    1a92:	88 23       	and	r24, r24
    1a94:	89 f1       	breq	.+98     	; 0x1af8 <__fpcmp_parts_f+0xa2>
    1a96:	2d c0       	rjmp	.+90     	; 0x1af2 <__fpcmp_parts_f+0x9c>
    1a98:	11 96       	adiw	r26, 0x01	; 1
    1a9a:	1c 91       	ld	r17, X
    1a9c:	11 97       	sbiw	r26, 0x01	; 1
    1a9e:	82 30       	cpi	r24, 0x02	; 2
    1aa0:	f1 f0       	breq	.+60     	; 0x1ade <__fpcmp_parts_f+0x88>
    1aa2:	81 81       	ldd	r24, Z+1	; 0x01
    1aa4:	18 17       	cp	r17, r24
    1aa6:	d9 f4       	brne	.+54     	; 0x1ade <__fpcmp_parts_f+0x88>
    1aa8:	12 96       	adiw	r26, 0x02	; 2
    1aaa:	2d 91       	ld	r18, X+
    1aac:	3c 91       	ld	r19, X
    1aae:	13 97       	sbiw	r26, 0x03	; 3
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	82 17       	cp	r24, r18
    1ab6:	93 07       	cpc	r25, r19
    1ab8:	94 f0       	brlt	.+36     	; 0x1ade <__fpcmp_parts_f+0x88>
    1aba:	28 17       	cp	r18, r24
    1abc:	39 07       	cpc	r19, r25
    1abe:	bc f0       	brlt	.+46     	; 0x1aee <__fpcmp_parts_f+0x98>
    1ac0:	14 96       	adiw	r26, 0x04	; 4
    1ac2:	8d 91       	ld	r24, X+
    1ac4:	9d 91       	ld	r25, X+
    1ac6:	0d 90       	ld	r0, X+
    1ac8:	bc 91       	ld	r27, X
    1aca:	a0 2d       	mov	r26, r0
    1acc:	24 81       	ldd	r18, Z+4	; 0x04
    1ace:	35 81       	ldd	r19, Z+5	; 0x05
    1ad0:	46 81       	ldd	r20, Z+6	; 0x06
    1ad2:	57 81       	ldd	r21, Z+7	; 0x07
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	4a 07       	cpc	r20, r26
    1ada:	5b 07       	cpc	r21, r27
    1adc:	18 f4       	brcc	.+6      	; 0x1ae4 <__fpcmp_parts_f+0x8e>
    1ade:	11 23       	and	r17, r17
    1ae0:	41 f0       	breq	.+16     	; 0x1af2 <__fpcmp_parts_f+0x9c>
    1ae2:	0a c0       	rjmp	.+20     	; 0x1af8 <__fpcmp_parts_f+0xa2>
    1ae4:	82 17       	cp	r24, r18
    1ae6:	93 07       	cpc	r25, r19
    1ae8:	a4 07       	cpc	r26, r20
    1aea:	b5 07       	cpc	r27, r21
    1aec:	40 f4       	brcc	.+16     	; 0x1afe <__fpcmp_parts_f+0xa8>
    1aee:	11 23       	and	r17, r17
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <__fpcmp_parts_f+0xa2>
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <__fpcmp_parts_f+0xac>
    1af8:	6f ef       	ldi	r22, 0xFF	; 255
    1afa:	7f ef       	ldi	r23, 0xFF	; 255
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <__fpcmp_parts_f+0xac>
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	cb 01       	movw	r24, r22
    1b04:	1f 91       	pop	r17
    1b06:	08 95       	ret

00001b08 <Enable_GlobalInterrupt>:
/* brief!  function that enable the global interrupt                                   */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Enable_GlobalInterrupt(void)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Enable global interrupt
	*/
	SET_BIT(SREG, GI);
    1b10:	af e5       	ldi	r26, 0x5F	; 95
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ef e5       	ldi	r30, 0x5F	; 95
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 68       	ori	r24, 0x80	; 128
    1b1c:	8c 93       	st	X, r24
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <Disable_GlobalInterrupt>:
/* brief!  function that disable the global interrupt                                  */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Disable_GlobalInterrupt(void)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Disable global interrupt
	*/
	CLEAR_BIT(SREG, GI);
    1b2c:	af e5       	ldi	r26, 0x5F	; 95
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ef e5       	ldi	r30, 0x5F	; 95
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8f 77       	andi	r24, 0x7F	; 127
    1b38:	8c 93       	st	X, r24
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <DIO_INIT_Pin>:
/* Description! Interface to Set the direction of PIN                                  */
/* Input      ! Pin number, Desired Direction                            			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_INIT_Pin(uint8_t au8_PinNumberCpy, uint8_t au8_DirectionCpy)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <DIO_INIT_Pin+0x6>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <DIO_INIT_Pin+0x8>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <DIO_INIT_Pin+0xa>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Error = ERROR_NOK;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7)&&(au8_DirectionCpy >= INPUT_PIN)&&(au8_DirectionCpy <= OUTPUT_PIN) )
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	80 32       	cpi	r24, 0x20	; 32
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <DIO_INIT_Pin+0x1e>
    1b5c:	d6 c0       	rjmp	.+428    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <DIO_INIT_Pin+0x26>
    1b64:	d2 c0       	rjmp	.+420    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
	{
		Error = ERROR_OK;
    1b66:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	86 95       	lsr	r24
    1b6c:	86 95       	lsr	r24
    1b6e:	86 95       	lsr	r24
    1b70:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	87 70       	andi	r24, 0x07	; 7
    1b76:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3e 83       	std	Y+6, r19	; 0x06
    1b80:	2d 83       	std	Y+5, r18	; 0x05
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <DIO_INIT_Pin+0x4e>
    1b8c:	41 c0       	rjmp	.+130    	; 0x1c10 <DIO_INIT_Pin+0xd0>
    1b8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b90:	3e 81       	ldd	r19, Y+6	; 0x06
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <DIO_INIT_Pin+0x62>
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <DIO_INIT_Pin+0x7c>
    1ba0:	b4 c0       	rjmp	.+360    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
    1ba2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <DIO_INIT_Pin+0x6e>
    1bac:	5b c0       	rjmp	.+182    	; 0x1c64 <DIO_INIT_Pin+0x124>
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <DIO_INIT_Pin+0x7a>
    1bb8:	7f c0       	rjmp	.+254    	; 0x1cb8 <DIO_INIT_Pin+0x178>
    1bba:	a7 c0       	rjmp	.+334    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
		{
			case DIO_PORTA:
				if(au8_DirectionCpy==OUTPUT_PIN)
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	99 f4       	brne	.+38     	; 0x1be8 <DIO_INIT_Pin+0xa8>
				{
					SET_BIT(DDRA,au8_PinNumberCpy);
    1bc2:	aa e3       	ldi	r26, 0x3A	; 58
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ea e3       	ldi	r30, 0x3A	; 58
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	40 81       	ld	r20, Z
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_INIT_Pin+0x9e>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_INIT_Pin+0x9a>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	91 c0       	rjmp	.+290    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRA,au8_PinNumberCpy);
    1be8:	aa e3       	ldi	r26, 0x3A	; 58
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ea e3       	ldi	r30, 0x3A	; 58
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	40 81       	ld	r20, Z
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_INIT_Pin+0xc4>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_INIT_Pin+0xc0>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	7d c0       	rjmp	.+250    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTB:
				if(au8_DirectionCpy==OUTPUT_PIN)
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	99 f4       	brne	.+38     	; 0x1c3c <DIO_INIT_Pin+0xfc>
				{
					SET_BIT(DDRB,au8_PinNumberCpy);
    1c16:	a7 e3       	ldi	r26, 0x37	; 55
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e7 e3       	ldi	r30, 0x37	; 55
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	40 81       	ld	r20, Z
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_INIT_Pin+0xf2>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_INIT_Pin+0xee>
    1c36:	84 2b       	or	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	67 c0       	rjmp	.+206    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRB,au8_PinNumberCpy);
    1c3c:	a7 e3       	ldi	r26, 0x37	; 55
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e7 e3       	ldi	r30, 0x37	; 55
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	40 81       	ld	r20, Z
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <DIO_INIT_Pin+0x118>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <DIO_INIT_Pin+0x114>
    1c5c:	80 95       	com	r24
    1c5e:	84 23       	and	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	53 c0       	rjmp	.+166    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTC:
				if(au8_DirectionCpy==OUTPUT_PIN)
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	99 f4       	brne	.+38     	; 0x1c90 <DIO_INIT_Pin+0x150>
				{
					SET_BIT(DDRC,au8_PinNumberCpy);
    1c6a:	a4 e3       	ldi	r26, 0x34	; 52
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e4 e3       	ldi	r30, 0x34	; 52
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	40 81       	ld	r20, Z
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_INIT_Pin+0x146>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_INIT_Pin+0x142>
    1c8a:	84 2b       	or	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	3d c0       	rjmp	.+122    	; 0x1d0a <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRC,au8_PinNumberCpy);
    1c90:	a4 e3       	ldi	r26, 0x34	; 52
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e4 e3       	ldi	r30, 0x34	; 52
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	40 81       	ld	r20, Z
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_INIT_Pin+0x16c>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_INIT_Pin+0x168>
    1cb0:	80 95       	com	r24
    1cb2:	84 23       	and	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	29 c0       	rjmp	.+82     	; 0x1d0a <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTD:
				if(au8_DirectionCpy==OUTPUT_PIN)
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	99 f4       	brne	.+38     	; 0x1ce4 <DIO_INIT_Pin+0x1a4>
				{
					SET_BIT(DDRD,au8_PinNumberCpy);
    1cbe:	a1 e3       	ldi	r26, 0x31	; 49
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e1 e3       	ldi	r30, 0x31	; 49
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	40 81       	ld	r20, Z
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_INIT_Pin+0x19a>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_INIT_Pin+0x196>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	13 c0       	rjmp	.+38     	; 0x1d0a <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRD,au8_PinNumberCpy);
    1ce4:	a1 e3       	ldi	r26, 0x31	; 49
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e1 e3       	ldi	r30, 0x31	; 49
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	40 81       	ld	r20, Z
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_INIT_Pin+0x1c0>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_INIT_Pin+0x1bc>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
				}
			break;
		}
	}
	return Error;
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d0c:	26 96       	adiw	r28, 0x06	; 6
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <DIO_INIT_Port>:
/* Description! Interface to set port direction                                        */
/* Input      ! Port number , Desired Direction                                        */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_INIT_Port(uint8_t au8_PortNumberCpy,uint8_t au8_ValueCpy)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <DIO_INIT_Port+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <DIO_INIT_Port+0x8>
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA)&&(au8_PortNumberCpy <= DIO_PORTD)&&(au8_ValueCpy >= INPUT_PORT)&&(au8_ValueCpy <= OUTPUT_PORT) )
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	98 f5       	brcc	.+102    	; 0x1da0 <DIO_INIT_Port+0x82>
	{
		Error = ERROR_OK;
    1d3a:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3d 83       	std	Y+5, r19	; 0x05
    1d44:	2c 83       	std	Y+4, r18	; 0x04
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	d1 f0       	breq	.+52     	; 0x1d84 <DIO_INIT_Port+0x66>
    1d50:	2c 81       	ldd	r18, Y+4	; 0x04
    1d52:	3d 81       	ldd	r19, Y+5	; 0x05
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	31 05       	cpc	r19, r1
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <DIO_INIT_Port+0x46>
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <DIO_INIT_Port+0x5c>
    1d62:	1e c0       	rjmp	.+60     	; 0x1da0 <DIO_INIT_Port+0x82>
    1d64:	2c 81       	ldd	r18, Y+4	; 0x04
    1d66:	3d 81       	ldd	r19, Y+5	; 0x05
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	81 f0       	breq	.+32     	; 0x1d8e <DIO_INIT_Port+0x70>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	91 05       	cpc	r25, r1
    1d76:	81 f0       	breq	.+32     	; 0x1d98 <DIO_INIT_Port+0x7a>
    1d78:	13 c0       	rjmp	.+38     	; 0x1da0 <DIO_INIT_Port+0x82>
		{
			case DIO_PORTA:

				DDRA = au8_ValueCpy;
    1d7a:	ea e3       	ldi	r30, 0x3A	; 58
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	80 83       	st	Z, r24
    1d82:	0e c0       	rjmp	.+28     	; 0x1da0 <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTB:

				DDRB = au8_ValueCpy;
    1d84:	e7 e3       	ldi	r30, 0x37	; 55
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	80 83       	st	Z, r24
    1d8c:	09 c0       	rjmp	.+18     	; 0x1da0 <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTC:

				DDRC = au8_ValueCpy;
    1d8e:	e4 e3       	ldi	r30, 0x34	; 52
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	80 83       	st	Z, r24
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTD:

				DDRD = au8_ValueCpy;
    1d98:	e1 e3       	ldi	r30, 0x31	; 49
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	80 83       	st	Z, r24
			break;
		}
	}
	return Error;
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <DIO_Write_Pin>:
/* Description! Interface to set the Output value of the pin                           */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Write_Pin(uint8_t au8_PinNumberCpy,uint8_t au8_ValueCpy)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <DIO_Write_Pin+0x6>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <DIO_Write_Pin+0x8>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <DIO_Write_Pin+0xa>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
    1dc2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Error = ERROR_NOK;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7)&&(au8_ValueCpy >= LOW_PIN)&&(au8_ValueCpy <= HIGH_PIN) )
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	80 32       	cpi	r24, 0x20	; 32
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <DIO_Write_Pin+0x1e>
    1dce:	d6 c0       	rjmp	.+428    	; 0x1f7c <DIO_Write_Pin+0x1ca>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <DIO_Write_Pin+0x26>
    1dd6:	d2 c0       	rjmp	.+420    	; 0x1f7c <DIO_Write_Pin+0x1ca>
	{
		Error = ERROR_OK;
    1dd8:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	86 95       	lsr	r24
    1dde:	86 95       	lsr	r24
    1de0:	86 95       	lsr	r24
    1de2:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	87 70       	andi	r24, 0x07	; 7
    1de8:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	3e 83       	std	Y+6, r19	; 0x06
    1df2:	2d 83       	std	Y+5, r18	; 0x05
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <DIO_Write_Pin+0x4e>
    1dfe:	41 c0       	rjmp	.+130    	; 0x1e82 <DIO_Write_Pin+0xd0>
    1e00:	2d 81       	ldd	r18, Y+5	; 0x05
    1e02:	3e 81       	ldd	r19, Y+6	; 0x06
    1e04:	22 30       	cpi	r18, 0x02	; 2
    1e06:	31 05       	cpc	r19, r1
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <DIO_Write_Pin+0x62>
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	71 f0       	breq	.+28     	; 0x1e2e <DIO_Write_Pin+0x7c>
    1e12:	b4 c0       	rjmp	.+360    	; 0x1f7c <DIO_Write_Pin+0x1ca>
    1e14:	2d 81       	ldd	r18, Y+5	; 0x05
    1e16:	3e 81       	ldd	r19, Y+6	; 0x06
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <DIO_Write_Pin+0x6e>
    1e1e:	5b c0       	rjmp	.+182    	; 0x1ed6 <DIO_Write_Pin+0x124>
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	83 30       	cpi	r24, 0x03	; 3
    1e26:	91 05       	cpc	r25, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <DIO_Write_Pin+0x7a>
    1e2a:	7f c0       	rjmp	.+254    	; 0x1f2a <DIO_Write_Pin+0x178>
    1e2c:	a7 c0       	rjmp	.+334    	; 0x1f7c <DIO_Write_Pin+0x1ca>
		{
			case DIO_PORTA:
				if(au8_ValueCpy==HIGH_PIN)
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	99 f4       	brne	.+38     	; 0x1e5a <DIO_Write_Pin+0xa8>
				{
					SET_BIT(PORTA,au8_PinNumberCpy);
    1e34:	ab e3       	ldi	r26, 0x3B	; 59
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	eb e3       	ldi	r30, 0x3B	; 59
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	40 81       	ld	r20, Z
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <DIO_Write_Pin+0x9e>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <DIO_Write_Pin+0x9a>
    1e54:	84 2b       	or	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	91 c0       	rjmp	.+290    	; 0x1f7c <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTA,au8_PinNumberCpy);
    1e5a:	ab e3       	ldi	r26, 0x3B	; 59
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	eb e3       	ldi	r30, 0x3B	; 59
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	40 81       	ld	r20, Z
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_Write_Pin+0xc4>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_Write_Pin+0xc0>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	7d c0       	rjmp	.+250    	; 0x1f7c <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTB:
				if(au8_ValueCpy==HIGH_PIN)
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	99 f4       	brne	.+38     	; 0x1eae <DIO_Write_Pin+0xfc>
				{
					SET_BIT(PORTB,au8_PinNumberCpy);
    1e88:	a8 e3       	ldi	r26, 0x38	; 56
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e8 e3       	ldi	r30, 0x38	; 56
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	40 81       	ld	r20, Z
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <DIO_Write_Pin+0xf2>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <DIO_Write_Pin+0xee>
    1ea8:	84 2b       	or	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	67 c0       	rjmp	.+206    	; 0x1f7c <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTB,au8_PinNumberCpy);
    1eae:	a8 e3       	ldi	r26, 0x38	; 56
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e8 e3       	ldi	r30, 0x38	; 56
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	40 81       	ld	r20, Z
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_Write_Pin+0x118>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_Write_Pin+0x114>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	53 c0       	rjmp	.+166    	; 0x1f7c <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTC:
				if(au8_ValueCpy==HIGH_PIN)
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	99 f4       	brne	.+38     	; 0x1f02 <DIO_Write_Pin+0x150>
				{
					SET_BIT(PORTC,au8_PinNumberCpy);
    1edc:	a5 e3       	ldi	r26, 0x35	; 53
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e3       	ldi	r30, 0x35	; 53
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	40 81       	ld	r20, Z
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <DIO_Write_Pin+0x146>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <DIO_Write_Pin+0x142>
    1efc:	84 2b       	or	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	3d c0       	rjmp	.+122    	; 0x1f7c <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTC,au8_PinNumberCpy);
    1f02:	a5 e3       	ldi	r26, 0x35	; 53
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e3       	ldi	r30, 0x35	; 53
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	40 81       	ld	r20, Z
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_Write_Pin+0x16c>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_Write_Pin+0x168>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	29 c0       	rjmp	.+82     	; 0x1f7c <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTD:
				if(au8_ValueCpy==HIGH_PIN)
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	99 f4       	brne	.+38     	; 0x1f56 <DIO_Write_Pin+0x1a4>
				{
					SET_BIT(PORTD,au8_PinNumberCpy);
    1f30:	a2 e3       	ldi	r26, 0x32	; 50
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e2 e3       	ldi	r30, 0x32	; 50
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	40 81       	ld	r20, Z
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <DIO_Write_Pin+0x19a>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <DIO_Write_Pin+0x196>
    1f50:	84 2b       	or	r24, r20
    1f52:	8c 93       	st	X, r24
    1f54:	13 c0       	rjmp	.+38     	; 0x1f7c <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTD,au8_PinNumberCpy);
    1f56:	a2 e3       	ldi	r26, 0x32	; 50
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e2 e3       	ldi	r30, 0x32	; 50
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	40 81       	ld	r20, Z
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <DIO_Write_Pin+0x1c0>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <DIO_Write_Pin+0x1bc>
    1f76:	80 95       	com	r24
    1f78:	84 23       	and	r24, r20
    1f7a:	8c 93       	st	X, r24
				}
				break;
		}
	}
	return Error;
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f7e:	26 96       	adiw	r28, 0x06	; 6
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <DIO_Write_Port>:
/* Description! Interface to set the output value of port                              */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Write_Port(uint8_t au8_PortNumberCpy,uint8_t au8_ValueCpy)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <DIO_Write_Port+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <DIO_Write_Port+0x8>
    1f98:	0f 92       	push	r0
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
    1fa0:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD)&&(au8_ValueCpy >= LOW_PORT)&&(au8_ValueCpy <= HIGH_PORT) )
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	84 30       	cpi	r24, 0x04	; 4
    1faa:	98 f5       	brcc	.+102    	; 0x2012 <DIO_Write_Port+0x82>
	{
		Error = ERROR_OK;
    1fac:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	3d 83       	std	Y+5, r19	; 0x05
    1fb6:	2c 83       	std	Y+4, r18	; 0x04
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	d1 f0       	breq	.+52     	; 0x1ff6 <DIO_Write_Port+0x66>
    1fc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc6:	22 30       	cpi	r18, 0x02	; 2
    1fc8:	31 05       	cpc	r19, r1
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <DIO_Write_Port+0x46>
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	61 f0       	breq	.+24     	; 0x1fec <DIO_Write_Port+0x5c>
    1fd4:	1e c0       	rjmp	.+60     	; 0x2012 <DIO_Write_Port+0x82>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	81 f0       	breq	.+32     	; 0x2000 <DIO_Write_Port+0x70>
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	83 30       	cpi	r24, 0x03	; 3
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	81 f0       	breq	.+32     	; 0x200a <DIO_Write_Port+0x7a>
    1fea:	13 c0       	rjmp	.+38     	; 0x2012 <DIO_Write_Port+0x82>
		{
			case DIO_PORTA:

				PORTA = au8_ValueCpy; // 3shan ana bn2l data msh bs 0 aw 1
    1fec:	eb e3       	ldi	r30, 0x3B	; 59
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	80 83       	st	Z, r24
    1ff4:	0e c0       	rjmp	.+28     	; 0x2012 <DIO_Write_Port+0x82>
				break;

			case DIO_PORTB:

				PORTB = au8_ValueCpy;
    1ff6:	e8 e3       	ldi	r30, 0x38	; 56
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	80 83       	st	Z, r24
    1ffe:	09 c0       	rjmp	.+18     	; 0x2012 <DIO_Write_Port+0x82>
				break;

			case DIO_PORTC:

				PORTC = au8_ValueCpy;
    2000:	e5 e3       	ldi	r30, 0x35	; 53
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	80 83       	st	Z, r24
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <DIO_Write_Port+0x82>
				break;

			case DIO_PORTD:

				PORTD = au8_ValueCpy;
    200a:	e2 e3       	ldi	r30, 0x32	; 50
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <DIO_Read_Pin>:
/* Description! Interface to read an input digital pin                                 */
/* Input      ! Pin number                                               			   */
/* Output     ! uint8 contains the Pin value                                           */
/***************************************************************************************/
uint8_t DIO_Read_Pin(uint8_t au8_PinNumberCpy, uint8_t * pu8_PinValueCpy)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	27 97       	sbiw	r28, 0x07	; 7
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	7d 83       	std	Y+5, r23	; 0x05
    203c:	6c 83       	std	Y+4, r22	; 0x04

	uint8_t Error = ERROR_NOK;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	80 32       	cpi	r24, 0x20	; 32
    2046:	08 f0       	brcs	.+2      	; 0x204a <DIO_Read_Pin+0x26>
    2048:	79 c0       	rjmp	.+242    	; 0x213c <DIO_Read_Pin+0x118>
	{
		Error = ERROR_OK;
    204a:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	86 95       	lsr	r24
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	87 70       	andi	r24, 0x07	; 7
    205a:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	3f 83       	std	Y+7, r19	; 0x07
    2064:	2e 83       	std	Y+6, r18	; 0x06
    2066:	4e 81       	ldd	r20, Y+6	; 0x06
    2068:	5f 81       	ldd	r21, Y+7	; 0x07
    206a:	41 30       	cpi	r20, 0x01	; 1
    206c:	51 05       	cpc	r21, r1
    206e:	59 f1       	breq	.+86     	; 0x20c6 <DIO_Read_Pin+0xa2>
    2070:	8e 81       	ldd	r24, Y+6	; 0x06
    2072:	9f 81       	ldd	r25, Y+7	; 0x07
    2074:	82 30       	cpi	r24, 0x02	; 2
    2076:	91 05       	cpc	r25, r1
    2078:	34 f4       	brge	.+12     	; 0x2086 <DIO_Read_Pin+0x62>
    207a:	2e 81       	ldd	r18, Y+6	; 0x06
    207c:	3f 81       	ldd	r19, Y+7	; 0x07
    207e:	21 15       	cp	r18, r1
    2080:	31 05       	cpc	r19, r1
    2082:	69 f0       	breq	.+26     	; 0x209e <DIO_Read_Pin+0x7a>
    2084:	5b c0       	rjmp	.+182    	; 0x213c <DIO_Read_Pin+0x118>
    2086:	4e 81       	ldd	r20, Y+6	; 0x06
    2088:	5f 81       	ldd	r21, Y+7	; 0x07
    208a:	42 30       	cpi	r20, 0x02	; 2
    208c:	51 05       	cpc	r21, r1
    208e:	79 f1       	breq	.+94     	; 0x20ee <DIO_Read_Pin+0xca>
    2090:	8e 81       	ldd	r24, Y+6	; 0x06
    2092:	9f 81       	ldd	r25, Y+7	; 0x07
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	91 05       	cpc	r25, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <DIO_Read_Pin+0x78>
    209a:	3d c0       	rjmp	.+122    	; 0x2116 <DIO_Read_Pin+0xf2>
    209c:	4f c0       	rjmp	.+158    	; 0x213c <DIO_Read_Pin+0x118>
		{
			case DIO_PORTA:

				*pu8_PinValueCpy = GET_BIT(PINA,au8_PinNumberCpy);
    209e:	e9 e3       	ldi	r30, 0x39	; 57
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a9 01       	movw	r20, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <DIO_Read_Pin+0x92>
    20b2:	55 95       	asr	r21
    20b4:	47 95       	ror	r20
    20b6:	8a 95       	dec	r24
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <DIO_Read_Pin+0x8e>
    20ba:	ca 01       	movw	r24, r20
    20bc:	81 70       	andi	r24, 0x01	; 1
    20be:	ec 81       	ldd	r30, Y+4	; 0x04
    20c0:	fd 81       	ldd	r31, Y+5	; 0x05
    20c2:	80 83       	st	Z, r24
    20c4:	3b c0       	rjmp	.+118    	; 0x213c <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTB:

				*pu8_PinValueCpy = GET_BIT(PINB,au8_PinNumberCpy);
    20c6:	e6 e3       	ldi	r30, 0x36	; 54
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_Read_Pin+0xba>
    20da:	55 95       	asr	r21
    20dc:	47 95       	ror	r20
    20de:	8a 95       	dec	r24
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_Read_Pin+0xb6>
    20e2:	ca 01       	movw	r24, r20
    20e4:	81 70       	andi	r24, 0x01	; 1
    20e6:	ec 81       	ldd	r30, Y+4	; 0x04
    20e8:	fd 81       	ldd	r31, Y+5	; 0x05
    20ea:	80 83       	st	Z, r24
    20ec:	27 c0       	rjmp	.+78     	; 0x213c <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTC:

				*pu8_PinValueCpy = GET_BIT(PINC,au8_PinNumberCpy);
    20ee:	e3 e3       	ldi	r30, 0x33	; 51
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a9 01       	movw	r20, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <DIO_Read_Pin+0xe2>
    2102:	55 95       	asr	r21
    2104:	47 95       	ror	r20
    2106:	8a 95       	dec	r24
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <DIO_Read_Pin+0xde>
    210a:	ca 01       	movw	r24, r20
    210c:	81 70       	andi	r24, 0x01	; 1
    210e:	ec 81       	ldd	r30, Y+4	; 0x04
    2110:	fd 81       	ldd	r31, Y+5	; 0x05
    2112:	80 83       	st	Z, r24
    2114:	13 c0       	rjmp	.+38     	; 0x213c <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTD:

				*pu8_PinValueCpy = GET_BIT(PIND,au8_PinNumberCpy);
    2116:	e0 e3       	ldi	r30, 0x30	; 48
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a9 01       	movw	r20, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_Read_Pin+0x10a>
    212a:	55 95       	asr	r21
    212c:	47 95       	ror	r20
    212e:	8a 95       	dec	r24
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_Read_Pin+0x106>
    2132:	ca 01       	movw	r24, r20
    2134:	81 70       	andi	r24, 0x01	; 1
    2136:	ec 81       	ldd	r30, Y+4	; 0x04
    2138:	fd 81       	ldd	r31, Y+5	; 0x05
    213a:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    213e:	27 96       	adiw	r28, 0x07	; 7
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <DIO_Read_Port>:
/* Description! Interface to get the input value on Port                               */
/* Input      ! Port number                                                            */
/* Output     ! Port Value                                                             */
/***************************************************************************************/
uint8_t DIO_Read_Port(uint8_t au8_PortNumberCpy, uint8_t * pu8_PortValueCpy)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <DIO_Read_Port+0x6>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <DIO_Read_Port+0x8>
    2158:	00 d0       	rcall	.+0      	; 0x215a <DIO_Read_Port+0xa>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	7c 83       	std	Y+4, r23	; 0x04
    2162:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	89 83       	std	Y+1, r24	; 0x01
	if( (au8_PortNumberCpy >= DIO_PORTA)&&(au8_PortNumberCpy <= DIO_PORTD) )
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	84 30       	cpi	r24, 0x04	; 4
    216c:	d8 f5       	brcc	.+118    	; 0x21e4 <DIO_Read_Port+0x94>
	{
		Error = ERROR_OK;
    216e:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3e 83       	std	Y+6, r19	; 0x06
    2178:	2d 83       	std	Y+5, r18	; 0x05
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	91 05       	cpc	r25, r1
    2182:	e1 f0       	breq	.+56     	; 0x21bc <DIO_Read_Port+0x6c>
    2184:	2d 81       	ldd	r18, Y+5	; 0x05
    2186:	3e 81       	ldd	r19, Y+6	; 0x06
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	2c f4       	brge	.+10     	; 0x2198 <DIO_Read_Port+0x48>
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	61 f0       	breq	.+24     	; 0x21ae <DIO_Read_Port+0x5e>
    2196:	26 c0       	rjmp	.+76     	; 0x21e4 <DIO_Read_Port+0x94>
    2198:	2d 81       	ldd	r18, Y+5	; 0x05
    219a:	3e 81       	ldd	r19, Y+6	; 0x06
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	a1 f0       	breq	.+40     	; 0x21ca <DIO_Read_Port+0x7a>
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	b1 f0       	breq	.+44     	; 0x21d8 <DIO_Read_Port+0x88>
    21ac:	1b c0       	rjmp	.+54     	; 0x21e4 <DIO_Read_Port+0x94>
		{
			case DIO_PORTA:

				*pu8_PortValueCpy = PINA;
    21ae:	e9 e3       	ldi	r30, 0x39	; 57
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	eb 81       	ldd	r30, Y+3	; 0x03
    21b6:	fc 81       	ldd	r31, Y+4	; 0x04
    21b8:	80 83       	st	Z, r24
    21ba:	14 c0       	rjmp	.+40     	; 0x21e4 <DIO_Read_Port+0x94>
			break;
			case DIO_PORTB:
				*pu8_PortValueCpy = PINB;
    21bc:	e6 e3       	ldi	r30, 0x36	; 54
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	eb 81       	ldd	r30, Y+3	; 0x03
    21c4:	fc 81       	ldd	r31, Y+4	; 0x04
    21c6:	80 83       	st	Z, r24
    21c8:	0d c0       	rjmp	.+26     	; 0x21e4 <DIO_Read_Port+0x94>
			break;
			case DIO_PORTC:
				*pu8_PortValueCpy = PINC;
    21ca:	e3 e3       	ldi	r30, 0x33	; 51
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	eb 81       	ldd	r30, Y+3	; 0x03
    21d2:	fc 81       	ldd	r31, Y+4	; 0x04
    21d4:	80 83       	st	Z, r24
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <DIO_Read_Port+0x94>
			break;
			case DIO_PORTD:
				*pu8_PortValueCpy = PIND;
    21d8:	e0 e3       	ldi	r30, 0x30	; 48
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	eb 81       	ldd	r30, Y+3	; 0x03
    21e0:	fc 81       	ldd	r31, Y+4	; 0x04
    21e2:	80 83       	st	Z, r24
			break;
		}
	}
	return Error;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e6:	26 96       	adiw	r28, 0x06	; 6
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <DIO_Pullup_Pin>:
/* Description! Interface to make pin Pullup                                           */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Pullup_Pin(uint8_t au8_PinNumberCpy)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <DIO_Pullup_Pin+0x6>
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <DIO_Pullup_Pin+0x8>
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Error = ERROR_NOK;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	80 32       	cpi	r24, 0x20	; 32
    2210:	08 f0       	brcs	.+2      	; 0x2214 <DIO_Pullup_Pin+0x1c>
    2212:	73 c0       	rjmp	.+230    	; 0x22fa <DIO_Pullup_Pin+0x102>
	{
		Error = ERROR_OK;
    2214:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	86 95       	lsr	r24
    221a:	86 95       	lsr	r24
    221c:	86 95       	lsr	r24
    221e:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	87 70       	andi	r24, 0x07	; 7
    2224:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	3d 83       	std	Y+5, r19	; 0x05
    222e:	2c 83       	std	Y+4, r18	; 0x04
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	9d 81       	ldd	r25, Y+5	; 0x05
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	91 05       	cpc	r25, r1
    2238:	41 f1       	breq	.+80     	; 0x228a <DIO_Pullup_Pin+0x92>
    223a:	2c 81       	ldd	r18, Y+4	; 0x04
    223c:	3d 81       	ldd	r19, Y+5	; 0x05
    223e:	22 30       	cpi	r18, 0x02	; 2
    2240:	31 05       	cpc	r19, r1
    2242:	2c f4       	brge	.+10     	; 0x224e <DIO_Pullup_Pin+0x56>
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	61 f0       	breq	.+24     	; 0x2264 <DIO_Pullup_Pin+0x6c>
    224c:	56 c0       	rjmp	.+172    	; 0x22fa <DIO_Pullup_Pin+0x102>
    224e:	2c 81       	ldd	r18, Y+4	; 0x04
    2250:	3d 81       	ldd	r19, Y+5	; 0x05
    2252:	22 30       	cpi	r18, 0x02	; 2
    2254:	31 05       	cpc	r19, r1
    2256:	61 f1       	breq	.+88     	; 0x22b0 <DIO_Pullup_Pin+0xb8>
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	91 05       	cpc	r25, r1
    2260:	d1 f1       	breq	.+116    	; 0x22d6 <DIO_Pullup_Pin+0xde>
    2262:	4b c0       	rjmp	.+150    	; 0x22fa <DIO_Pullup_Pin+0x102>
		{
			case DIO_PORTA:

				SET_BIT(PORTA,au8_PinNumberCpy);
    2264:	ab e3       	ldi	r26, 0x3B	; 59
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	eb e3       	ldi	r30, 0x3B	; 59
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	40 81       	ld	r20, Z
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	02 2e       	mov	r0, r18
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <DIO_Pullup_Pin+0x88>
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	0a 94       	dec	r0
    2282:	e2 f7       	brpl	.-8      	; 0x227c <DIO_Pullup_Pin+0x84>
    2284:	84 2b       	or	r24, r20
    2286:	8c 93       	st	X, r24
    2288:	38 c0       	rjmp	.+112    	; 0x22fa <DIO_Pullup_Pin+0x102>
				break;
			case DIO_PORTB:

				SET_BIT(PORTB,au8_PinNumberCpy);
    228a:	a8 e3       	ldi	r26, 0x38	; 56
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e8 e3       	ldi	r30, 0x38	; 56
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	40 81       	ld	r20, Z
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	02 2e       	mov	r0, r18
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <DIO_Pullup_Pin+0xae>
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	0a 94       	dec	r0
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <DIO_Pullup_Pin+0xaa>
    22aa:	84 2b       	or	r24, r20
    22ac:	8c 93       	st	X, r24
    22ae:	25 c0       	rjmp	.+74     	; 0x22fa <DIO_Pullup_Pin+0x102>
				break;
			case DIO_PORTC:

				SET_BIT(PORTC,au8_PinNumberCpy);
    22b0:	a5 e3       	ldi	r26, 0x35	; 53
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e5 e3       	ldi	r30, 0x35	; 53
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	40 81       	ld	r20, Z
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 2e       	mov	r0, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_Pullup_Pin+0xd4>
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	0a 94       	dec	r0
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_Pullup_Pin+0xd0>
    22d0:	84 2b       	or	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	12 c0       	rjmp	.+36     	; 0x22fa <DIO_Pullup_Pin+0x102>
				break;
			case DIO_PORTD:

				SET_BIT(PORTD,au8_PinNumberCpy);
    22d6:	a2 e3       	ldi	r26, 0x32	; 50
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e2 e3       	ldi	r30, 0x32	; 50
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	40 81       	ld	r20, Z
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_Pullup_Pin+0xfa>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_Pullup_Pin+0xf6>
    22f6:	84 2b       	or	r24, r20
    22f8:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <DIO_Pullup_Port>:
/* Description! Interface to make port Pullup                                          */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Pullup_Port(uint8_t au8_PortNumberCpy)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	00 d0       	rcall	.+0      	; 0x2312 <DIO_Pullup_Port+0x6>
    2312:	00 d0       	rcall	.+0      	; 0x2314 <DIO_Pullup_Port+0x8>
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Error = ERROR_NOK;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD) )
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	84 30       	cpi	r24, 0x04	; 4
    2322:	98 f5       	brcc	.+102    	; 0x238a <DIO_Pullup_Port+0x7e>
	{
		Error = ERROR_OK;
    2324:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	3c 83       	std	Y+4, r19	; 0x04
    232e:	2b 83       	std	Y+3, r18	; 0x03
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	91 05       	cpc	r25, r1
    2338:	d1 f0       	breq	.+52     	; 0x236e <DIO_Pullup_Port+0x62>
    233a:	2b 81       	ldd	r18, Y+3	; 0x03
    233c:	3c 81       	ldd	r19, Y+4	; 0x04
    233e:	22 30       	cpi	r18, 0x02	; 2
    2340:	31 05       	cpc	r19, r1
    2342:	2c f4       	brge	.+10     	; 0x234e <DIO_Pullup_Port+0x42>
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	61 f0       	breq	.+24     	; 0x2364 <DIO_Pullup_Port+0x58>
    234c:	1e c0       	rjmp	.+60     	; 0x238a <DIO_Pullup_Port+0x7e>
    234e:	2b 81       	ldd	r18, Y+3	; 0x03
    2350:	3c 81       	ldd	r19, Y+4	; 0x04
    2352:	22 30       	cpi	r18, 0x02	; 2
    2354:	31 05       	cpc	r19, r1
    2356:	81 f0       	breq	.+32     	; 0x2378 <DIO_Pullup_Port+0x6c>
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	83 30       	cpi	r24, 0x03	; 3
    235e:	91 05       	cpc	r25, r1
    2360:	81 f0       	breq	.+32     	; 0x2382 <DIO_Pullup_Port+0x76>
    2362:	13 c0       	rjmp	.+38     	; 0x238a <DIO_Pullup_Port+0x7e>
		{
			case DIO_PORTA:

				PORTA = HIGH_PORT;
    2364:	eb e3       	ldi	r30, 0x3B	; 59
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	8f ef       	ldi	r24, 0xFF	; 255
    236a:	80 83       	st	Z, r24
    236c:	0e c0       	rjmp	.+28     	; 0x238a <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTB:

				PORTB = HIGH_PORT;
    236e:	e8 e3       	ldi	r30, 0x38	; 56
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	80 83       	st	Z, r24
    2376:	09 c0       	rjmp	.+18     	; 0x238a <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTC:

				PORTC = HIGH_PORT;
    2378:	e5 e3       	ldi	r30, 0x35	; 53
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8f ef       	ldi	r24, 0xFF	; 255
    237e:	80 83       	st	Z, r24
    2380:	04 c0       	rjmp	.+8      	; 0x238a <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTD:

				PORTD = HIGH_PORT;
    2382:	e2 e3       	ldi	r30, 0x32	; 50
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	8f ef       	ldi	r24, 0xFF	; 255
    2388:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    238a:	89 81       	ldd	r24, Y+1	; 0x01
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <DIO_Toggle_Pin>:
/* Description! Interface to Toggle the Output value of the pin                        */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Toggle_Pin(uint8_t au8_PinNumberCpy)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <DIO_Toggle_Pin+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <DIO_Toggle_Pin+0x8>
    23a2:	0f 92       	push	r0
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Error = ERROR_NOK;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	80 32       	cpi	r24, 0x20	; 32
    23b2:	08 f0       	brcs	.+2      	; 0x23b6 <DIO_Toggle_Pin+0x1c>
    23b4:	73 c0       	rjmp	.+230    	; 0x249c <DIO_Toggle_Pin+0x102>
	{
		Error = ERROR_OK;
    23b6:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	86 95       	lsr	r24
    23bc:	86 95       	lsr	r24
    23be:	86 95       	lsr	r24
    23c0:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	87 70       	andi	r24, 0x07	; 7
    23c6:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	3d 83       	std	Y+5, r19	; 0x05
    23d0:	2c 83       	std	Y+4, r18	; 0x04
    23d2:	8c 81       	ldd	r24, Y+4	; 0x04
    23d4:	9d 81       	ldd	r25, Y+5	; 0x05
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	91 05       	cpc	r25, r1
    23da:	41 f1       	breq	.+80     	; 0x242c <DIO_Toggle_Pin+0x92>
    23dc:	2c 81       	ldd	r18, Y+4	; 0x04
    23de:	3d 81       	ldd	r19, Y+5	; 0x05
    23e0:	22 30       	cpi	r18, 0x02	; 2
    23e2:	31 05       	cpc	r19, r1
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <DIO_Toggle_Pin+0x56>
    23e6:	8c 81       	ldd	r24, Y+4	; 0x04
    23e8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	61 f0       	breq	.+24     	; 0x2406 <DIO_Toggle_Pin+0x6c>
    23ee:	56 c0       	rjmp	.+172    	; 0x249c <DIO_Toggle_Pin+0x102>
    23f0:	2c 81       	ldd	r18, Y+4	; 0x04
    23f2:	3d 81       	ldd	r19, Y+5	; 0x05
    23f4:	22 30       	cpi	r18, 0x02	; 2
    23f6:	31 05       	cpc	r19, r1
    23f8:	61 f1       	breq	.+88     	; 0x2452 <DIO_Toggle_Pin+0xb8>
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	91 05       	cpc	r25, r1
    2402:	d1 f1       	breq	.+116    	; 0x2478 <DIO_Toggle_Pin+0xde>
    2404:	4b c0       	rjmp	.+150    	; 0x249c <DIO_Toggle_Pin+0x102>
		{
			case DIO_PORTA:
				TOGGLE_BIT(PORTA, au8_PinNumberCpy);
    2406:	ab e3       	ldi	r26, 0x3B	; 59
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	eb e3       	ldi	r30, 0x3B	; 59
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	40 81       	ld	r20, Z
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 2e       	mov	r0, r18
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <DIO_Toggle_Pin+0x88>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	0a 94       	dec	r0
    2424:	e2 f7       	brpl	.-8      	; 0x241e <DIO_Toggle_Pin+0x84>
    2426:	84 27       	eor	r24, r20
    2428:	8c 93       	st	X, r24
    242a:	38 c0       	rjmp	.+112    	; 0x249c <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTB:
				TOGGLE_BIT(PORTB, au8_PinNumberCpy);
    242c:	a8 e3       	ldi	r26, 0x38	; 56
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e8 e3       	ldi	r30, 0x38	; 56
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	40 81       	ld	r20, Z
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	02 2e       	mov	r0, r18
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <DIO_Toggle_Pin+0xae>
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	0a 94       	dec	r0
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <DIO_Toggle_Pin+0xaa>
    244c:	84 27       	eor	r24, r20
    244e:	8c 93       	st	X, r24
    2450:	25 c0       	rjmp	.+74     	; 0x249c <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTC:
				TOGGLE_BIT(PORTC, au8_PinNumberCpy);
    2452:	a5 e3       	ldi	r26, 0x35	; 53
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e5 e3       	ldi	r30, 0x35	; 53
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	40 81       	ld	r20, Z
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 2e       	mov	r0, r18
    2468:	02 c0       	rjmp	.+4      	; 0x246e <DIO_Toggle_Pin+0xd4>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	0a 94       	dec	r0
    2470:	e2 f7       	brpl	.-8      	; 0x246a <DIO_Toggle_Pin+0xd0>
    2472:	84 27       	eor	r24, r20
    2474:	8c 93       	st	X, r24
    2476:	12 c0       	rjmp	.+36     	; 0x249c <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTD:
				TOGGLE_BIT(PORTD, au8_PinNumberCpy);
    2478:	a2 e3       	ldi	r26, 0x32	; 50
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e2 e3       	ldi	r30, 0x32	; 50
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	40 81       	ld	r20, Z
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	02 2e       	mov	r0, r18
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <DIO_Toggle_Pin+0xfa>
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	0a 94       	dec	r0
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <DIO_Toggle_Pin+0xf6>
    2498:	84 27       	eor	r24, r20
    249a:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <DIO_Toggle_Port>:
/* Description! Interface to Toggle the output value of port                           */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Toggle_Port(uint8_t au8_PortNumberCpy)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <DIO_Toggle_Port+0x6>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <DIO_Toggle_Port+0x8>
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Error = ERROR_NOK;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD) )
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	84 30       	cpi	r24, 0x04	; 4
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <DIO_Toggle_Port+0x1a>
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <DIO_Toggle_Port+0x98>
	{
		Error = ERROR_OK;
    24c8:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	3c 83       	std	Y+4, r19	; 0x04
    24d2:	2b 83       	std	Y+3, r18	; 0x03
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	91 05       	cpc	r25, r1
    24dc:	e9 f0       	breq	.+58     	; 0x2518 <DIO_Toggle_Port+0x6a>
    24de:	2b 81       	ldd	r18, Y+3	; 0x03
    24e0:	3c 81       	ldd	r19, Y+4	; 0x04
    24e2:	22 30       	cpi	r18, 0x02	; 2
    24e4:	31 05       	cpc	r19, r1
    24e6:	2c f4       	brge	.+10     	; 0x24f2 <DIO_Toggle_Port+0x44>
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	61 f0       	breq	.+24     	; 0x2508 <DIO_Toggle_Port+0x5a>
    24f0:	2a c0       	rjmp	.+84     	; 0x2546 <DIO_Toggle_Port+0x98>
    24f2:	2b 81       	ldd	r18, Y+3	; 0x03
    24f4:	3c 81       	ldd	r19, Y+4	; 0x04
    24f6:	22 30       	cpi	r18, 0x02	; 2
    24f8:	31 05       	cpc	r19, r1
    24fa:	b1 f0       	breq	.+44     	; 0x2528 <DIO_Toggle_Port+0x7a>
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	83 30       	cpi	r24, 0x03	; 3
    2502:	91 05       	cpc	r25, r1
    2504:	c9 f0       	breq	.+50     	; 0x2538 <DIO_Toggle_Port+0x8a>
    2506:	1f c0       	rjmp	.+62     	; 0x2546 <DIO_Toggle_Port+0x98>
		{
			case DIO_PORTA:
				TOGGLE_BYTE(PORTA);
    2508:	ab e3       	ldi	r26, 0x3B	; 59
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	eb e3       	ldi	r30, 0x3B	; 59
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	80 95       	com	r24
    2514:	8c 93       	st	X, r24
    2516:	17 c0       	rjmp	.+46     	; 0x2546 <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTB:
				TOGGLE_BYTE(PORTB);
    2518:	a8 e3       	ldi	r26, 0x38	; 56
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e8 e3       	ldi	r30, 0x38	; 56
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	80 95       	com	r24
    2524:	8c 93       	st	X, r24
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTC:
				TOGGLE_BYTE(PORTC);
    2528:	a5 e3       	ldi	r26, 0x35	; 53
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e5 e3       	ldi	r30, 0x35	; 53
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	80 95       	com	r24
    2534:	8c 93       	st	X, r24
    2536:	07 c0       	rjmp	.+14     	; 0x2546 <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTD:
				TOGGLE_BYTE(PORTD);
    2538:	a2 e3       	ldi	r26, 0x32	; 50
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e2 e3       	ldi	r30, 0x32	; 50
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	80 95       	com	r24
    2544:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    2546:	89 81       	ldd	r24, Y+1	; 0x01
}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <ADC_Init>:
/* brief!  ADC Initialization                                                          */
/* param!  (I/P) pointer to structure that hold ADC Configuration                      */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t ADC_Init(str_ADC_cfg_t *pstr_ADC_cfg)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	27 97       	sbiw	r28, 0x07	; 7
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	9b 83       	std	Y+3, r25	; 0x03
    256c:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    256e:	19 82       	std	Y+1, r1	; 0x01

	/* Checking that the passed pointer is not a NULL one */
	if (NULL != pstr_ADC_cfg )
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	09 f4       	brne	.+2      	; 0x257a <ADC_Init+0x24>
    2578:	01 c1       	rjmp	.+514    	; 0x277c <ADC_Init+0x226>
	{
		/* configure the used channel to read */
		if((ADC_CH0 <= pstr_ADC_cfg -> u8_Channel)&&(ADC_CH7 >= pstr_ADC_cfg -> u8_Channel))
    257a:	ea 81       	ldd	r30, Y+2	; 0x02
    257c:	fb 81       	ldd	r31, Y+3	; 0x03
    257e:	80 81       	ld	r24, Z
    2580:	88 30       	cpi	r24, 0x08	; 8
    2582:	08 f0       	brcs	.+2      	; 0x2586 <ADC_Init+0x30>
    2584:	f8 c0       	rjmp	.+496    	; 0x2776 <ADC_Init+0x220>
		{
			/* Initialize ADC pin as input pin */
			DIO_INIT_Pin(pstr_ADC_cfg -> u8_Channel, INPUT_PIN);
    2586:	ea 81       	ldd	r30, Y+2	; 0x02
    2588:	fb 81       	ldd	r31, Y+3	; 0x03
    258a:	80 81       	ld	r24, Z
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_INIT_Pin>

			/* Chose Channel to read */
			CLEAR_MASK(ADMUX, ADC_CH_MASK);
    2592:	a7 e2       	ldi	r26, 0x27	; 39
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e7 e2       	ldi	r30, 0x27	; 39
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 7e       	andi	r24, 0xE0	; 224
    259e:	8c 93       	st	X, r24
			SET_MASK(ADMUX, pstr_ADC_cfg -> u8_Channel);
    25a0:	a7 e2       	ldi	r26, 0x27	; 39
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e7 e2       	ldi	r30, 0x27	; 39
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	90 81       	ld	r25, Z
    25aa:	ea 81       	ldd	r30, Y+2	; 0x02
    25ac:	fb 81       	ldd	r31, Y+3	; 0x03
    25ae:	80 81       	ld	r24, Z
    25b0:	89 2b       	or	r24, r25
    25b2:	8c 93       	st	X, r24

			/* chose the reference volt */
			switch(pstr_ADC_cfg -> u8_VoltRef)
    25b4:	ea 81       	ldd	r30, Y+2	; 0x02
    25b6:	fb 81       	ldd	r31, Y+3	; 0x03
    25b8:	81 81       	ldd	r24, Z+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	3f 83       	std	Y+7, r19	; 0x07
    25c0:	2e 83       	std	Y+6, r18	; 0x06
    25c2:	8e 81       	ldd	r24, Y+6	; 0x06
    25c4:	9f 81       	ldd	r25, Y+7	; 0x07
    25c6:	80 34       	cpi	r24, 0x40	; 64
    25c8:	91 05       	cpc	r25, r1
    25ca:	51 f0       	breq	.+20     	; 0x25e0 <ADC_Init+0x8a>
    25cc:	2e 81       	ldd	r18, Y+6	; 0x06
    25ce:	3f 81       	ldd	r19, Y+7	; 0x07
    25d0:	20 3c       	cpi	r18, 0xC0	; 192
    25d2:	31 05       	cpc	r19, r1
    25d4:	11 f1       	breq	.+68     	; 0x261a <ADC_Init+0xc4>
    25d6:	8e 81       	ldd	r24, Y+6	; 0x06
    25d8:	9f 81       	ldd	r25, Y+7	; 0x07
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	81 f0       	breq	.+32     	; 0x25fe <ADC_Init+0xa8>
    25de:	2c c0       	rjmp	.+88     	; 0x2638 <ADC_Init+0xe2>
			{
				case ADC_INTERNAL_VCC:
					CLEAR_MASK(ADMUX, ADC_VCC_MASK);
    25e0:	a7 e2       	ldi	r26, 0x27	; 39
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e7 e2       	ldi	r30, 0x27	; 39
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	8f 77       	andi	r24, 0x7F	; 127
    25ec:	8c 93       	st	X, r24
					SET_MASK(ADMUX, ADC_INTERNAL_VCC);
    25ee:	a7 e2       	ldi	r26, 0x27	; 39
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e7 e2       	ldi	r30, 0x27	; 39
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 64       	ori	r24, 0x40	; 64
    25fa:	8c 93       	st	X, r24
    25fc:	1f c0       	rjmp	.+62     	; 0x263c <ADC_Init+0xe6>
				break;

				case ADC_EXTERNAL_VCC:
					CLEAR_MASK(ADMUX, ADC_VCC_MASK);
    25fe:	a7 e2       	ldi	r26, 0x27	; 39
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e7 e2       	ldi	r30, 0x27	; 39
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8f 77       	andi	r24, 0x7F	; 127
    260a:	8c 93       	st	X, r24
					SET_MASK(ADMUX, ADC_EXTERNAL_VCC);
    260c:	a7 e2       	ldi	r26, 0x27	; 39
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e7 e2       	ldi	r30, 0x27	; 39
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8c 93       	st	X, r24
    2618:	11 c0       	rjmp	.+34     	; 0x263c <ADC_Init+0xe6>
				break;

				case ADC_INTERNAL_2_56VCC:
					CLEAR_MASK(ADMUX, ADC_VCC_MASK);
    261a:	a7 e2       	ldi	r26, 0x27	; 39
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e7 e2       	ldi	r30, 0x27	; 39
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8f 77       	andi	r24, 0x7F	; 127
    2626:	8c 93       	st	X, r24
					SET_MASK(ADMUX, ADC_INTERNAL_2_56VCC);
    2628:	a7 e2       	ldi	r26, 0x27	; 39
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e7 e2       	ldi	r30, 0x27	; 39
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	80 6c       	ori	r24, 0xC0	; 192
    2634:	8c 93       	st	X, r24
    2636:	02 c0       	rjmp	.+4      	; 0x263c <ADC_Init+0xe6>
				break;

				default:
					au8_DET = E_ADC_VOLTAGE_REF;
    2638:	8c e2       	ldi	r24, 0x2C	; 44
    263a:	89 83       	std	Y+1, r24	; 0x01
				break;
			}

			/* ADC (Left/Right) Adjust Result */
			gu8_LeftRight_Adjust = pstr_ADC_cfg -> u8_LeftRight_Adjust;
    263c:	ea 81       	ldd	r30, Y+2	; 0x02
    263e:	fb 81       	ldd	r31, Y+3	; 0x03
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	80 93 b4 00 	sts	0x00B4, r24
			switch(pstr_ADC_cfg -> u8_LeftRight_Adjust)
    2646:	ea 81       	ldd	r30, Y+2	; 0x02
    2648:	fb 81       	ldd	r31, Y+3	; 0x03
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	3d 83       	std	Y+5, r19	; 0x05
    2652:	2c 83       	std	Y+4, r18	; 0x04
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	9d 81       	ldd	r25, Y+5	; 0x05
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f0       	breq	.+26     	; 0x2676 <ADC_Init+0x120>
    265c:	2c 81       	ldd	r18, Y+4	; 0x04
    265e:	3d 81       	ldd	r19, Y+5	; 0x05
    2660:	21 30       	cpi	r18, 0x01	; 1
    2662:	31 05       	cpc	r19, r1
    2664:	81 f4       	brne	.+32     	; 0x2686 <ADC_Init+0x130>
			{
				case ADC_LEFT_ADJUST:
					SET_BIT(ADMUX, ADLAR);//set left adjust
    2666:	a7 e2       	ldi	r26, 0x27	; 39
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e7 e2       	ldi	r30, 0x27	; 39
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	80 62       	ori	r24, 0x20	; 32
    2672:	8c 93       	st	X, r24
    2674:	0a c0       	rjmp	.+20     	; 0x268a <ADC_Init+0x134>
				break;

				case ADC_RIGHT_ADJUST:
					CLEAR_BIT(ADMUX, ADLAR);//set right adjust
    2676:	a7 e2       	ldi	r26, 0x27	; 39
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e7 e2       	ldi	r30, 0x27	; 39
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	8f 7d       	andi	r24, 0xDF	; 223
    2682:	8c 93       	st	X, r24
    2684:	02 c0       	rjmp	.+4      	; 0x268a <ADC_Init+0x134>
				break;

				default:
					au8_DET = E_ADC_ADJUST;
    2686:	8c e2       	ldi	r24, 0x2C	; 44
    2688:	89 83       	std	Y+1, r24	; 0x01
				break;
			}

			/* ADC prescaler */
			if((ADC_PSC_0 <= pstr_ADC_cfg -> u8_PSC)&&(ADC_PSC_128 >= pstr_ADC_cfg -> u8_PSC))
    268a:	ea 81       	ldd	r30, Y+2	; 0x02
    268c:	fb 81       	ldd	r31, Y+3	; 0x03
    268e:	83 81       	ldd	r24, Z+3	; 0x03
    2690:	88 30       	cpi	r24, 0x08	; 8
    2692:	90 f4       	brcc	.+36     	; 0x26b8 <ADC_Init+0x162>
			{
				CLEAR_MASK(ADCSRA, ADC_PSC_MASK);
    2694:	a6 e2       	ldi	r26, 0x26	; 38
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e6 e2       	ldi	r30, 0x26	; 38
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	88 7f       	andi	r24, 0xF8	; 248
    26a0:	8c 93       	st	X, r24
				SET_MASK(ADCSRA, pstr_ADC_cfg -> u8_PSC);
    26a2:	a6 e2       	ldi	r26, 0x26	; 38
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e6 e2       	ldi	r30, 0x26	; 38
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	90 81       	ld	r25, Z
    26ac:	ea 81       	ldd	r30, Y+2	; 0x02
    26ae:	fb 81       	ldd	r31, Y+3	; 0x03
    26b0:	83 81       	ldd	r24, Z+3	; 0x03
    26b2:	89 2b       	or	r24, r25
    26b4:	8c 93       	st	X, r24
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <ADC_Init+0x166>
			}
			else
			{
				au8_DET = E_ADC_PSC;
    26b8:	8a e2       	ldi	r24, 0x2A	; 42
    26ba:	89 83       	std	Y+1, r24	; 0x01
			}

			/* ADC Interrupt / Polling Mode */
			u8_ADC_InterruptMode = pstr_ADC_cfg -> u8_Interrupt_Mode;
    26bc:	ea 81       	ldd	r30, Y+2	; 0x02
    26be:	fb 81       	ldd	r31, Y+3	; 0x03
    26c0:	84 81       	ldd	r24, Z+4	; 0x04
    26c2:	80 93 b5 00 	sts	0x00B5, r24
			if(ADC_INTERRUPT == pstr_ADC_cfg -> u8_Interrupt_Mode)
    26c6:	ea 81       	ldd	r30, Y+2	; 0x02
    26c8:	fb 81       	ldd	r31, Y+3	; 0x03
    26ca:	84 81       	ldd	r24, Z+4	; 0x04
    26cc:	88 23       	and	r24, r24
    26ce:	51 f4       	brne	.+20     	; 0x26e4 <ADC_Init+0x18e>
			{
				/* Enable_Global Interrupt */
				Enable_GlobalInterrupt();
    26d0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Enable_GlobalInterrupt>
				SET_BIT(ADCSRA, ADIE);
    26d4:	a6 e2       	ldi	r26, 0x26	; 38
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e6 e2       	ldi	r30, 0x26	; 38
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	88 60       	ori	r24, 0x08	; 8
    26e0:	8c 93       	st	X, r24
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <ADC_Init+0x1ac>
			}
			else if(ADC_POLLING == pstr_ADC_cfg -> u8_Interrupt_Mode)
    26e4:	ea 81       	ldd	r30, Y+2	; 0x02
    26e6:	fb 81       	ldd	r31, Y+3	; 0x03
    26e8:	84 81       	ldd	r24, Z+4	; 0x04
    26ea:	81 30       	cpi	r24, 0x01	; 1
    26ec:	41 f4       	brne	.+16     	; 0x26fe <ADC_Init+0x1a8>
			{
				CLEAR_BIT(ADCSRA, ADIE);
    26ee:	a6 e2       	ldi	r26, 0x26	; 38
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e6 e2       	ldi	r30, 0x26	; 38
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	87 7f       	andi	r24, 0xF7	; 247
    26fa:	8c 93       	st	X, r24
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <ADC_Init+0x1ac>
			}
			else
			{
				au8_DET = E_ADC_INTERRUPT_MODE;
    26fe:	8c e2       	ldi	r24, 0x2C	; 44
    2700:	89 83       	std	Y+1, r24	; 0x01
			}

			/* ADC Trigger Mode */
			if((ADC_FREE_RUNNING <= pstr_ADC_cfg -> u8_Trigger_Source)&&(ADC_TIMER_1_CAPTURE >= pstr_ADC_cfg -> u8_Trigger_Source))
    2702:	ea 81       	ldd	r30, Y+2	; 0x02
    2704:	fb 81       	ldd	r31, Y+3	; 0x03
    2706:	85 81       	ldd	r24, Z+5	; 0x05
    2708:	81 3e       	cpi	r24, 0xE1	; 225
    270a:	c0 f4       	brcc	.+48     	; 0x273c <ADC_Init+0x1e6>
			{
				/* Enable ADC Auto Trigger Mode */
				SET_BIT(ADCSRA, ADATE);
    270c:	a6 e2       	ldi	r26, 0x26	; 38
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e6 e2       	ldi	r30, 0x26	; 38
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	80 62       	ori	r24, 0x20	; 32
    2718:	8c 93       	st	X, r24

				/* ADC Auto Trigger Source */
				CLEAR_MASK(SFIOR, ADC_TRIGGER_MASK);
    271a:	a0 e5       	ldi	r26, 0x50	; 80
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e0 e5       	ldi	r30, 0x50	; 80
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8c 93       	st	X, r24
				SET_MASK(SFIOR, pstr_ADC_cfg -> u8_Trigger_Source);
    2726:	a0 e5       	ldi	r26, 0x50	; 80
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e0 e5       	ldi	r30, 0x50	; 80
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	90 81       	ld	r25, Z
    2730:	ea 81       	ldd	r30, Y+2	; 0x02
    2732:	fb 81       	ldd	r31, Y+3	; 0x03
    2734:	85 81       	ldd	r24, Z+5	; 0x05
    2736:	89 2b       	or	r24, r25
    2738:	8c 93       	st	X, r24
    273a:	0f c0       	rjmp	.+30     	; 0x275a <ADC_Init+0x204>
			}
			else if(ADC_MANUAL_TRIGGER == pstr_ADC_cfg -> u8_Trigger_Source)
    273c:	ea 81       	ldd	r30, Y+2	; 0x02
    273e:	fb 81       	ldd	r31, Y+3	; 0x03
    2740:	85 81       	ldd	r24, Z+5	; 0x05
    2742:	8f 3f       	cpi	r24, 0xFF	; 255
    2744:	41 f4       	brne	.+16     	; 0x2756 <ADC_Init+0x200>
			{
				/* Disable ADC Auto Trigger Mode */
				CLEAR_BIT(ADCSRA, ADATE);
    2746:	a6 e2       	ldi	r26, 0x26	; 38
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e6 e2       	ldi	r30, 0x26	; 38
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8f 7d       	andi	r24, 0xDF	; 223
    2752:	8c 93       	st	X, r24
    2754:	02 c0       	rjmp	.+4      	; 0x275a <ADC_Init+0x204>
			}
			else
			{
				au8_DET = E_ADC_TRIGGER_MODE;
    2756:	8c e2       	ldi	r24, 0x2C	; 44
    2758:	89 83       	std	Y+1, r24	; 0x01
			}

			/* ADC enable */
			if(ERROR_OK == au8_DET)
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	88 23       	and	r24, r24
    275e:	81 f4       	brne	.+32     	; 0x2780 <ADC_Init+0x22a>
			{
				SET_BIT(ADCSRA, ADEN);
    2760:	a6 e2       	ldi	r26, 0x26	; 38
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e6 e2       	ldi	r30, 0x26	; 38
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	80 68       	ori	r24, 0x80	; 128
    276c:	8c 93       	st	X, r24
				gu8_ADC_InitFlag = ADC_IS_INTIALIZED;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	80 93 c0 00 	sts	0x00C0, r24
    2774:	05 c0       	rjmp	.+10     	; 0x2780 <ADC_Init+0x22a>
				/* return last detected error */
			}
		}
		else
		{
			au8_DET = E_ADC_CHANNEL;
    2776:	89 e2       	ldi	r24, 0x29	; 41
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <ADC_Init+0x22a>
		}
	}
	else
	{
		/*Handling of using null pointer*/
		au8_DET = E_NULL_PTR ;
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Return the Development Error Tracer if it's OK or not */
	return au8_DET ;
    2780:	89 81       	ldd	r24, Y+1	; 0x01
}
    2782:	27 96       	adiw	r28, 0x07	; 7
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <ADC_Deinit>:
/* brief!  ADC Deinitialization                                                        */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t ADC_Deinit(void)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	0f 92       	push	r0
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    279e:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_IS_INTIALIZED == gu8_ADC_InitFlag)
    27a0:	80 91 c0 00 	lds	r24, 0x00C0
    27a4:	81 30       	cpi	r24, 0x01	; 1
    27a6:	81 f4       	brne	.+32     	; 0x27c8 <ADC_Deinit+0x34>
	{
		CLEAR_BIT(ADCSRA, ADEN);  /* ADC Disable */
    27a8:	a6 e2       	ldi	r26, 0x26	; 38
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e6 e2       	ldi	r30, 0x26	; 38
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	8f 77       	andi	r24, 0x7F	; 127
    27b4:	8c 93       	st	X, r24

		gu8_ADC_InitFlag = ADC_NOT_INTIALIZED;
    27b6:	10 92 c0 00 	sts	0x00C0, r1
		gu8_LeftRight_Adjust = DUMMY;
    27ba:	8f ef       	ldi	r24, 0xFF	; 255
    27bc:	80 93 b4 00 	sts	0x00B4, r24
		u8_ADC_InterruptMode = DUMMY;
    27c0:	8f ef       	ldi	r24, 0xFF	; 255
    27c2:	80 93 b5 00 	sts	0x00B5, r24
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <ADC_Deinit+0x38>
	}
	else
	{
		/* Handling ADC Initialization error */
		au8_DET = E_ADC_NOT_INTIALIZED;
    27c8:	8e e2       	ldi	r24, 0x2E	; 46
    27ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_DET;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ce:	0f 90       	pop	r0
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <ADC_Change_Channel>:
/* brief!  ADC Change the configuration of the ADC to a certain channel                */
/* param!  u8 (i/p) The desired channel to be changed                                  */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t ADC_Change_Channel(uint8_t au8_Channel)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	00 d0       	rcall	.+0      	; 0x27dc <ADC_Change_Channel+0x6>
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    27e2:	19 82       	std	Y+1, r1	; 0x01

	/* Check ADC Initialization */
	if(ADC_IS_INTIALIZED == gu8_ADC_InitFlag)
    27e4:	80 91 c0 00 	lds	r24, 0x00C0
    27e8:	81 30       	cpi	r24, 0x01	; 1
    27ea:	d1 f4       	brne	.+52     	; 0x2820 <ADC_Change_Channel+0x4a>
	{
		/* Check ADC Channel Range */
		if((ADC_CH0 <= au8_Channel)&&(ADC_CH7 >= au8_Channel))
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	88 30       	cpi	r24, 0x08	; 8
    27f0:	a0 f4       	brcc	.+40     	; 0x281a <ADC_Change_Channel+0x44>
		{
			/* Initialize ADC pin as input pin */
			DIO_INIT_Pin(au8_Channel, INPUT_PIN);
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_INIT_Pin>

			/* Chose Channel to read */
			CLEAR_MASK(ADMUX, ADC_CH_MASK);
    27fa:	a7 e2       	ldi	r26, 0x27	; 39
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e7 e2       	ldi	r30, 0x27	; 39
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 7e       	andi	r24, 0xE0	; 224
    2806:	8c 93       	st	X, r24
			SET_MASK(ADMUX, au8_Channel);
    2808:	a7 e2       	ldi	r26, 0x27	; 39
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e7 e2       	ldi	r30, 0x27	; 39
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	90 81       	ld	r25, Z
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	89 2b       	or	r24, r25
    2816:	8c 93       	st	X, r24
    2818:	05 c0       	rjmp	.+10     	; 0x2824 <ADC_Change_Channel+0x4e>
		}
		else
		{
			/* Handle Entering Wrong Channel */
			au8_DET = E_ADC_CHANNEL;
    281a:	89 e2       	ldi	r24, 0x29	; 41
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <ADC_Change_Channel+0x4e>
		}
	}
	else
	{
		/* Handling ADC Initialization error */
		au8_DET = E_ADC_NOT_INTIALIZED;
    2820:	8e e2       	ldi	r24, 0x2E	; 46
    2822:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_DET ;
    2824:	89 81       	ldd	r24, Y+1	; 0x01
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <ADC_Start_Conversion>:
/* brief!  ADC Start Conversion                                                        */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t ADC_Start_Conversion(void)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	0f 92       	push	r0
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    283a:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_IS_INTIALIZED == gu8_ADC_InitFlag)
    283c:	80 91 c0 00 	lds	r24, 0x00C0
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	41 f4       	brne	.+16     	; 0x2854 <ADC_Start_Conversion+0x24>
	{
		SET_BIT(ADCSRA, ADSC);  /* ADC start conversion */
    2844:	a6 e2       	ldi	r26, 0x26	; 38
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e6 e2       	ldi	r30, 0x26	; 38
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	80 64       	ori	r24, 0x40	; 64
    2850:	8c 93       	st	X, r24
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <ADC_Start_Conversion+0x28>
	}
	else
	{
		/* Handling ADC Initialization error */
		au8_DET = E_ADC_NOT_INTIALIZED;
    2854:	8e e2       	ldi	r24, 0x2E	; 46
    2856:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_DET;
    2858:	89 81       	ldd	r24, Y+1	; 0x01
}
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <ADC_Stop_Conversion>:
/* brief!  ADC Stop Conversion                                                        */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t ADC_Stop_Conversion(void)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    286c:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_IS_INTIALIZED == gu8_ADC_InitFlag)
    286e:	80 91 c0 00 	lds	r24, 0x00C0
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	41 f4       	brne	.+16     	; 0x2886 <ADC_Stop_Conversion+0x24>
	{
		CLEAR_BIT(ADCSRA, ADSC);  /* ADC start conversion */
    2876:	a6 e2       	ldi	r26, 0x26	; 38
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e6 e2       	ldi	r30, 0x26	; 38
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	8f 7b       	andi	r24, 0xBF	; 191
    2882:	8c 93       	st	X, r24
    2884:	02 c0       	rjmp	.+4      	; 0x288a <ADC_Stop_Conversion+0x28>
	}
	else
	{
		/* Handling ADC Initialization error */
		au8_DET = E_ADC_NOT_INTIALIZED;
    2886:	8e e2       	ldi	r24, 0x2E	; 46
    2888:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_DET;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <ADC_Read>:
/* brief!  ADC Read Value	                                                           */
/* param!  (o/p) pu16 pointer to u16 that hold ADC Value                               */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t ADC_Read(uint16_t volatile *pu16_Digital_Reading)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	27 97       	sbiw	r28, 0x07	; 7
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	9b 83       	std	Y+3, r25	; 0x03
    28aa:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    28ac:	19 82       	std	Y+1, r1	; 0x01

	switch(u8_ADC_InterruptMode)
    28ae:	80 91 b5 00 	lds	r24, 0x00B5
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	3f 83       	std	Y+7, r19	; 0x07
    28b8:	2e 83       	std	Y+6, r18	; 0x06
    28ba:	8e 81       	ldd	r24, Y+6	; 0x06
    28bc:	9f 81       	ldd	r25, Y+7	; 0x07
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <ADC_Read+0x30>
    28c2:	59 c0       	rjmp	.+178    	; 0x2976 <ADC_Read+0xe2>
    28c4:	2e 81       	ldd	r18, Y+6	; 0x06
    28c6:	3f 81       	ldd	r19, Y+7	; 0x07
    28c8:	21 30       	cpi	r18, 0x01	; 1
    28ca:	31 05       	cpc	r19, r1
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <ADC_Read+0x3c>
    28ce:	51 c0       	rjmp	.+162    	; 0x2972 <ADC_Read+0xde>
	{
		case ADC_POLLING:

			while(GET_BIT(ADCSRA, ADIF) == NULL);
    28d0:	e6 e2       	ldi	r30, 0x26	; 38
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	82 95       	swap	r24
    28d8:	8f 70       	andi	r24, 0x0F	; 15
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	81 70       	andi	r24, 0x01	; 1
    28e0:	90 70       	andi	r25, 0x00	; 0
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	a9 f3       	breq	.-22     	; 0x28d0 <ADC_Read+0x3c>

			switch(gu8_LeftRight_Adjust)
    28e6:	80 91 b4 00 	lds	r24, 0x00B4
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3d 83       	std	Y+5, r19	; 0x05
    28f0:	2c 83       	std	Y+4, r18	; 0x04
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	31 f0       	breq	.+12     	; 0x2906 <ADC_Read+0x72>
    28fa:	2c 81       	ldd	r18, Y+4	; 0x04
    28fc:	3d 81       	ldd	r19, Y+5	; 0x05
    28fe:	21 30       	cpi	r18, 0x01	; 1
    2900:	31 05       	cpc	r19, r1
    2902:	a1 f0       	breq	.+40     	; 0x292c <ADC_Read+0x98>
    2904:	2c c0       	rjmp	.+88     	; 0x295e <ADC_Read+0xca>
			{
				case ADC_RIGHT_ADJUST:
					*pu16_Digital_Reading  = ((uint16_t) ADCL) | ((uint16_t)(ADCH << 8U));
    2906:	e4 e2       	ldi	r30, 0x24	; 36
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	28 2f       	mov	r18, r24
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	e5 e2       	ldi	r30, 0x25	; 37
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	98 2f       	mov	r25, r24
    291c:	88 27       	eor	r24, r24
    291e:	82 2b       	or	r24, r18
    2920:	93 2b       	or	r25, r19
    2922:	ea 81       	ldd	r30, Y+2	; 0x02
    2924:	fb 81       	ldd	r31, Y+3	; 0x03
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	1b c0       	rjmp	.+54     	; 0x2962 <ADC_Read+0xce>
				break;

				case ADC_LEFT_ADJUST:
					*pu16_Digital_Reading  = ((uint16_t)(ADCL >> 6U)) | ((uint16_t)(ADCH << 2U));
    292c:	e4 e2       	ldi	r30, 0x24	; 36
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	82 95       	swap	r24
    2934:	86 95       	lsr	r24
    2936:	86 95       	lsr	r24
    2938:	83 70       	andi	r24, 0x03	; 3
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	e5 e2       	ldi	r30, 0x25	; 37
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	82 2b       	or	r24, r18
    2952:	93 2b       	or	r25, r19
    2954:	ea 81       	ldd	r30, Y+2	; 0x02
    2956:	fb 81       	ldd	r31, Y+3	; 0x03
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <ADC_Read+0xce>
				break;

				default:
					au8_DET = E_ADC_ADJUST;
    295e:	8c e2       	ldi	r24, 0x2C	; 44
    2960:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			/* clear ADC Flag */
			SET_BIT(ADCSRA, ADIF);
    2962:	a6 e2       	ldi	r26, 0x26	; 38
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e6 e2       	ldi	r30, 0x26	; 38
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	80 61       	ori	r24, 0x10	; 16
    296e:	8c 93       	st	X, r24
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <ADC_Read+0xe2>
		case ADC_INTERRUPT:
			/* do nothing */
		break;

		default :
			au8_DET = E_ADC_INTERRUPT_MODE;
    2972:	8c e2       	ldi	r24, 0x2C	; 44
    2974:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_DET;
    2976:	89 81       	ldd	r24, Y+1	; 0x01
}
    2978:	27 96       	adiw	r28, 0x07	; 7
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <ADC_SetCallBack>:
/* brief!  ADC Set the function that will execute in the ISR                           */
/* param!  pointer to function that will execute in the ISR                            */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t ADC_SetCallBack(pfunc_u8_u8_t pfun_ADC_App)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	00 d0       	rcall	.+0      	; 0x2990 <ADC_SetCallBack+0x6>
    2990:	0f 92       	push	r0
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	9b 83       	std	Y+3, r25	; 0x03
    2998:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
    299a:	19 82       	std	Y+1, r1	; 0x01

	if (NULL != pfun_ADC_App)
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	39 f0       	breq	.+14     	; 0x29b2 <ADC_SetCallBack+0x28>
	{
		pfun_ADC_CallBack = pfun_ADC_App;
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	90 93 c2 00 	sts	0x00C2, r25
    29ac:	80 93 c1 00 	sts	0x00C1, r24
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <ADC_SetCallBack+0x2c>
	}
	else
	{
		/* Handling of passing null pointer */
		au8_Det = E_NULL_PTR ;
    29b2:	82 e0       	ldi	r24, 0x02	; 2
    29b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return au8_Det;
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <__vector_16>:
/* brief!  ADC interrupt handling                                             	       */
/* param!  void                                                                        */
/* return! void                                                                        */
/***************************************************************************************/
ISR(ADC_vect)
{
    29c4:	1f 92       	push	r1
    29c6:	0f 92       	push	r0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	0f 92       	push	r0
    29cc:	11 24       	eor	r1, r1
    29ce:	2f 93       	push	r18
    29d0:	3f 93       	push	r19
    29d2:	4f 93       	push	r20
    29d4:	5f 93       	push	r21
    29d6:	6f 93       	push	r22
    29d8:	7f 93       	push	r23
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	af 93       	push	r26
    29e0:	bf 93       	push	r27
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	if (NULL != pfun_ADC_CallBack)
    29ee:	80 91 c1 00 	lds	r24, 0x00C1
    29f2:	90 91 c2 00 	lds	r25, 0x00C2
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	69 f0       	breq	.+26     	; 0x2a14 <__vector_16+0x50>
	{
		pfun_ADC_CallBack(ADCL, ADCH);
    29fa:	20 91 c1 00 	lds	r18, 0x00C1
    29fe:	30 91 c2 00 	lds	r19, 0x00C2
    2a02:	e4 e2       	ldi	r30, 0x24	; 36
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	e5 e2       	ldi	r30, 0x25	; 37
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	90 81       	ld	r25, Z
    2a0e:	69 2f       	mov	r22, r25
    2a10:	f9 01       	movw	r30, r18
    2a12:	09 95       	icall
	}
}
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	ff 91       	pop	r31
    2a1a:	ef 91       	pop	r30
    2a1c:	bf 91       	pop	r27
    2a1e:	af 91       	pop	r26
    2a20:	9f 91       	pop	r25
    2a22:	8f 91       	pop	r24
    2a24:	7f 91       	pop	r23
    2a26:	6f 91       	pop	r22
    2a28:	5f 91       	pop	r21
    2a2a:	4f 91       	pop	r20
    2a2c:	3f 91       	pop	r19
    2a2e:	2f 91       	pop	r18
    2a30:	0f 90       	pop	r0
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	0f 90       	pop	r0
    2a36:	1f 90       	pop	r1
    2a38:	18 95       	reti

00002a3a <TFT_Write_Data_Byte>:
										WRITE_DATA(data);\
										SET_BIT(TFT_CTRL_PORT,TFT_CS);\
										}while(0)
*/
static void TFT_Write_Data_Byte(uint8_t au8_Data)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	0f 92       	push	r0
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	89 83       	std	Y+1, r24	; 0x01
	// CS_ACTIVE
	CLEAR_BIT(TFT_CTRL_PORT,TFT_CS);
    2a46:	a2 e3       	ldi	r26, 0x32	; 50
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e2 e3       	ldi	r30, 0x32	; 50
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	8f 7b       	andi	r24, 0xBF	; 191
    2a52:	8c 93       	st	X, r24

	// CD/RS DATA
	SET_BIT(TFT_CTRL_PORT,TFT_RS);
    2a54:	a2 e3       	ldi	r26, 0x32	; 50
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e2 e3       	ldi	r30, 0x32	; 50
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	80 62       	ori	r24, 0x20	; 32
    2a60:	8c 93       	st	X, r24

	WRITE_DATA(au8_Data);
    2a62:	e5 e3       	ldi	r30, 0x35	; 53
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	80 83       	st	Z, r24
    2a6a:	a2 e3       	ldi	r26, 0x32	; 50
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e2 e3       	ldi	r30, 0x32	; 50
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	8f 7e       	andi	r24, 0xEF	; 239
    2a76:	8c 93       	st	X, r24
    2a78:	a2 e3       	ldi	r26, 0x32	; 50
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e2 e3       	ldi	r30, 0x32	; 50
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	80 61       	ori	r24, 0x10	; 16
    2a84:	8c 93       	st	X, r24

	// CS_IDLE
	SET_BIT(TFT_CTRL_PORT,TFT_CS);
    2a86:	a2 e3       	ldi	r26, 0x32	; 50
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e2 e3       	ldi	r30, 0x32	; 50
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 64       	ori	r24, 0x40	; 64
    2a92:	8c 93       	st	X, r24
}
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <TFT_Write_Cmd_Byte>:
	// CS_IDLE
	SET_BIT(TFT_CTRL_PORT,TFT_CS);
}
*/
static void TFT_Write_Cmd_Byte(uint8_t au8_cmd)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	0f 92       	push	r0
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	// CS_ACTIVE
	CLEAR_BIT(TFT_CTRL_PORT,TFT_CS);
    2aa8:	a2 e3       	ldi	r26, 0x32	; 50
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e2 e3       	ldi	r30, 0x32	; 50
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8f 7b       	andi	r24, 0xBF	; 191
    2ab4:	8c 93       	st	X, r24

	// CD/RS COMMAND
	CLEAR_BIT(TFT_CTRL_PORT,TFT_RS);
    2ab6:	a2 e3       	ldi	r26, 0x32	; 50
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e2 e3       	ldi	r30, 0x32	; 50
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	8f 7d       	andi	r24, 0xDF	; 223
    2ac2:	8c 93       	st	X, r24

	WRITE_DATA(au8_cmd);
    2ac4:	e5 e3       	ldi	r30, 0x35	; 53
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	a2 e3       	ldi	r26, 0x32	; 50
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e2 e3       	ldi	r30, 0x32	; 50
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	8f 7e       	andi	r24, 0xEF	; 239
    2ad8:	8c 93       	st	X, r24
    2ada:	a2 e3       	ldi	r26, 0x32	; 50
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e2 e3       	ldi	r30, 0x32	; 50
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	80 61       	ori	r24, 0x10	; 16
    2ae6:	8c 93       	st	X, r24

	// CS_IDLE
	SET_BIT(TFT_CTRL_PORT,TFT_CS);
    2ae8:	a2 e3       	ldi	r26, 0x32	; 50
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e2 e3       	ldi	r30, 0x32	; 50
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	80 64       	ori	r24, 0x40	; 64
    2af4:	8c 93       	st	X, r24
}
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <TFT_Write_Cmd_Str_Word>:
		TFT_Write_Data_Byte(*au8_Data_Byte ++);;
	}
}
*/
static void TFT_Write_Cmd_Str_Word(uint8_t au8_cmd, uint8_t au8_Size, uint16_t * pu16_Data_Word)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <TFT_Write_Cmd_Str_Word+0x6>
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <TFT_Write_Cmd_Str_Word+0x8>
    2b06:	0f 92       	push	r0
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	6a 83       	std	Y+2, r22	; 0x02
    2b10:	5c 83       	std	Y+4, r21	; 0x04
    2b12:	4b 83       	std	Y+3, r20	; 0x03
	TFT_Write_Cmd_Byte(au8_cmd);
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
    2b1a:	4b c0       	rjmp	.+150    	; 0x2bb2 <TFT_Write_Cmd_Str_Word+0xb4>

	while (au8_Size-- > NULL)
	{
		TFT_Write_Data_Word(*pu16_Data_Word ++);
    2b1c:	a2 e3       	ldi	r26, 0x32	; 50
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e2 e3       	ldi	r30, 0x32	; 50
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	8f 7b       	andi	r24, 0xBF	; 191
    2b28:	8c 93       	st	X, r24
    2b2a:	a2 e3       	ldi	r26, 0x32	; 50
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e2 e3       	ldi	r30, 0x32	; 50
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	80 62       	ori	r24, 0x20	; 32
    2b36:	8c 93       	st	X, r24
    2b38:	a5 e3       	ldi	r26, 0x35	; 53
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	89 2f       	mov	r24, r25
    2b46:	99 27       	eor	r25, r25
    2b48:	8c 93       	st	X, r24
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4e:	02 96       	adiw	r24, 0x02	; 2
    2b50:	9c 83       	std	Y+4, r25	; 0x04
    2b52:	8b 83       	std	Y+3, r24	; 0x03
    2b54:	a2 e3       	ldi	r26, 0x32	; 50
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e2 e3       	ldi	r30, 0x32	; 50
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8f 7e       	andi	r24, 0xEF	; 239
    2b60:	8c 93       	st	X, r24
    2b62:	a2 e3       	ldi	r26, 0x32	; 50
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e2 e3       	ldi	r30, 0x32	; 50
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	80 61       	ori	r24, 0x10	; 16
    2b6e:	8c 93       	st	X, r24
    2b70:	a5 e3       	ldi	r26, 0x35	; 53
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	eb 81       	ldd	r30, Y+3	; 0x03
    2b76:	fc 81       	ldd	r31, Y+4	; 0x04
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	8c 93       	st	X, r24
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	9c 81       	ldd	r25, Y+4	; 0x04
    2b82:	02 96       	adiw	r24, 0x02	; 2
    2b84:	9c 83       	std	Y+4, r25	; 0x04
    2b86:	8b 83       	std	Y+3, r24	; 0x03
    2b88:	a2 e3       	ldi	r26, 0x32	; 50
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e2 e3       	ldi	r30, 0x32	; 50
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	8f 7e       	andi	r24, 0xEF	; 239
    2b94:	8c 93       	st	X, r24
    2b96:	a2 e3       	ldi	r26, 0x32	; 50
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e2 e3       	ldi	r30, 0x32	; 50
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 61       	ori	r24, 0x10	; 16
    2ba2:	8c 93       	st	X, r24
    2ba4:	a2 e3       	ldi	r26, 0x32	; 50
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e2 e3       	ldi	r30, 0x32	; 50
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	80 64       	ori	r24, 0x40	; 64
    2bb0:	8c 93       	st	X, r24
*/
static void TFT_Write_Cmd_Str_Word(uint8_t au8_cmd, uint8_t au8_Size, uint16_t * pu16_Data_Word)
{
	TFT_Write_Cmd_Byte(au8_cmd);

	while (au8_Size-- > NULL)
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	8d 83       	std	Y+5, r24	; 0x05
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	88 23       	and	r24, r24
    2bba:	11 f0       	breq	.+4      	; 0x2bc0 <TFT_Write_Cmd_Str_Word+0xc2>
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc4:	91 50       	subi	r25, 0x01	; 1
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	88 23       	and	r24, r24
    2bca:	09 f0       	breq	.+2      	; 0x2bce <TFT_Write_Cmd_Str_Word+0xd0>
    2bcc:	a7 cf       	rjmp	.-178    	; 0x2b1c <TFT_Write_Cmd_Str_Word+0x1e>
	{
		TFT_Write_Data_Word(*pu16_Data_Word ++);
	}
}
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <TFT_Draw_Pixel>:

static void TFT_Draw_Pixel(uint16_t au16_X, uint16_t au16_Y, uint16_t au16_Color)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <TFT_Draw_Pixel+0x6>
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <TFT_Draw_Pixel+0x8>
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <TFT_Draw_Pixel+0xa>
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	7c 83       	std	Y+4, r23	; 0x04
    2bf2:	6b 83       	std	Y+3, r22	; 0x03
    2bf4:	5e 83       	std	Y+6, r21	; 0x06
    2bf6:	4d 83       	std	Y+5, r20	; 0x05


	if ((NULL > au16_X) || (NULL > au16_Y) || (gu16_TFT_W <= au16_X) || (gu16_TFT_H <= au16_Y))
    2bf8:	20 91 b6 00 	lds	r18, 0x00B6
    2bfc:	30 91 b7 00 	lds	r19, 0x00B7
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	82 17       	cp	r24, r18
    2c06:	93 07       	cpc	r25, r19
    2c08:	08 f0       	brcs	.+2      	; 0x2c0c <TFT_Draw_Pixel+0x2e>
    2c0a:	08 c1       	rjmp	.+528    	; 0x2e1c <TFT_Draw_Pixel+0x23e>
    2c0c:	20 91 b8 00 	lds	r18, 0x00B8
    2c10:	30 91 b9 00 	lds	r19, 0x00B9
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	82 17       	cp	r24, r18
    2c1a:	93 07       	cpc	r25, r19
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <TFT_Draw_Pixel+0x42>
    2c1e:	fe c0       	rjmp	.+508    	; 0x2e1c <TFT_Draw_Pixel+0x23e>
	{
		return;
	}

	TFT_Write_Cmd_Byte(TFT_CASET);
    2c20:	8a e2       	ldi	r24, 0x2A	; 42
    2c22:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Word(au16_X);
    2c26:	a2 e3       	ldi	r26, 0x32	; 50
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e2 e3       	ldi	r30, 0x32	; 50
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	8f 7b       	andi	r24, 0xBF	; 191
    2c32:	8c 93       	st	X, r24
    2c34:	a2 e3       	ldi	r26, 0x32	; 50
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e2 e3       	ldi	r30, 0x32	; 50
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 62       	ori	r24, 0x20	; 32
    2c40:	8c 93       	st	X, r24
    2c42:	e5 e3       	ldi	r30, 0x35	; 53
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	89 2f       	mov	r24, r25
    2c4c:	99 27       	eor	r25, r25
    2c4e:	80 83       	st	Z, r24
    2c50:	a2 e3       	ldi	r26, 0x32	; 50
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e2 e3       	ldi	r30, 0x32	; 50
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8f 7e       	andi	r24, 0xEF	; 239
    2c5c:	8c 93       	st	X, r24
    2c5e:	a2 e3       	ldi	r26, 0x32	; 50
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e2 e3       	ldi	r30, 0x32	; 50
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	80 61       	ori	r24, 0x10	; 16
    2c6a:	8c 93       	st	X, r24
    2c6c:	e5 e3       	ldi	r30, 0x35	; 53
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	a2 e3       	ldi	r26, 0x32	; 50
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e2 e3       	ldi	r30, 0x32	; 50
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8f 7e       	andi	r24, 0xEF	; 239
    2c80:	8c 93       	st	X, r24
    2c82:	a2 e3       	ldi	r26, 0x32	; 50
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e2 e3       	ldi	r30, 0x32	; 50
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 61       	ori	r24, 0x10	; 16
    2c8e:	8c 93       	st	X, r24
    2c90:	a2 e3       	ldi	r26, 0x32	; 50
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e2 e3       	ldi	r30, 0x32	; 50
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 64       	ori	r24, 0x40	; 64
    2c9c:	8c 93       	st	X, r24
	TFT_Write_Data_Word(au16_X);
    2c9e:	a2 e3       	ldi	r26, 0x32	; 50
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e2 e3       	ldi	r30, 0x32	; 50
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	8f 7b       	andi	r24, 0xBF	; 191
    2caa:	8c 93       	st	X, r24
    2cac:	a2 e3       	ldi	r26, 0x32	; 50
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e2 e3       	ldi	r30, 0x32	; 50
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	80 62       	ori	r24, 0x20	; 32
    2cb8:	8c 93       	st	X, r24
    2cba:	e5 e3       	ldi	r30, 0x35	; 53
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	89 2f       	mov	r24, r25
    2cc4:	99 27       	eor	r25, r25
    2cc6:	80 83       	st	Z, r24
    2cc8:	a2 e3       	ldi	r26, 0x32	; 50
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e2 e3       	ldi	r30, 0x32	; 50
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8f 7e       	andi	r24, 0xEF	; 239
    2cd4:	8c 93       	st	X, r24
    2cd6:	a2 e3       	ldi	r26, 0x32	; 50
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e2 e3       	ldi	r30, 0x32	; 50
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	80 61       	ori	r24, 0x10	; 16
    2ce2:	8c 93       	st	X, r24
    2ce4:	e5 e3       	ldi	r30, 0x35	; 53
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	80 83       	st	Z, r24
    2cec:	a2 e3       	ldi	r26, 0x32	; 50
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e2 e3       	ldi	r30, 0x32	; 50
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	8f 7e       	andi	r24, 0xEF	; 239
    2cf8:	8c 93       	st	X, r24
    2cfa:	a2 e3       	ldi	r26, 0x32	; 50
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e2 e3       	ldi	r30, 0x32	; 50
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	80 61       	ori	r24, 0x10	; 16
    2d06:	8c 93       	st	X, r24
    2d08:	a2 e3       	ldi	r26, 0x32	; 50
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e2 e3       	ldi	r30, 0x32	; 50
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	80 64       	ori	r24, 0x40	; 64
    2d14:	8c 93       	st	X, r24

	TFT_Write_Cmd_Byte(TFT_PASET);
    2d16:	8b e2       	ldi	r24, 0x2B	; 43
    2d18:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Word(au16_Y);
    2d1c:	a2 e3       	ldi	r26, 0x32	; 50
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e2 e3       	ldi	r30, 0x32	; 50
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	8f 7b       	andi	r24, 0xBF	; 191
    2d28:	8c 93       	st	X, r24
    2d2a:	a2 e3       	ldi	r26, 0x32	; 50
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e2 e3       	ldi	r30, 0x32	; 50
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 62       	ori	r24, 0x20	; 32
    2d36:	8c 93       	st	X, r24
    2d38:	e5 e3       	ldi	r30, 0x35	; 53
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d40:	89 2f       	mov	r24, r25
    2d42:	99 27       	eor	r25, r25
    2d44:	80 83       	st	Z, r24
    2d46:	a2 e3       	ldi	r26, 0x32	; 50
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e2 e3       	ldi	r30, 0x32	; 50
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	8f 7e       	andi	r24, 0xEF	; 239
    2d52:	8c 93       	st	X, r24
    2d54:	a2 e3       	ldi	r26, 0x32	; 50
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e2 e3       	ldi	r30, 0x32	; 50
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	80 61       	ori	r24, 0x10	; 16
    2d60:	8c 93       	st	X, r24
    2d62:	e5 e3       	ldi	r30, 0x35	; 53
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	80 83       	st	Z, r24
    2d6a:	a2 e3       	ldi	r26, 0x32	; 50
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e2 e3       	ldi	r30, 0x32	; 50
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8f 7e       	andi	r24, 0xEF	; 239
    2d76:	8c 93       	st	X, r24
    2d78:	a2 e3       	ldi	r26, 0x32	; 50
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e2 e3       	ldi	r30, 0x32	; 50
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	80 61       	ori	r24, 0x10	; 16
    2d84:	8c 93       	st	X, r24
    2d86:	a2 e3       	ldi	r26, 0x32	; 50
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e2 e3       	ldi	r30, 0x32	; 50
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	80 64       	ori	r24, 0x40	; 64
    2d92:	8c 93       	st	X, r24
	TFT_Write_Data_Word(au16_Y);
    2d94:	a2 e3       	ldi	r26, 0x32	; 50
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e2 e3       	ldi	r30, 0x32	; 50
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	8f 7b       	andi	r24, 0xBF	; 191
    2da0:	8c 93       	st	X, r24
    2da2:	a2 e3       	ldi	r26, 0x32	; 50
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e2 e3       	ldi	r30, 0x32	; 50
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	80 62       	ori	r24, 0x20	; 32
    2dae:	8c 93       	st	X, r24
    2db0:	e5 e3       	ldi	r30, 0x35	; 53
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	89 2f       	mov	r24, r25
    2dba:	99 27       	eor	r25, r25
    2dbc:	80 83       	st	Z, r24
    2dbe:	a2 e3       	ldi	r26, 0x32	; 50
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e2 e3       	ldi	r30, 0x32	; 50
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8f 7e       	andi	r24, 0xEF	; 239
    2dca:	8c 93       	st	X, r24
    2dcc:	a2 e3       	ldi	r26, 0x32	; 50
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e2 e3       	ldi	r30, 0x32	; 50
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	80 61       	ori	r24, 0x10	; 16
    2dd8:	8c 93       	st	X, r24
    2dda:	e5 e3       	ldi	r30, 0x35	; 53
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	80 83       	st	Z, r24
    2de2:	a2 e3       	ldi	r26, 0x32	; 50
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e2 e3       	ldi	r30, 0x32	; 50
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	8f 7e       	andi	r24, 0xEF	; 239
    2dee:	8c 93       	st	X, r24
    2df0:	a2 e3       	ldi	r26, 0x32	; 50
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e2 e3       	ldi	r30, 0x32	; 50
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 61       	ori	r24, 0x10	; 16
    2dfc:	8c 93       	st	X, r24
    2dfe:	a2 e3       	ldi	r26, 0x32	; 50
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e2 e3       	ldi	r30, 0x32	; 50
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	80 64       	ori	r24, 0x40	; 64
    2e0a:	8c 93       	st	X, r24

	TFT_Write_Cmd_Str_Word(TFT_RAMWR, 1U, &au16_Color);
    2e0c:	9e 01       	movw	r18, r28
    2e0e:	2b 5f       	subi	r18, 0xFB	; 251
    2e10:	3f 4f       	sbci	r19, 0xFF	; 255
    2e12:	8c e2       	ldi	r24, 0x2C	; 44
    2e14:	61 e0       	ldi	r22, 0x01	; 1
    2e16:	a9 01       	movw	r20, r18
    2e18:	0e 94 7f 15 	call	0x2afe	; 0x2afe <TFT_Write_Cmd_Str_Word>
}
    2e1c:	26 96       	adiw	r28, 0x06	; 6
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <TFT_SetAddrWindow>:

static void TFT_SetAddrWindow(uint16_t au16_X, uint16_t au16_Y, uint16_t au16_X1, uint16_t au16_Y1)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	28 97       	sbiw	r28, 0x08	; 8
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	7c 83       	std	Y+4, r23	; 0x04
    2e48:	6b 83       	std	Y+3, r22	; 0x03
    2e4a:	5e 83       	std	Y+6, r21	; 0x06
    2e4c:	4d 83       	std	Y+5, r20	; 0x05
    2e4e:	38 87       	std	Y+8, r19	; 0x08
    2e50:	2f 83       	std	Y+7, r18	; 0x07
	TFT_Write_Cmd_Byte(TFT_CASET);
    2e52:	8a e2       	ldi	r24, 0x2A	; 42
    2e54:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Word(au16_X);
    2e58:	a2 e3       	ldi	r26, 0x32	; 50
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e2 e3       	ldi	r30, 0x32	; 50
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	8f 7b       	andi	r24, 0xBF	; 191
    2e64:	8c 93       	st	X, r24
    2e66:	a2 e3       	ldi	r26, 0x32	; 50
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e2 e3       	ldi	r30, 0x32	; 50
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 62       	ori	r24, 0x20	; 32
    2e72:	8c 93       	st	X, r24
    2e74:	e5 e3       	ldi	r30, 0x35	; 53
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	89 2f       	mov	r24, r25
    2e7e:	99 27       	eor	r25, r25
    2e80:	80 83       	st	Z, r24
    2e82:	a2 e3       	ldi	r26, 0x32	; 50
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e2 e3       	ldi	r30, 0x32	; 50
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	8f 7e       	andi	r24, 0xEF	; 239
    2e8e:	8c 93       	st	X, r24
    2e90:	a2 e3       	ldi	r26, 0x32	; 50
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	e2 e3       	ldi	r30, 0x32	; 50
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	80 61       	ori	r24, 0x10	; 16
    2e9c:	8c 93       	st	X, r24
    2e9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	a2 e3       	ldi	r26, 0x32	; 50
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e2 e3       	ldi	r30, 0x32	; 50
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 7e       	andi	r24, 0xEF	; 239
    2eb2:	8c 93       	st	X, r24
    2eb4:	a2 e3       	ldi	r26, 0x32	; 50
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e2 e3       	ldi	r30, 0x32	; 50
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	80 61       	ori	r24, 0x10	; 16
    2ec0:	8c 93       	st	X, r24
    2ec2:	a2 e3       	ldi	r26, 0x32	; 50
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e2 e3       	ldi	r30, 0x32	; 50
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	80 64       	ori	r24, 0x40	; 64
    2ece:	8c 93       	st	X, r24
	TFT_Write_Data_Word(au16_X1);
    2ed0:	a2 e3       	ldi	r26, 0x32	; 50
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e2 e3       	ldi	r30, 0x32	; 50
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	8f 7b       	andi	r24, 0xBF	; 191
    2edc:	8c 93       	st	X, r24
    2ede:	a2 e3       	ldi	r26, 0x32	; 50
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	e2 e3       	ldi	r30, 0x32	; 50
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	80 62       	ori	r24, 0x20	; 32
    2eea:	8c 93       	st	X, r24
    2eec:	e5 e3       	ldi	r30, 0x35	; 53
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	89 2f       	mov	r24, r25
    2ef6:	99 27       	eor	r25, r25
    2ef8:	80 83       	st	Z, r24
    2efa:	a2 e3       	ldi	r26, 0x32	; 50
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e2 e3       	ldi	r30, 0x32	; 50
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	8f 7e       	andi	r24, 0xEF	; 239
    2f06:	8c 93       	st	X, r24
    2f08:	a2 e3       	ldi	r26, 0x32	; 50
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	e2 e3       	ldi	r30, 0x32	; 50
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	80 61       	ori	r24, 0x10	; 16
    2f14:	8c 93       	st	X, r24
    2f16:	e5 e3       	ldi	r30, 0x35	; 53
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	80 83       	st	Z, r24
    2f1e:	a2 e3       	ldi	r26, 0x32	; 50
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e2 e3       	ldi	r30, 0x32	; 50
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	8f 7e       	andi	r24, 0xEF	; 239
    2f2a:	8c 93       	st	X, r24
    2f2c:	a2 e3       	ldi	r26, 0x32	; 50
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e2 e3       	ldi	r30, 0x32	; 50
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	80 61       	ori	r24, 0x10	; 16
    2f38:	8c 93       	st	X, r24
    2f3a:	a2 e3       	ldi	r26, 0x32	; 50
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e2 e3       	ldi	r30, 0x32	; 50
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	80 64       	ori	r24, 0x40	; 64
    2f46:	8c 93       	st	X, r24

	TFT_Write_Cmd_Byte(TFT_PASET);
    2f48:	8b e2       	ldi	r24, 0x2B	; 43
    2f4a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Word(au16_Y);
    2f4e:	a2 e3       	ldi	r26, 0x32	; 50
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e2 e3       	ldi	r30, 0x32	; 50
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	8f 7b       	andi	r24, 0xBF	; 191
    2f5a:	8c 93       	st	X, r24
    2f5c:	a2 e3       	ldi	r26, 0x32	; 50
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e2 e3       	ldi	r30, 0x32	; 50
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	80 62       	ori	r24, 0x20	; 32
    2f68:	8c 93       	st	X, r24
    2f6a:	e5 e3       	ldi	r30, 0x35	; 53
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	9c 81       	ldd	r25, Y+4	; 0x04
    2f72:	89 2f       	mov	r24, r25
    2f74:	99 27       	eor	r25, r25
    2f76:	80 83       	st	Z, r24
    2f78:	a2 e3       	ldi	r26, 0x32	; 50
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e2 e3       	ldi	r30, 0x32	; 50
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	8f 7e       	andi	r24, 0xEF	; 239
    2f84:	8c 93       	st	X, r24
    2f86:	a2 e3       	ldi	r26, 0x32	; 50
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e2 e3       	ldi	r30, 0x32	; 50
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	80 61       	ori	r24, 0x10	; 16
    2f92:	8c 93       	st	X, r24
    2f94:	e5 e3       	ldi	r30, 0x35	; 53
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	80 83       	st	Z, r24
    2f9c:	a2 e3       	ldi	r26, 0x32	; 50
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e2 e3       	ldi	r30, 0x32	; 50
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8f 7e       	andi	r24, 0xEF	; 239
    2fa8:	8c 93       	st	X, r24
    2faa:	a2 e3       	ldi	r26, 0x32	; 50
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e2 e3       	ldi	r30, 0x32	; 50
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	80 61       	ori	r24, 0x10	; 16
    2fb6:	8c 93       	st	X, r24
    2fb8:	a2 e3       	ldi	r26, 0x32	; 50
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e2 e3       	ldi	r30, 0x32	; 50
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	80 64       	ori	r24, 0x40	; 64
    2fc4:	8c 93       	st	X, r24
	TFT_Write_Data_Word(au16_Y1);
    2fc6:	a2 e3       	ldi	r26, 0x32	; 50
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e2 e3       	ldi	r30, 0x32	; 50
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	8f 7b       	andi	r24, 0xBF	; 191
    2fd2:	8c 93       	st	X, r24
    2fd4:	a2 e3       	ldi	r26, 0x32	; 50
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e2 e3       	ldi	r30, 0x32	; 50
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	80 62       	ori	r24, 0x20	; 32
    2fe0:	8c 93       	st	X, r24
    2fe2:	e5 e3       	ldi	r30, 0x35	; 53
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fe8:	98 85       	ldd	r25, Y+8	; 0x08
    2fea:	89 2f       	mov	r24, r25
    2fec:	99 27       	eor	r25, r25
    2fee:	80 83       	st	Z, r24
    2ff0:	a2 e3       	ldi	r26, 0x32	; 50
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e2 e3       	ldi	r30, 0x32	; 50
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8f 7e       	andi	r24, 0xEF	; 239
    2ffc:	8c 93       	st	X, r24
    2ffe:	a2 e3       	ldi	r26, 0x32	; 50
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e2 e3       	ldi	r30, 0x32	; 50
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	80 61       	ori	r24, 0x10	; 16
    300a:	8c 93       	st	X, r24
    300c:	e5 e3       	ldi	r30, 0x35	; 53
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	8f 81       	ldd	r24, Y+7	; 0x07
    3012:	80 83       	st	Z, r24
    3014:	a2 e3       	ldi	r26, 0x32	; 50
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e2 e3       	ldi	r30, 0x32	; 50
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	8f 7e       	andi	r24, 0xEF	; 239
    3020:	8c 93       	st	X, r24
    3022:	a2 e3       	ldi	r26, 0x32	; 50
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	e2 e3       	ldi	r30, 0x32	; 50
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	80 61       	ori	r24, 0x10	; 16
    302e:	8c 93       	st	X, r24
    3030:	a2 e3       	ldi	r26, 0x32	; 50
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	e2 e3       	ldi	r30, 0x32	; 50
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	80 64       	ori	r24, 0x40	; 64
    303c:	8c 93       	st	X, r24
}
    303e:	28 96       	adiw	r28, 0x08	; 8
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <TFT_Print_Char>:

static void TFT_Print_Char(uint16_t au16_X, uint16_t au16_Y, uint8_t au8_Char_Size, uint8_t au8_Data, uint8_t au8_Mode)
{
    3050:	0f 93       	push	r16
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	6b 97       	sbiw	r28, 0x1b	; 27
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	9c 8b       	std	Y+20, r25	; 0x14
    3068:	8b 8b       	std	Y+19, r24	; 0x13
    306a:	7e 8b       	std	Y+22, r23	; 0x16
    306c:	6d 8b       	std	Y+21, r22	; 0x15
    306e:	4f 8b       	std	Y+23, r20	; 0x17
    3070:	28 8f       	std	Y+24, r18	; 0x18
    3072:	09 8f       	std	Y+25, r16	; 0x19
	uint8_t u8_Count,j,k,temp;

	uint8_t au8_tftChar_W;
	uint8_t au8_tftChar_H;

	switch(au8_Char_Size)
    3074:	8f 89       	ldd	r24, Y+23	; 0x17
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	3b 8f       	std	Y+27, r19	; 0x1b
    307c:	2a 8f       	std	Y+26, r18	; 0x1a
    307e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3080:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3082:	41 30       	cpi	r20, 0x01	; 1
    3084:	51 05       	cpc	r21, r1
    3086:	09 f4       	brne	.+2      	; 0x308a <TFT_Print_Char+0x3a>
    3088:	7a c1       	rjmp	.+756    	; 0x337e <TFT_Print_Char+0x32e>
    308a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    308c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    308e:	62 30       	cpi	r22, 0x02	; 2
    3090:	71 05       	cpc	r23, r1
    3092:	09 f4       	brne	.+2      	; 0x3096 <TFT_Print_Char+0x46>
    3094:	e3 c2       	rjmp	.+1478   	; 0x365c <TFT_Print_Char+0x60c>
    3096:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3098:	9b 8d       	ldd	r25, Y+27	; 0x1b
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	09 f0       	breq	.+2      	; 0x30a0 <TFT_Print_Char+0x50>
    309e:	27 c4       	rjmp	.+2126   	; 0x38ee <TFT_Print_Char+0x89e>
	{
		case TFT_CHAR_18_32 :

			au8_tftChar_W = 18U;
    30a0:	82 e1       	ldi	r24, 0x12	; 18
    30a2:	8e 87       	std	Y+14, r24	; 0x0e
			au8_tftChar_H = 32U;
    30a4:	80 e2       	ldi	r24, 0x20	; 32
    30a6:	8d 87       	std	Y+13, r24	; 0x0d

			if((au16_X > (gu16_TFT_W - au8_tftChar_W))||(au16_Y > (gu16_TFT_H - au8_tftChar_H)))
    30a8:	20 91 b6 00 	lds	r18, 0x00B6
    30ac:	30 91 b7 00 	lds	r19, 0x00B7
    30b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    30b2:	88 2f       	mov	r24, r24
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	28 1b       	sub	r18, r24
    30b8:	39 0b       	sbc	r19, r25
    30ba:	8b 89       	ldd	r24, Y+19	; 0x13
    30bc:	9c 89       	ldd	r25, Y+20	; 0x14
    30be:	28 17       	cp	r18, r24
    30c0:	39 07       	cpc	r19, r25
    30c2:	08 f4       	brcc	.+2      	; 0x30c6 <TFT_Print_Char+0x76>
    30c4:	14 c4       	rjmp	.+2088   	; 0x38ee <TFT_Print_Char+0x89e>
    30c6:	20 91 b8 00 	lds	r18, 0x00B8
    30ca:	30 91 b9 00 	lds	r19, 0x00B9
    30ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d0:	88 2f       	mov	r24, r24
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	28 1b       	sub	r18, r24
    30d6:	39 0b       	sbc	r19, r25
    30d8:	8d 89       	ldd	r24, Y+21	; 0x15
    30da:	9e 89       	ldd	r25, Y+22	; 0x16
    30dc:	28 17       	cp	r18, r24
    30de:	39 07       	cpc	r19, r25
    30e0:	08 f4       	brcc	.+2      	; 0x30e4 <TFT_Print_Char+0x94>
    30e2:	05 c4       	rjmp	.+2058   	; 0x38ee <TFT_Print_Char+0x89e>
			{
				return;
			}
			TFT_SetAddrWindow(au16_X, au16_Y, au16_X+au8_tftChar_W-1, au16_Y+au8_tftChar_H-1);
    30e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	8b 89       	ldd	r24, Y+19	; 0x13
    30ec:	9c 89       	ldd	r25, Y+20	; 0x14
    30ee:	82 0f       	add	r24, r18
    30f0:	93 1f       	adc	r25, r19
    30f2:	ac 01       	movw	r20, r24
    30f4:	41 50       	subi	r20, 0x01	; 1
    30f6:	50 40       	sbci	r21, 0x00	; 0
    30f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	8d 89       	ldd	r24, Y+21	; 0x15
    3100:	9e 89       	ldd	r25, Y+22	; 0x16
    3102:	82 0f       	add	r24, r18
    3104:	93 1f       	adc	r25, r19
    3106:	fc 01       	movw	r30, r24
    3108:	31 97       	sbiw	r30, 0x01	; 1
    310a:	8b 89       	ldd	r24, Y+19	; 0x13
    310c:	9c 89       	ldd	r25, Y+20	; 0x14
    310e:	2d 89       	ldd	r18, Y+21	; 0x15
    3110:	3e 89       	ldd	r19, Y+22	; 0x16
    3112:	b9 01       	movw	r22, r18
    3114:	9f 01       	movw	r18, r30
    3116:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TFT_SetAddrWindow>

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
    311a:	1a 8a       	std	Y+18, r1	; 0x12
    311c:	26 c1       	rjmp	.+588    	; 0x336a <TFT_Print_Char+0x31a>
			{
				for(j=0;j<8;j++)
    311e:	19 8a       	std	Y+17, r1	; 0x11
    3120:	1d c1       	rjmp	.+570    	; 0x335c <TFT_Print_Char+0x30c>
				{
					for(k=0;k<au8_tftChar_W;k++)
    3122:	18 8a       	std	Y+16, r1	; 0x10
    3124:	13 c1       	rjmp	.+550    	; 0x334c <TFT_Print_Char+0x2fc>
					{
						temp = pgm_read_byte(&(Consolas18x32[(au8_Data-' ')*(au8_tftChar_H/8)*au8_tftChar_W+k*(au8_tftChar_H/8)+u8_Count]));          //temp=Consolas18x32[(au8_Data-' ')*(32/8)*18+k*(32/8)+u8_Count];
    3126:	88 8d       	ldd	r24, Y+24	; 0x18
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	9c 01       	movw	r18, r24
    312e:	20 52       	subi	r18, 0x20	; 32
    3130:	30 40       	sbci	r19, 0x00	; 0
    3132:	8d 85       	ldd	r24, Y+13	; 0x0d
    3134:	86 95       	lsr	r24
    3136:	86 95       	lsr	r24
    3138:	86 95       	lsr	r24
    313a:	88 2f       	mov	r24, r24
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a9 01       	movw	r20, r18
    3140:	48 9f       	mul	r20, r24
    3142:	90 01       	movw	r18, r0
    3144:	49 9f       	mul	r20, r25
    3146:	30 0d       	add	r19, r0
    3148:	58 9f       	mul	r21, r24
    314a:	30 0d       	add	r19, r0
    314c:	11 24       	eor	r1, r1
    314e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3150:	88 2f       	mov	r24, r24
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	28 9f       	mul	r18, r24
    3156:	a0 01       	movw	r20, r0
    3158:	29 9f       	mul	r18, r25
    315a:	50 0d       	add	r21, r0
    315c:	38 9f       	mul	r19, r24
    315e:	50 0d       	add	r21, r0
    3160:	11 24       	eor	r1, r1
    3162:	88 89       	ldd	r24, Y+16	; 0x10
    3164:	28 2f       	mov	r18, r24
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	8d 85       	ldd	r24, Y+13	; 0x0d
    316a:	86 95       	lsr	r24
    316c:	86 95       	lsr	r24
    316e:	86 95       	lsr	r24
    3170:	88 2f       	mov	r24, r24
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	bc 01       	movw	r22, r24
    3176:	26 9f       	mul	r18, r22
    3178:	c0 01       	movw	r24, r0
    317a:	27 9f       	mul	r18, r23
    317c:	90 0d       	add	r25, r0
    317e:	36 9f       	mul	r19, r22
    3180:	90 0d       	add	r25, r0
    3182:	11 24       	eor	r1, r1
    3184:	9a 01       	movw	r18, r20
    3186:	28 0f       	add	r18, r24
    3188:	39 1f       	adc	r19, r25
    318a:	8a 89       	ldd	r24, Y+18	; 0x12
    318c:	88 2f       	mov	r24, r24
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	82 0f       	add	r24, r18
    3192:	93 1f       	adc	r25, r19
    3194:	8c 5a       	subi	r24, 0xAC	; 172
    3196:	9f 4f       	sbci	r25, 0xFF	; 255
    3198:	9c 87       	std	Y+12, r25	; 0x0c
    319a:	8b 87       	std	Y+11, r24	; 0x0b
    319c:	eb 85       	ldd	r30, Y+11	; 0x0b
    319e:	fc 85       	ldd	r31, Y+12	; 0x0c
    31a0:	84 91       	lpm	r24, Z+
    31a2:	8a 87       	std	Y+10, r24	; 0x0a
    31a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a6:	8f 87       	std	Y+15, r24	; 0x0f
						if(au8_Mode==TFT_STRING_MODE_BACKGROUND)
    31a8:	89 8d       	ldd	r24, Y+25	; 0x19
    31aa:	88 23       	and	r24, r24
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <TFT_Print_Char+0x160>
    31ae:	96 c0       	rjmp	.+300    	; 0x32dc <TFT_Print_Char+0x28c>
						{
							if(temp&(0x01<<j))
    31b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b2:	28 2f       	mov	r18, r24
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	89 89       	ldd	r24, Y+17	; 0x11
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a9 01       	movw	r20, r18
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <TFT_Print_Char+0x174>
    31c0:	55 95       	asr	r21
    31c2:	47 95       	ror	r20
    31c4:	8a 95       	dec	r24
    31c6:	e2 f7       	brpl	.-8      	; 0x31c0 <TFT_Print_Char+0x170>
    31c8:	ca 01       	movw	r24, r20
    31ca:	81 70       	andi	r24, 0x01	; 1
    31cc:	90 70       	andi	r25, 0x00	; 0
    31ce:	88 23       	and	r24, r24
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <TFT_Print_Char+0x184>
    31d2:	42 c0       	rjmp	.+132    	; 0x3258 <TFT_Print_Char+0x208>
							{
								TFT_Write_Data_Word(gu16_Point_Color);
    31d4:	a2 e3       	ldi	r26, 0x32	; 50
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e2 e3       	ldi	r30, 0x32	; 50
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	8f 7b       	andi	r24, 0xBF	; 191
    31e0:	8c 93       	st	X, r24
    31e2:	a2 e3       	ldi	r26, 0x32	; 50
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e2 e3       	ldi	r30, 0x32	; 50
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	80 62       	ori	r24, 0x20	; 32
    31ee:	8c 93       	st	X, r24
    31f0:	e5 e3       	ldi	r30, 0x35	; 53
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 91 05 07 	lds	r24, 0x0705
    31f8:	90 91 06 07 	lds	r25, 0x0706
    31fc:	89 2f       	mov	r24, r25
    31fe:	99 27       	eor	r25, r25
    3200:	80 83       	st	Z, r24
    3202:	a2 e3       	ldi	r26, 0x32	; 50
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e2 e3       	ldi	r30, 0x32	; 50
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	8f 7e       	andi	r24, 0xEF	; 239
    320e:	8c 93       	st	X, r24
    3210:	a2 e3       	ldi	r26, 0x32	; 50
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e2 e3       	ldi	r30, 0x32	; 50
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	80 61       	ori	r24, 0x10	; 16
    321c:	8c 93       	st	X, r24
    321e:	e5 e3       	ldi	r30, 0x35	; 53
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 91 05 07 	lds	r24, 0x0705
    3226:	90 91 06 07 	lds	r25, 0x0706
    322a:	80 83       	st	Z, r24
    322c:	a2 e3       	ldi	r26, 0x32	; 50
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	e2 e3       	ldi	r30, 0x32	; 50
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	8f 7e       	andi	r24, 0xEF	; 239
    3238:	8c 93       	st	X, r24
    323a:	a2 e3       	ldi	r26, 0x32	; 50
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e2 e3       	ldi	r30, 0x32	; 50
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	80 61       	ori	r24, 0x10	; 16
    3246:	8c 93       	st	X, r24
    3248:	a2 e3       	ldi	r26, 0x32	; 50
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e2 e3       	ldi	r30, 0x32	; 50
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	80 64       	ori	r24, 0x40	; 64
    3254:	8c 93       	st	X, r24
    3256:	77 c0       	rjmp	.+238    	; 0x3346 <TFT_Print_Char+0x2f6>
							}
							else
							{
								TFT_Write_Data_Word(gu16_Back_Color);
    3258:	a2 e3       	ldi	r26, 0x32	; 50
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e2 e3       	ldi	r30, 0x32	; 50
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	8f 7b       	andi	r24, 0xBF	; 191
    3264:	8c 93       	st	X, r24
    3266:	a2 e3       	ldi	r26, 0x32	; 50
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e2 e3       	ldi	r30, 0x32	; 50
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	80 62       	ori	r24, 0x20	; 32
    3272:	8c 93       	st	X, r24
    3274:	e5 e3       	ldi	r30, 0x35	; 53
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 91 07 07 	lds	r24, 0x0707
    327c:	90 91 08 07 	lds	r25, 0x0708
    3280:	89 2f       	mov	r24, r25
    3282:	99 27       	eor	r25, r25
    3284:	80 83       	st	Z, r24
    3286:	a2 e3       	ldi	r26, 0x32	; 50
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e2 e3       	ldi	r30, 0x32	; 50
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	8f 7e       	andi	r24, 0xEF	; 239
    3292:	8c 93       	st	X, r24
    3294:	a2 e3       	ldi	r26, 0x32	; 50
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e2 e3       	ldi	r30, 0x32	; 50
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	80 61       	ori	r24, 0x10	; 16
    32a0:	8c 93       	st	X, r24
    32a2:	e5 e3       	ldi	r30, 0x35	; 53
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 91 07 07 	lds	r24, 0x0707
    32aa:	90 91 08 07 	lds	r25, 0x0708
    32ae:	80 83       	st	Z, r24
    32b0:	a2 e3       	ldi	r26, 0x32	; 50
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	e2 e3       	ldi	r30, 0x32	; 50
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	8f 7e       	andi	r24, 0xEF	; 239
    32bc:	8c 93       	st	X, r24
    32be:	a2 e3       	ldi	r26, 0x32	; 50
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	e2 e3       	ldi	r30, 0x32	; 50
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	80 61       	ori	r24, 0x10	; 16
    32ca:	8c 93       	st	X, r24
    32cc:	a2 e3       	ldi	r26, 0x32	; 50
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e2 e3       	ldi	r30, 0x32	; 50
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	80 64       	ori	r24, 0x40	; 64
    32d8:	8c 93       	st	X, r24
    32da:	35 c0       	rjmp	.+106    	; 0x3346 <TFT_Print_Char+0x2f6>
							}
						}
						else
						{
							if(temp&(0x01<<j))
    32dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	89 89       	ldd	r24, Y+17	; 0x11
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	b9 01       	movw	r22, r18
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <TFT_Print_Char+0x2a0>
    32ec:	75 95       	asr	r23
    32ee:	67 95       	ror	r22
    32f0:	8a 95       	dec	r24
    32f2:	e2 f7       	brpl	.-8      	; 0x32ec <TFT_Print_Char+0x29c>
    32f4:	cb 01       	movw	r24, r22
    32f6:	81 70       	andi	r24, 0x01	; 1
    32f8:	90 70       	andi	r25, 0x00	; 0
    32fa:	88 23       	and	r24, r24
    32fc:	21 f1       	breq	.+72     	; 0x3346 <TFT_Print_Char+0x2f6>
							{
								TFT_Draw_Pixel(au16_X+k,au16_Y+(8*u8_Count+j),gu16_Point_Color);
    32fe:	88 89       	ldd	r24, Y+16	; 0x10
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	8b 89       	ldd	r24, Y+19	; 0x13
    3306:	9c 89       	ldd	r25, Y+20	; 0x14
    3308:	b9 01       	movw	r22, r18
    330a:	68 0f       	add	r22, r24
    330c:	79 1f       	adc	r23, r25
    330e:	8a 89       	ldd	r24, Y+18	; 0x12
    3310:	88 2f       	mov	r24, r24
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9c 01       	movw	r18, r24
    3316:	22 0f       	add	r18, r18
    3318:	33 1f       	adc	r19, r19
    331a:	22 0f       	add	r18, r18
    331c:	33 1f       	adc	r19, r19
    331e:	22 0f       	add	r18, r18
    3320:	33 1f       	adc	r19, r19
    3322:	89 89       	ldd	r24, Y+17	; 0x11
    3324:	88 2f       	mov	r24, r24
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	82 0f       	add	r24, r18
    332a:	93 1f       	adc	r25, r19
    332c:	9c 01       	movw	r18, r24
    332e:	8d 89       	ldd	r24, Y+21	; 0x15
    3330:	9e 89       	ldd	r25, Y+22	; 0x16
    3332:	28 0f       	add	r18, r24
    3334:	39 1f       	adc	r19, r25
    3336:	40 91 05 07 	lds	r20, 0x0705
    333a:	50 91 06 07 	lds	r21, 0x0706
    333e:	cb 01       	movw	r24, r22
    3340:	b9 01       	movw	r22, r18
    3342:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
			{
				for(j=0;j<8;j++)
				{
					for(k=0;k<au8_tftChar_W;k++)
    3346:	88 89       	ldd	r24, Y+16	; 0x10
    3348:	8f 5f       	subi	r24, 0xFF	; 255
    334a:	88 8b       	std	Y+16, r24	; 0x10
    334c:	98 89       	ldd	r25, Y+16	; 0x10
    334e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3350:	98 17       	cp	r25, r24
    3352:	08 f4       	brcc	.+2      	; 0x3356 <TFT_Print_Char+0x306>
    3354:	e8 ce       	rjmp	.-560    	; 0x3126 <TFT_Print_Char+0xd6>
			}
			TFT_SetAddrWindow(au16_X, au16_Y, au16_X+au8_tftChar_W-1, au16_Y+au8_tftChar_H-1);

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
			{
				for(j=0;j<8;j++)
    3356:	89 89       	ldd	r24, Y+17	; 0x11
    3358:	8f 5f       	subi	r24, 0xFF	; 255
    335a:	89 8b       	std	Y+17, r24	; 0x11
    335c:	89 89       	ldd	r24, Y+17	; 0x11
    335e:	88 30       	cpi	r24, 0x08	; 8
    3360:	08 f4       	brcc	.+2      	; 0x3364 <TFT_Print_Char+0x314>
    3362:	df ce       	rjmp	.-578    	; 0x3122 <TFT_Print_Char+0xd2>
			{
				return;
			}
			TFT_SetAddrWindow(au16_X, au16_Y, au16_X+au8_tftChar_W-1, au16_Y+au8_tftChar_H-1);

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
    3364:	8a 89       	ldd	r24, Y+18	; 0x12
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	8a 8b       	std	Y+18, r24	; 0x12
    336a:	8d 85       	ldd	r24, Y+13	; 0x0d
    336c:	98 2f       	mov	r25, r24
    336e:	96 95       	lsr	r25
    3370:	96 95       	lsr	r25
    3372:	96 95       	lsr	r25
    3374:	8a 89       	ldd	r24, Y+18	; 0x12
    3376:	89 17       	cp	r24, r25
    3378:	08 f4       	brcc	.+2      	; 0x337c <TFT_Print_Char+0x32c>
    337a:	d1 ce       	rjmp	.-606    	; 0x311e <TFT_Print_Char+0xce>
    337c:	b8 c2       	rjmp	.+1392   	; 0x38ee <TFT_Print_Char+0x89e>
			}
		break;

		case TFT_CHAR_14_24 :

			au8_tftChar_W = 14U;
    337e:	8e e0       	ldi	r24, 0x0E	; 14
    3380:	8e 87       	std	Y+14, r24	; 0x0e
			au8_tftChar_H = 24U;
    3382:	88 e1       	ldi	r24, 0x18	; 24
    3384:	8d 87       	std	Y+13, r24	; 0x0d

			if((au16_X > (gu16_TFT_W - au8_tftChar_W))||(au16_Y > (gu16_TFT_H - au8_tftChar_H)))
    3386:	20 91 b6 00 	lds	r18, 0x00B6
    338a:	30 91 b7 00 	lds	r19, 0x00B7
    338e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3390:	88 2f       	mov	r24, r24
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	28 1b       	sub	r18, r24
    3396:	39 0b       	sbc	r19, r25
    3398:	8b 89       	ldd	r24, Y+19	; 0x13
    339a:	9c 89       	ldd	r25, Y+20	; 0x14
    339c:	28 17       	cp	r18, r24
    339e:	39 07       	cpc	r19, r25
    33a0:	08 f4       	brcc	.+2      	; 0x33a4 <TFT_Print_Char+0x354>
    33a2:	a5 c2       	rjmp	.+1354   	; 0x38ee <TFT_Print_Char+0x89e>
    33a4:	20 91 b8 00 	lds	r18, 0x00B8
    33a8:	30 91 b9 00 	lds	r19, 0x00B9
    33ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ae:	88 2f       	mov	r24, r24
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	28 1b       	sub	r18, r24
    33b4:	39 0b       	sbc	r19, r25
    33b6:	8d 89       	ldd	r24, Y+21	; 0x15
    33b8:	9e 89       	ldd	r25, Y+22	; 0x16
    33ba:	28 17       	cp	r18, r24
    33bc:	39 07       	cpc	r19, r25
    33be:	08 f4       	brcc	.+2      	; 0x33c2 <TFT_Print_Char+0x372>
    33c0:	96 c2       	rjmp	.+1324   	; 0x38ee <TFT_Print_Char+0x89e>
			{
				return;
			}
			TFT_SetAddrWindow(au16_X, au16_Y, au16_X+au8_tftChar_W-1, au16_Y+au8_tftChar_H-1);
    33c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ca:	9c 89       	ldd	r25, Y+20	; 0x14
    33cc:	82 0f       	add	r24, r18
    33ce:	93 1f       	adc	r25, r19
    33d0:	ac 01       	movw	r20, r24
    33d2:	41 50       	subi	r20, 0x01	; 1
    33d4:	50 40       	sbci	r21, 0x00	; 0
    33d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d8:	28 2f       	mov	r18, r24
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	8d 89       	ldd	r24, Y+21	; 0x15
    33de:	9e 89       	ldd	r25, Y+22	; 0x16
    33e0:	82 0f       	add	r24, r18
    33e2:	93 1f       	adc	r25, r19
    33e4:	fc 01       	movw	r30, r24
    33e6:	31 97       	sbiw	r30, 0x01	; 1
    33e8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ea:	9c 89       	ldd	r25, Y+20	; 0x14
    33ec:	2d 89       	ldd	r18, Y+21	; 0x15
    33ee:	3e 89       	ldd	r19, Y+22	; 0x16
    33f0:	b9 01       	movw	r22, r18
    33f2:	9f 01       	movw	r18, r30
    33f4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TFT_SetAddrWindow>

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
    33f8:	1a 8a       	std	Y+18, r1	; 0x12
    33fa:	26 c1       	rjmp	.+588    	; 0x3648 <TFT_Print_Char+0x5f8>
			{
				for(j=0;j<8;j++)
    33fc:	19 8a       	std	Y+17, r1	; 0x11
    33fe:	1d c1       	rjmp	.+570    	; 0x363a <TFT_Print_Char+0x5ea>
				{
					for(k=0;k<au8_tftChar_W;k++)
    3400:	18 8a       	std	Y+16, r1	; 0x10
    3402:	13 c1       	rjmp	.+550    	; 0x362a <TFT_Print_Char+0x5da>
					{
						temp = pgm_read_byte(&(Consolas14x24[(au8_Data-' ')*(au8_tftChar_H/8)*au8_tftChar_W+k*(au8_tftChar_H/8)+u8_Count]));      // temp=Consolas14x24[(au8_Data-' ')*(24/8)*14+k*(24/8)+u8_Count];
    3404:	88 8d       	ldd	r24, Y+24	; 0x18
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 01       	movw	r18, r24
    340c:	20 52       	subi	r18, 0x20	; 32
    340e:	30 40       	sbci	r19, 0x00	; 0
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	86 95       	lsr	r24
    3414:	86 95       	lsr	r24
    3416:	86 95       	lsr	r24
    3418:	88 2f       	mov	r24, r24
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	a9 01       	movw	r20, r18
    341e:	48 9f       	mul	r20, r24
    3420:	90 01       	movw	r18, r0
    3422:	49 9f       	mul	r20, r25
    3424:	30 0d       	add	r19, r0
    3426:	58 9f       	mul	r21, r24
    3428:	30 0d       	add	r19, r0
    342a:	11 24       	eor	r1, r1
    342c:	8e 85       	ldd	r24, Y+14	; 0x0e
    342e:	88 2f       	mov	r24, r24
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	28 9f       	mul	r18, r24
    3434:	a0 01       	movw	r20, r0
    3436:	29 9f       	mul	r18, r25
    3438:	50 0d       	add	r21, r0
    343a:	38 9f       	mul	r19, r24
    343c:	50 0d       	add	r21, r0
    343e:	11 24       	eor	r1, r1
    3440:	88 89       	ldd	r24, Y+16	; 0x10
    3442:	28 2f       	mov	r18, r24
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	8d 85       	ldd	r24, Y+13	; 0x0d
    3448:	86 95       	lsr	r24
    344a:	86 95       	lsr	r24
    344c:	86 95       	lsr	r24
    344e:	88 2f       	mov	r24, r24
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	bc 01       	movw	r22, r24
    3454:	26 9f       	mul	r18, r22
    3456:	c0 01       	movw	r24, r0
    3458:	27 9f       	mul	r18, r23
    345a:	90 0d       	add	r25, r0
    345c:	36 9f       	mul	r19, r22
    345e:	90 0d       	add	r25, r0
    3460:	11 24       	eor	r1, r1
    3462:	9a 01       	movw	r18, r20
    3464:	28 0f       	add	r18, r24
    3466:	39 1f       	adc	r19, r25
    3468:	8a 89       	ldd	r24, Y+18	; 0x12
    346a:	88 2f       	mov	r24, r24
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	82 0f       	add	r24, r18
    3470:	93 1f       	adc	r25, r19
    3472:	8b 5a       	subi	r24, 0xAB	; 171
    3474:	9f 4f       	sbci	r25, 0xFF	; 255
    3476:	99 87       	std	Y+9, r25	; 0x09
    3478:	88 87       	std	Y+8, r24	; 0x08
    347a:	e8 85       	ldd	r30, Y+8	; 0x08
    347c:	f9 85       	ldd	r31, Y+9	; 0x09
    347e:	84 91       	lpm	r24, Z+
    3480:	8f 83       	std	Y+7, r24	; 0x07
    3482:	8f 81       	ldd	r24, Y+7	; 0x07
    3484:	8f 87       	std	Y+15, r24	; 0x0f
						if(au8_Mode==TFT_STRING_MODE_BACKGROUND)
    3486:	89 8d       	ldd	r24, Y+25	; 0x19
    3488:	88 23       	and	r24, r24
    348a:	09 f0       	breq	.+2      	; 0x348e <TFT_Print_Char+0x43e>
    348c:	96 c0       	rjmp	.+300    	; 0x35ba <TFT_Print_Char+0x56a>
						{
							if(temp&(0x01<<j))
    348e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	89 89       	ldd	r24, Y+17	; 0x11
    3496:	88 2f       	mov	r24, r24
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	a9 01       	movw	r20, r18
    349c:	02 c0       	rjmp	.+4      	; 0x34a2 <TFT_Print_Char+0x452>
    349e:	55 95       	asr	r21
    34a0:	47 95       	ror	r20
    34a2:	8a 95       	dec	r24
    34a4:	e2 f7       	brpl	.-8      	; 0x349e <TFT_Print_Char+0x44e>
    34a6:	ca 01       	movw	r24, r20
    34a8:	81 70       	andi	r24, 0x01	; 1
    34aa:	90 70       	andi	r25, 0x00	; 0
    34ac:	88 23       	and	r24, r24
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <TFT_Print_Char+0x462>
    34b0:	42 c0       	rjmp	.+132    	; 0x3536 <TFT_Print_Char+0x4e6>
							{
								TFT_Write_Data_Word(gu16_Point_Color);
    34b2:	a2 e3       	ldi	r26, 0x32	; 50
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	e2 e3       	ldi	r30, 0x32	; 50
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	8f 7b       	andi	r24, 0xBF	; 191
    34be:	8c 93       	st	X, r24
    34c0:	a2 e3       	ldi	r26, 0x32	; 50
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e2 e3       	ldi	r30, 0x32	; 50
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	80 62       	ori	r24, 0x20	; 32
    34cc:	8c 93       	st	X, r24
    34ce:	e5 e3       	ldi	r30, 0x35	; 53
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 91 05 07 	lds	r24, 0x0705
    34d6:	90 91 06 07 	lds	r25, 0x0706
    34da:	89 2f       	mov	r24, r25
    34dc:	99 27       	eor	r25, r25
    34de:	80 83       	st	Z, r24
    34e0:	a2 e3       	ldi	r26, 0x32	; 50
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e2 e3       	ldi	r30, 0x32	; 50
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	8f 7e       	andi	r24, 0xEF	; 239
    34ec:	8c 93       	st	X, r24
    34ee:	a2 e3       	ldi	r26, 0x32	; 50
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	e2 e3       	ldi	r30, 0x32	; 50
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 81       	ld	r24, Z
    34f8:	80 61       	ori	r24, 0x10	; 16
    34fa:	8c 93       	st	X, r24
    34fc:	e5 e3       	ldi	r30, 0x35	; 53
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 91 05 07 	lds	r24, 0x0705
    3504:	90 91 06 07 	lds	r25, 0x0706
    3508:	80 83       	st	Z, r24
    350a:	a2 e3       	ldi	r26, 0x32	; 50
    350c:	b0 e0       	ldi	r27, 0x00	; 0
    350e:	e2 e3       	ldi	r30, 0x32	; 50
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	8f 7e       	andi	r24, 0xEF	; 239
    3516:	8c 93       	st	X, r24
    3518:	a2 e3       	ldi	r26, 0x32	; 50
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e2 e3       	ldi	r30, 0x32	; 50
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	80 61       	ori	r24, 0x10	; 16
    3524:	8c 93       	st	X, r24
    3526:	a2 e3       	ldi	r26, 0x32	; 50
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e2 e3       	ldi	r30, 0x32	; 50
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	80 64       	ori	r24, 0x40	; 64
    3532:	8c 93       	st	X, r24
    3534:	77 c0       	rjmp	.+238    	; 0x3624 <TFT_Print_Char+0x5d4>
							}
							else
							{
								TFT_Write_Data_Word(gu16_Back_Color);
    3536:	a2 e3       	ldi	r26, 0x32	; 50
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	e2 e3       	ldi	r30, 0x32	; 50
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	8f 7b       	andi	r24, 0xBF	; 191
    3542:	8c 93       	st	X, r24
    3544:	a2 e3       	ldi	r26, 0x32	; 50
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	e2 e3       	ldi	r30, 0x32	; 50
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	80 62       	ori	r24, 0x20	; 32
    3550:	8c 93       	st	X, r24
    3552:	e5 e3       	ldi	r30, 0x35	; 53
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 91 07 07 	lds	r24, 0x0707
    355a:	90 91 08 07 	lds	r25, 0x0708
    355e:	89 2f       	mov	r24, r25
    3560:	99 27       	eor	r25, r25
    3562:	80 83       	st	Z, r24
    3564:	a2 e3       	ldi	r26, 0x32	; 50
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e2 e3       	ldi	r30, 0x32	; 50
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	8f 7e       	andi	r24, 0xEF	; 239
    3570:	8c 93       	st	X, r24
    3572:	a2 e3       	ldi	r26, 0x32	; 50
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	e2 e3       	ldi	r30, 0x32	; 50
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	80 61       	ori	r24, 0x10	; 16
    357e:	8c 93       	st	X, r24
    3580:	e5 e3       	ldi	r30, 0x35	; 53
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 91 07 07 	lds	r24, 0x0707
    3588:	90 91 08 07 	lds	r25, 0x0708
    358c:	80 83       	st	Z, r24
    358e:	a2 e3       	ldi	r26, 0x32	; 50
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	e2 e3       	ldi	r30, 0x32	; 50
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	8f 7e       	andi	r24, 0xEF	; 239
    359a:	8c 93       	st	X, r24
    359c:	a2 e3       	ldi	r26, 0x32	; 50
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e2 e3       	ldi	r30, 0x32	; 50
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	80 61       	ori	r24, 0x10	; 16
    35a8:	8c 93       	st	X, r24
    35aa:	a2 e3       	ldi	r26, 0x32	; 50
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	e2 e3       	ldi	r30, 0x32	; 50
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 81       	ld	r24, Z
    35b4:	80 64       	ori	r24, 0x40	; 64
    35b6:	8c 93       	st	X, r24
    35b8:	35 c0       	rjmp	.+106    	; 0x3624 <TFT_Print_Char+0x5d4>
							}
						}
						else
						{
							if(temp&(0x01<<j))
    35ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	89 89       	ldd	r24, Y+17	; 0x11
    35c2:	88 2f       	mov	r24, r24
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	b9 01       	movw	r22, r18
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <TFT_Print_Char+0x57e>
    35ca:	75 95       	asr	r23
    35cc:	67 95       	ror	r22
    35ce:	8a 95       	dec	r24
    35d0:	e2 f7       	brpl	.-8      	; 0x35ca <TFT_Print_Char+0x57a>
    35d2:	cb 01       	movw	r24, r22
    35d4:	81 70       	andi	r24, 0x01	; 1
    35d6:	90 70       	andi	r25, 0x00	; 0
    35d8:	88 23       	and	r24, r24
    35da:	21 f1       	breq	.+72     	; 0x3624 <TFT_Print_Char+0x5d4>
							{
								TFT_Draw_Pixel(au16_X+k,au16_Y+(8*u8_Count+j),gu16_Point_Color);
    35dc:	88 89       	ldd	r24, Y+16	; 0x10
    35de:	28 2f       	mov	r18, r24
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	8b 89       	ldd	r24, Y+19	; 0x13
    35e4:	9c 89       	ldd	r25, Y+20	; 0x14
    35e6:	b9 01       	movw	r22, r18
    35e8:	68 0f       	add	r22, r24
    35ea:	79 1f       	adc	r23, r25
    35ec:	8a 89       	ldd	r24, Y+18	; 0x12
    35ee:	88 2f       	mov	r24, r24
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	9c 01       	movw	r18, r24
    35f4:	22 0f       	add	r18, r18
    35f6:	33 1f       	adc	r19, r19
    35f8:	22 0f       	add	r18, r18
    35fa:	33 1f       	adc	r19, r19
    35fc:	22 0f       	add	r18, r18
    35fe:	33 1f       	adc	r19, r19
    3600:	89 89       	ldd	r24, Y+17	; 0x11
    3602:	88 2f       	mov	r24, r24
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	82 0f       	add	r24, r18
    3608:	93 1f       	adc	r25, r19
    360a:	9c 01       	movw	r18, r24
    360c:	8d 89       	ldd	r24, Y+21	; 0x15
    360e:	9e 89       	ldd	r25, Y+22	; 0x16
    3610:	28 0f       	add	r18, r24
    3612:	39 1f       	adc	r19, r25
    3614:	40 91 05 07 	lds	r20, 0x0705
    3618:	50 91 06 07 	lds	r21, 0x0706
    361c:	cb 01       	movw	r24, r22
    361e:	b9 01       	movw	r22, r18
    3620:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
			{
				for(j=0;j<8;j++)
				{
					for(k=0;k<au8_tftChar_W;k++)
    3624:	88 89       	ldd	r24, Y+16	; 0x10
    3626:	8f 5f       	subi	r24, 0xFF	; 255
    3628:	88 8b       	std	Y+16, r24	; 0x10
    362a:	98 89       	ldd	r25, Y+16	; 0x10
    362c:	8e 85       	ldd	r24, Y+14	; 0x0e
    362e:	98 17       	cp	r25, r24
    3630:	08 f4       	brcc	.+2      	; 0x3634 <TFT_Print_Char+0x5e4>
    3632:	e8 ce       	rjmp	.-560    	; 0x3404 <TFT_Print_Char+0x3b4>
			}
			TFT_SetAddrWindow(au16_X, au16_Y, au16_X+au8_tftChar_W-1, au16_Y+au8_tftChar_H-1);

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
			{
				for(j=0;j<8;j++)
    3634:	89 89       	ldd	r24, Y+17	; 0x11
    3636:	8f 5f       	subi	r24, 0xFF	; 255
    3638:	89 8b       	std	Y+17, r24	; 0x11
    363a:	89 89       	ldd	r24, Y+17	; 0x11
    363c:	88 30       	cpi	r24, 0x08	; 8
    363e:	08 f4       	brcc	.+2      	; 0x3642 <TFT_Print_Char+0x5f2>
    3640:	df ce       	rjmp	.-578    	; 0x3400 <TFT_Print_Char+0x3b0>
			{
				return;
			}
			TFT_SetAddrWindow(au16_X, au16_Y, au16_X+au8_tftChar_W-1, au16_Y+au8_tftChar_H-1);

			for(u8_Count=0;u8_Count<au8_tftChar_H/8;u8_Count++)
    3642:	8a 89       	ldd	r24, Y+18	; 0x12
    3644:	8f 5f       	subi	r24, 0xFF	; 255
    3646:	8a 8b       	std	Y+18, r24	; 0x12
    3648:	8d 85       	ldd	r24, Y+13	; 0x0d
    364a:	98 2f       	mov	r25, r24
    364c:	96 95       	lsr	r25
    364e:	96 95       	lsr	r25
    3650:	96 95       	lsr	r25
    3652:	8a 89       	ldd	r24, Y+18	; 0x12
    3654:	89 17       	cp	r24, r25
    3656:	08 f4       	brcc	.+2      	; 0x365a <TFT_Print_Char+0x60a>
    3658:	d1 ce       	rjmp	.-606    	; 0x33fc <TFT_Print_Char+0x3ac>
    365a:	49 c1       	rjmp	.+658    	; 0x38ee <TFT_Print_Char+0x89e>
			}
		break;

		case TFT_CHAR_8_16 :

			au8_tftChar_W = 8U;
    365c:	88 e0       	ldi	r24, 0x08	; 8
    365e:	8e 87       	std	Y+14, r24	; 0x0e
			au8_tftChar_H = 16U;
    3660:	80 e1       	ldi	r24, 0x10	; 16
    3662:	8d 87       	std	Y+13, r24	; 0x0d

			if((au16_X > (gu16_TFT_W - au8_tftChar_W))||(au16_Y > (gu16_TFT_H - au8_tftChar_H)))
    3664:	20 91 b6 00 	lds	r18, 0x00B6
    3668:	30 91 b7 00 	lds	r19, 0x00B7
    366c:	8e 85       	ldd	r24, Y+14	; 0x0e
    366e:	88 2f       	mov	r24, r24
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	28 1b       	sub	r18, r24
    3674:	39 0b       	sbc	r19, r25
    3676:	8b 89       	ldd	r24, Y+19	; 0x13
    3678:	9c 89       	ldd	r25, Y+20	; 0x14
    367a:	28 17       	cp	r18, r24
    367c:	39 07       	cpc	r19, r25
    367e:	08 f4       	brcc	.+2      	; 0x3682 <TFT_Print_Char+0x632>
    3680:	36 c1       	rjmp	.+620    	; 0x38ee <TFT_Print_Char+0x89e>
    3682:	20 91 b8 00 	lds	r18, 0x00B8
    3686:	30 91 b9 00 	lds	r19, 0x00B9
    368a:	8d 85       	ldd	r24, Y+13	; 0x0d
    368c:	88 2f       	mov	r24, r24
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	28 1b       	sub	r18, r24
    3692:	39 0b       	sbc	r19, r25
    3694:	8d 89       	ldd	r24, Y+21	; 0x15
    3696:	9e 89       	ldd	r25, Y+22	; 0x16
    3698:	28 17       	cp	r18, r24
    369a:	39 07       	cpc	r19, r25
    369c:	08 f4       	brcc	.+2      	; 0x36a0 <TFT_Print_Char+0x650>
    369e:	27 c1       	rjmp	.+590    	; 0x38ee <TFT_Print_Char+0x89e>
			{
				return;
			}
			TFT_SetAddrWindow(au16_X, au16_Y, au16_X+au8_tftChar_W-1, au16_Y+au8_tftChar_H-1);
    36a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    36a2:	28 2f       	mov	r18, r24
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	8b 89       	ldd	r24, Y+19	; 0x13
    36a8:	9c 89       	ldd	r25, Y+20	; 0x14
    36aa:	82 0f       	add	r24, r18
    36ac:	93 1f       	adc	r25, r19
    36ae:	ac 01       	movw	r20, r24
    36b0:	41 50       	subi	r20, 0x01	; 1
    36b2:	50 40       	sbci	r21, 0x00	; 0
    36b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b6:	28 2f       	mov	r18, r24
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	8d 89       	ldd	r24, Y+21	; 0x15
    36bc:	9e 89       	ldd	r25, Y+22	; 0x16
    36be:	82 0f       	add	r24, r18
    36c0:	93 1f       	adc	r25, r19
    36c2:	fc 01       	movw	r30, r24
    36c4:	31 97       	sbiw	r30, 0x01	; 1
    36c6:	8b 89       	ldd	r24, Y+19	; 0x13
    36c8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ca:	2d 89       	ldd	r18, Y+21	; 0x15
    36cc:	3e 89       	ldd	r19, Y+22	; 0x16
    36ce:	b9 01       	movw	r22, r18
    36d0:	9f 01       	movw	r18, r30
    36d2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TFT_SetAddrWindow>

			au8_Data = au8_Data - ' ';
    36d6:	88 8d       	ldd	r24, Y+24	; 0x18
    36d8:	80 52       	subi	r24, 0x20	; 32
    36da:	88 8f       	std	Y+24, r24	; 0x18

			if(!au8_Mode)
    36dc:	89 8d       	ldd	r24, Y+25	; 0x19
    36de:	88 23       	and	r24, r24
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <TFT_Print_Char+0x694>
    36e2:	ba c0       	rjmp	.+372    	; 0x3858 <TFT_Print_Char+0x808>
			{
				for(u8_Count=0;u8_Count<16;u8_Count++)
    36e4:	1a 8a       	std	Y+18, r1	; 0x12
    36e6:	b3 c0       	rjmp	.+358    	; 0x384e <TFT_Print_Char+0x7fe>
				{
					temp = pgm_read_byte(&(asc2_1608[(uint16_t)au8_Data*16+u8_Count]));       // temp=asc2_1608[(uint16_t)num*16+u8_Count];
    36e8:	88 8d       	ldd	r24, Y+24	; 0x18
    36ea:	88 2f       	mov	r24, r24
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	9c 01       	movw	r18, r24
    36f0:	22 95       	swap	r18
    36f2:	32 95       	swap	r19
    36f4:	30 7f       	andi	r19, 0xF0	; 240
    36f6:	32 27       	eor	r19, r18
    36f8:	20 7f       	andi	r18, 0xF0	; 240
    36fa:	32 27       	eor	r19, r18
    36fc:	8a 89       	ldd	r24, Y+18	; 0x12
    36fe:	88 2f       	mov	r24, r24
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	82 0f       	add	r24, r18
    3704:	93 1f       	adc	r25, r19
    3706:	8b 5e       	subi	r24, 0xEB	; 235
    3708:	9f 4e       	sbci	r25, 0xEF	; 239
    370a:	9e 83       	std	Y+6, r25	; 0x06
    370c:	8d 83       	std	Y+5, r24	; 0x05
    370e:	ed 81       	ldd	r30, Y+5	; 0x05
    3710:	fe 81       	ldd	r31, Y+6	; 0x06
    3712:	84 91       	lpm	r24, Z+
    3714:	8c 83       	std	Y+4, r24	; 0x04
    3716:	8c 81       	ldd	r24, Y+4	; 0x04
    3718:	8f 87       	std	Y+15, r24	; 0x0f
					for(j=0;j<8;j++)
    371a:	19 8a       	std	Y+17, r1	; 0x11
    371c:	91 c0       	rjmp	.+290    	; 0x3840 <TFT_Print_Char+0x7f0>
					{
						if(temp&0x01)
    371e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	81 70       	andi	r24, 0x01	; 1
    3726:	90 70       	andi	r25, 0x00	; 0
    3728:	88 23       	and	r24, r24
    372a:	09 f4       	brne	.+2      	; 0x372e <TFT_Print_Char+0x6de>
    372c:	42 c0       	rjmp	.+132    	; 0x37b2 <TFT_Print_Char+0x762>
						{
							TFT_Write_Data_Word(gu16_Point_Color);
    372e:	a2 e3       	ldi	r26, 0x32	; 50
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	e2 e3       	ldi	r30, 0x32	; 50
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	8f 7b       	andi	r24, 0xBF	; 191
    373a:	8c 93       	st	X, r24
    373c:	a2 e3       	ldi	r26, 0x32	; 50
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	e2 e3       	ldi	r30, 0x32	; 50
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	80 62       	ori	r24, 0x20	; 32
    3748:	8c 93       	st	X, r24
    374a:	e5 e3       	ldi	r30, 0x35	; 53
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 91 05 07 	lds	r24, 0x0705
    3752:	90 91 06 07 	lds	r25, 0x0706
    3756:	89 2f       	mov	r24, r25
    3758:	99 27       	eor	r25, r25
    375a:	80 83       	st	Z, r24
    375c:	a2 e3       	ldi	r26, 0x32	; 50
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	e2 e3       	ldi	r30, 0x32	; 50
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	8f 7e       	andi	r24, 0xEF	; 239
    3768:	8c 93       	st	X, r24
    376a:	a2 e3       	ldi	r26, 0x32	; 50
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	e2 e3       	ldi	r30, 0x32	; 50
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	80 61       	ori	r24, 0x10	; 16
    3776:	8c 93       	st	X, r24
    3778:	e5 e3       	ldi	r30, 0x35	; 53
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 91 05 07 	lds	r24, 0x0705
    3780:	90 91 06 07 	lds	r25, 0x0706
    3784:	80 83       	st	Z, r24
    3786:	a2 e3       	ldi	r26, 0x32	; 50
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	e2 e3       	ldi	r30, 0x32	; 50
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	8f 7e       	andi	r24, 0xEF	; 239
    3792:	8c 93       	st	X, r24
    3794:	a2 e3       	ldi	r26, 0x32	; 50
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e2 e3       	ldi	r30, 0x32	; 50
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	80 61       	ori	r24, 0x10	; 16
    37a0:	8c 93       	st	X, r24
    37a2:	a2 e3       	ldi	r26, 0x32	; 50
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e2 e3       	ldi	r30, 0x32	; 50
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	80 64       	ori	r24, 0x40	; 64
    37ae:	8c 93       	st	X, r24
    37b0:	41 c0       	rjmp	.+130    	; 0x3834 <TFT_Print_Char+0x7e4>
						}
						else
						{
							TFT_Write_Data_Word(gu16_Back_Color);
    37b2:	a2 e3       	ldi	r26, 0x32	; 50
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e2 e3       	ldi	r30, 0x32	; 50
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	8f 7b       	andi	r24, 0xBF	; 191
    37be:	8c 93       	st	X, r24
    37c0:	a2 e3       	ldi	r26, 0x32	; 50
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e2 e3       	ldi	r30, 0x32	; 50
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	80 62       	ori	r24, 0x20	; 32
    37cc:	8c 93       	st	X, r24
    37ce:	e5 e3       	ldi	r30, 0x35	; 53
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 91 07 07 	lds	r24, 0x0707
    37d6:	90 91 08 07 	lds	r25, 0x0708
    37da:	89 2f       	mov	r24, r25
    37dc:	99 27       	eor	r25, r25
    37de:	80 83       	st	Z, r24
    37e0:	a2 e3       	ldi	r26, 0x32	; 50
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e2 e3       	ldi	r30, 0x32	; 50
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	8f 7e       	andi	r24, 0xEF	; 239
    37ec:	8c 93       	st	X, r24
    37ee:	a2 e3       	ldi	r26, 0x32	; 50
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	e2 e3       	ldi	r30, 0x32	; 50
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	80 61       	ori	r24, 0x10	; 16
    37fa:	8c 93       	st	X, r24
    37fc:	e5 e3       	ldi	r30, 0x35	; 53
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 91 07 07 	lds	r24, 0x0707
    3804:	90 91 08 07 	lds	r25, 0x0708
    3808:	80 83       	st	Z, r24
    380a:	a2 e3       	ldi	r26, 0x32	; 50
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e2 e3       	ldi	r30, 0x32	; 50
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	8f 7e       	andi	r24, 0xEF	; 239
    3816:	8c 93       	st	X, r24
    3818:	a2 e3       	ldi	r26, 0x32	; 50
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	e2 e3       	ldi	r30, 0x32	; 50
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	80 61       	ori	r24, 0x10	; 16
    3824:	8c 93       	st	X, r24
    3826:	a2 e3       	ldi	r26, 0x32	; 50
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	e2 e3       	ldi	r30, 0x32	; 50
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	80 64       	ori	r24, 0x40	; 64
    3832:	8c 93       	st	X, r24
						}
						temp>>=1;
    3834:	8f 85       	ldd	r24, Y+15	; 0x0f
    3836:	86 95       	lsr	r24
    3838:	8f 87       	std	Y+15, r24	; 0x0f
			if(!au8_Mode)
			{
				for(u8_Count=0;u8_Count<16;u8_Count++)
				{
					temp = pgm_read_byte(&(asc2_1608[(uint16_t)au8_Data*16+u8_Count]));       // temp=asc2_1608[(uint16_t)num*16+u8_Count];
					for(j=0;j<8;j++)
    383a:	89 89       	ldd	r24, Y+17	; 0x11
    383c:	8f 5f       	subi	r24, 0xFF	; 255
    383e:	89 8b       	std	Y+17, r24	; 0x11
    3840:	89 89       	ldd	r24, Y+17	; 0x11
    3842:	88 30       	cpi	r24, 0x08	; 8
    3844:	08 f4       	brcc	.+2      	; 0x3848 <TFT_Print_Char+0x7f8>
    3846:	6b cf       	rjmp	.-298    	; 0x371e <TFT_Print_Char+0x6ce>

			au8_Data = au8_Data - ' ';

			if(!au8_Mode)
			{
				for(u8_Count=0;u8_Count<16;u8_Count++)
    3848:	8a 89       	ldd	r24, Y+18	; 0x12
    384a:	8f 5f       	subi	r24, 0xFF	; 255
    384c:	8a 8b       	std	Y+18, r24	; 0x12
    384e:	8a 89       	ldd	r24, Y+18	; 0x12
    3850:	80 31       	cpi	r24, 0x10	; 16
    3852:	08 f4       	brcc	.+2      	; 0x3856 <TFT_Print_Char+0x806>
    3854:	49 cf       	rjmp	.-366    	; 0x36e8 <TFT_Print_Char+0x698>
    3856:	4b c0       	rjmp	.+150    	; 0x38ee <TFT_Print_Char+0x89e>
					}
				}
			}
			else
			{
				for(u8_Count=0;u8_Count<16;u8_Count++)
    3858:	1a 8a       	std	Y+18, r1	; 0x12
    385a:	45 c0       	rjmp	.+138    	; 0x38e6 <TFT_Print_Char+0x896>
				{
					temp = pgm_read_byte(&(asc2_1608[(uint16_t)au8_Data*16+u8_Count]));       //temp=asc2_1608[(uint16_t)num*16+u8_Count];
    385c:	88 8d       	ldd	r24, Y+24	; 0x18
    385e:	88 2f       	mov	r24, r24
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9c 01       	movw	r18, r24
    3864:	22 95       	swap	r18
    3866:	32 95       	swap	r19
    3868:	30 7f       	andi	r19, 0xF0	; 240
    386a:	32 27       	eor	r19, r18
    386c:	20 7f       	andi	r18, 0xF0	; 240
    386e:	32 27       	eor	r19, r18
    3870:	8a 89       	ldd	r24, Y+18	; 0x12
    3872:	88 2f       	mov	r24, r24
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	82 0f       	add	r24, r18
    3878:	93 1f       	adc	r25, r19
    387a:	8b 5e       	subi	r24, 0xEB	; 235
    387c:	9f 4e       	sbci	r25, 0xEF	; 239
    387e:	9b 83       	std	Y+3, r25	; 0x03
    3880:	8a 83       	std	Y+2, r24	; 0x02
    3882:	ea 81       	ldd	r30, Y+2	; 0x02
    3884:	fb 81       	ldd	r31, Y+3	; 0x03
    3886:	84 91       	lpm	r24, Z+
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	8f 87       	std	Y+15, r24	; 0x0f
					for(j=0;j<8;j++)
    388e:	19 8a       	std	Y+17, r1	; 0x11
    3890:	24 c0       	rjmp	.+72     	; 0x38da <TFT_Print_Char+0x88a>
					{
						if(temp&0x01)TFT_Draw_Pixel(au16_X+j,au16_Y+u8_Count,gu16_Point_Color);
    3892:	8f 85       	ldd	r24, Y+15	; 0x0f
    3894:	88 2f       	mov	r24, r24
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	81 70       	andi	r24, 0x01	; 1
    389a:	90 70       	andi	r25, 0x00	; 0
    389c:	88 23       	and	r24, r24
    389e:	b9 f0       	breq	.+46     	; 0x38ce <TFT_Print_Char+0x87e>
    38a0:	89 89       	ldd	r24, Y+17	; 0x11
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	8b 89       	ldd	r24, Y+19	; 0x13
    38a8:	9c 89       	ldd	r25, Y+20	; 0x14
    38aa:	b9 01       	movw	r22, r18
    38ac:	68 0f       	add	r22, r24
    38ae:	79 1f       	adc	r23, r25
    38b0:	8a 89       	ldd	r24, Y+18	; 0x12
    38b2:	28 2f       	mov	r18, r24
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	8d 89       	ldd	r24, Y+21	; 0x15
    38b8:	9e 89       	ldd	r25, Y+22	; 0x16
    38ba:	28 0f       	add	r18, r24
    38bc:	39 1f       	adc	r19, r25
    38be:	40 91 05 07 	lds	r20, 0x0705
    38c2:	50 91 06 07 	lds	r21, 0x0706
    38c6:	cb 01       	movw	r24, r22
    38c8:	b9 01       	movw	r22, r18
    38ca:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
						temp>>=1;
    38ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    38d0:	86 95       	lsr	r24
    38d2:	8f 87       	std	Y+15, r24	; 0x0f
			else
			{
				for(u8_Count=0;u8_Count<16;u8_Count++)
				{
					temp = pgm_read_byte(&(asc2_1608[(uint16_t)au8_Data*16+u8_Count]));       //temp=asc2_1608[(uint16_t)num*16+u8_Count];
					for(j=0;j<8;j++)
    38d4:	89 89       	ldd	r24, Y+17	; 0x11
    38d6:	8f 5f       	subi	r24, 0xFF	; 255
    38d8:	89 8b       	std	Y+17, r24	; 0x11
    38da:	89 89       	ldd	r24, Y+17	; 0x11
    38dc:	88 30       	cpi	r24, 0x08	; 8
    38de:	c8 f2       	brcs	.-78     	; 0x3892 <TFT_Print_Char+0x842>
					}
				}
			}
			else
			{
				for(u8_Count=0;u8_Count<16;u8_Count++)
    38e0:	8a 89       	ldd	r24, Y+18	; 0x12
    38e2:	8f 5f       	subi	r24, 0xFF	; 255
    38e4:	8a 8b       	std	Y+18, r24	; 0x12
    38e6:	8a 89       	ldd	r24, Y+18	; 0x12
    38e8:	80 31       	cpi	r24, 0x10	; 16
    38ea:	08 f4       	brcc	.+2      	; 0x38ee <TFT_Print_Char+0x89e>
    38ec:	b7 cf       	rjmp	.-146    	; 0x385c <TFT_Print_Char+0x80c>
					}
				}
			}
		break;
	}
}
    38ee:	6b 96       	adiw	r28, 0x1b	; 27
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	0f 91       	pop	r16
    3900:	08 95       	ret

00003902 <TFT_Reset>:

static void TFT_Reset()
{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	aa 97       	sbiw	r28, 0x2a	; 42
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61

	/* CS_IDLE */
	SET_BIT(TFT_CTRL_PORT,TFT_CS);
    3916:	a2 e3       	ldi	r26, 0x32	; 50
    3918:	b0 e0       	ldi	r27, 0x00	; 0
    391a:	e2 e3       	ldi	r30, 0x32	; 50
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
    3920:	80 64       	ori	r24, 0x40	; 64
    3922:	8c 93       	st	X, r24

	/* RD_IDLE */
	SET_BIT(TFT_CTRL_PORT,TFT_RD);
    3924:	a2 e3       	ldi	r26, 0x32	; 50
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	e2 e3       	ldi	r30, 0x32	; 50
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	88 60       	ori	r24, 0x08	; 8
    3930:	8c 93       	st	X, r24

	/* WR_IDLE */
	SET_BIT(TFT_CTRL_PORT,TFT_WR);
    3932:	a2 e3       	ldi	r26, 0x32	; 50
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	e2 e3       	ldi	r30, 0x32	; 50
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	80 61       	ori	r24, 0x10	; 16
    393e:	8c 93       	st	X, r24

	/* RESET_IDLE */
	SET_BIT(TFT_CTRL_PORT,TFT_RST);
    3940:	a2 e3       	ldi	r26, 0x32	; 50
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e2 e3       	ldi	r30, 0x32	; 50
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	80 68       	ori	r24, 0x80	; 128
    394c:	8c 93       	st	X, r24
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	a8 e4       	ldi	r26, 0x48	; 72
    3954:	b2 e4       	ldi	r27, 0x42	; 66
    3956:	8f a3       	std	Y+39, r24	; 0x27
    3958:	98 a7       	std	Y+40, r25	; 0x28
    395a:	a9 a7       	std	Y+41, r26	; 0x29
    395c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395e:	6f a1       	ldd	r22, Y+39	; 0x27
    3960:	78 a5       	ldd	r23, Y+40	; 0x28
    3962:	89 a5       	ldd	r24, Y+41	; 0x29
    3964:	9a a5       	ldd	r25, Y+42	; 0x2a
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	4a ef       	ldi	r20, 0xFA	; 250
    396c:	54 e4       	ldi	r21, 0x44	; 68
    396e:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	8b a3       	std	Y+35, r24	; 0x23
    3978:	9c a3       	std	Y+36, r25	; 0x24
    397a:	ad a3       	std	Y+37, r26	; 0x25
    397c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    397e:	6b a1       	ldd	r22, Y+35	; 0x23
    3980:	7c a1       	ldd	r23, Y+36	; 0x24
    3982:	8d a1       	ldd	r24, Y+37	; 0x25
    3984:	9e a1       	ldd	r25, Y+38	; 0x26
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e8       	ldi	r20, 0x80	; 128
    398c:	5f e3       	ldi	r21, 0x3F	; 63
    398e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__ltsf2>
    3992:	88 23       	and	r24, r24
    3994:	2c f4       	brge	.+10     	; 0x39a0 <TFT_Reset+0x9e>
		__ticks = 1;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	9a a3       	std	Y+34, r25	; 0x22
    399c:	89 a3       	std	Y+33, r24	; 0x21
    399e:	3f c0       	rjmp	.+126    	; 0x3a1e <TFT_Reset+0x11c>
	else if (__tmp > 65535)
    39a0:	6b a1       	ldd	r22, Y+35	; 0x23
    39a2:	7c a1       	ldd	r23, Y+36	; 0x24
    39a4:	8d a1       	ldd	r24, Y+37	; 0x25
    39a6:	9e a1       	ldd	r25, Y+38	; 0x26
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	3f ef       	ldi	r19, 0xFF	; 255
    39ac:	4f e7       	ldi	r20, 0x7F	; 127
    39ae:	57 e4       	ldi	r21, 0x47	; 71
    39b0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__gtsf2>
    39b4:	18 16       	cp	r1, r24
    39b6:	4c f5       	brge	.+82     	; 0x3a0a <TFT_Reset+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b8:	6f a1       	ldd	r22, Y+39	; 0x27
    39ba:	78 a5       	ldd	r23, Y+40	; 0x28
    39bc:	89 a5       	ldd	r24, Y+41	; 0x29
    39be:	9a a5       	ldd	r25, Y+42	; 0x2a
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e2       	ldi	r20, 0x20	; 32
    39c6:	51 e4       	ldi	r21, 0x41	; 65
    39c8:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	bc 01       	movw	r22, r24
    39d2:	cd 01       	movw	r24, r26
    39d4:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	9a a3       	std	Y+34, r25	; 0x22
    39de:	89 a3       	std	Y+33, r24	; 0x21
    39e0:	0f c0       	rjmp	.+30     	; 0x3a00 <TFT_Reset+0xfe>
    39e2:	88 ec       	ldi	r24, 0xC8	; 200
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	98 a3       	std	Y+32, r25	; 0x20
    39e8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39ec:	98 a1       	ldd	r25, Y+32	; 0x20
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	f1 f7       	brne	.-4      	; 0x39ee <TFT_Reset+0xec>
    39f2:	98 a3       	std	Y+32, r25	; 0x20
    39f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f6:	89 a1       	ldd	r24, Y+33	; 0x21
    39f8:	9a a1       	ldd	r25, Y+34	; 0x22
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	9a a3       	std	Y+34, r25	; 0x22
    39fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a00:	89 a1       	ldd	r24, Y+33	; 0x21
    3a02:	9a a1       	ldd	r25, Y+34	; 0x22
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	69 f7       	brne	.-38     	; 0x39e2 <TFT_Reset+0xe0>
    3a08:	14 c0       	rjmp	.+40     	; 0x3a32 <TFT_Reset+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a0a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a0c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a0e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a10:	9e a1       	ldd	r25, Y+38	; 0x26
    3a12:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	9a a3       	std	Y+34, r25	; 0x22
    3a1c:	89 a3       	std	Y+33, r24	; 0x21
    3a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a20:	9a a1       	ldd	r25, Y+34	; 0x22
    3a22:	9e 8f       	std	Y+30, r25	; 0x1e
    3a24:	8d 8f       	std	Y+29, r24	; 0x1d
    3a26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <TFT_Reset+0x128>
    3a2e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a30:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(50);

	/* RESET_IDLE */
	CLEAR_BIT(TFT_CTRL_PORT,TFT_RST);
    3a32:	a2 e3       	ldi	r26, 0x32	; 50
    3a34:	b0 e0       	ldi	r27, 0x00	; 0
    3a36:	e2 e3       	ldi	r30, 0x32	; 50
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	8f 77       	andi	r24, 0x7F	; 127
    3a3e:	8c 93       	st	X, r24
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a8 e4       	ldi	r26, 0x48	; 72
    3a46:	b2 e4       	ldi	r27, 0x42	; 66
    3a48:	89 8f       	std	Y+25, r24	; 0x19
    3a4a:	9a 8f       	std	Y+26, r25	; 0x1a
    3a4c:	ab 8f       	std	Y+27, r26	; 0x1b
    3a4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a50:	69 8d       	ldd	r22, Y+25	; 0x19
    3a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	4a ef       	ldi	r20, 0xFA	; 250
    3a5e:	54 e4       	ldi	r21, 0x44	; 68
    3a60:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	8d 8b       	std	Y+21, r24	; 0x15
    3a6a:	9e 8b       	std	Y+22, r25	; 0x16
    3a6c:	af 8b       	std	Y+23, r26	; 0x17
    3a6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a70:	6d 89       	ldd	r22, Y+21	; 0x15
    3a72:	7e 89       	ldd	r23, Y+22	; 0x16
    3a74:	8f 89       	ldd	r24, Y+23	; 0x17
    3a76:	98 8d       	ldd	r25, Y+24	; 0x18
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	2c f4       	brge	.+10     	; 0x3a92 <TFT_Reset+0x190>
		__ticks = 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 8b       	std	Y+20, r25	; 0x14
    3a8e:	8b 8b       	std	Y+19, r24	; 0x13
    3a90:	3f c0       	rjmp	.+126    	; 0x3b10 <TFT_Reset+0x20e>
	else if (__tmp > 65535)
    3a92:	6d 89       	ldd	r22, Y+21	; 0x15
    3a94:	7e 89       	ldd	r23, Y+22	; 0x16
    3a96:	8f 89       	ldd	r24, Y+23	; 0x17
    3a98:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	4f e7       	ldi	r20, 0x7F	; 127
    3aa0:	57 e4       	ldi	r21, 0x47	; 71
    3aa2:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__gtsf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	4c f5       	brge	.+82     	; 0x3afc <TFT_Reset+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aaa:	69 8d       	ldd	r22, Y+25	; 0x19
    3aac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ab0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e2       	ldi	r20, 0x20	; 32
    3ab8:	51 e4       	ldi	r21, 0x41	; 65
    3aba:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	9c 8b       	std	Y+20, r25	; 0x14
    3ad0:	8b 8b       	std	Y+19, r24	; 0x13
    3ad2:	0f c0       	rjmp	.+30     	; 0x3af2 <TFT_Reset+0x1f0>
    3ad4:	88 ec       	ldi	r24, 0xC8	; 200
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	9a 8b       	std	Y+18, r25	; 0x12
    3ada:	89 8b       	std	Y+17, r24	; 0x11
    3adc:	89 89       	ldd	r24, Y+17	; 0x11
    3ade:	9a 89       	ldd	r25, Y+18	; 0x12
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	f1 f7       	brne	.-4      	; 0x3ae0 <TFT_Reset+0x1de>
    3ae4:	9a 8b       	std	Y+18, r25	; 0x12
    3ae6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aea:	9c 89       	ldd	r25, Y+20	; 0x14
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	9c 8b       	std	Y+20, r25	; 0x14
    3af0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af2:	8b 89       	ldd	r24, Y+19	; 0x13
    3af4:	9c 89       	ldd	r25, Y+20	; 0x14
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	69 f7       	brne	.-38     	; 0x3ad4 <TFT_Reset+0x1d2>
    3afa:	14 c0       	rjmp	.+40     	; 0x3b24 <TFT_Reset+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afc:	6d 89       	ldd	r22, Y+21	; 0x15
    3afe:	7e 89       	ldd	r23, Y+22	; 0x16
    3b00:	8f 89       	ldd	r24, Y+23	; 0x17
    3b02:	98 8d       	ldd	r25, Y+24	; 0x18
    3b04:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	9c 8b       	std	Y+20, r25	; 0x14
    3b0e:	8b 8b       	std	Y+19, r24	; 0x13
    3b10:	8b 89       	ldd	r24, Y+19	; 0x13
    3b12:	9c 89       	ldd	r25, Y+20	; 0x14
    3b14:	98 8b       	std	Y+16, r25	; 0x10
    3b16:	8f 87       	std	Y+15, r24	; 0x0f
    3b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b1a:	98 89       	ldd	r25, Y+16	; 0x10
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <TFT_Reset+0x21a>
    3b20:	98 8b       	std	Y+16, r25	; 0x10
    3b22:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(50);

	/* RESET_IDLE */
	SET_BIT(TFT_CTRL_PORT,TFT_RST);
    3b24:	a2 e3       	ldi	r26, 0x32	; 50
    3b26:	b0 e0       	ldi	r27, 0x00	; 0
    3b28:	e2 e3       	ldi	r30, 0x32	; 50
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	80 81       	ld	r24, Z
    3b2e:	80 68       	ori	r24, 0x80	; 128
    3b30:	8c 93       	st	X, r24
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	a8 e4       	ldi	r26, 0x48	; 72
    3b38:	b2 e4       	ldi	r27, 0x42	; 66
    3b3a:	8b 87       	std	Y+11, r24	; 0x0b
    3b3c:	9c 87       	std	Y+12, r25	; 0x0c
    3b3e:	ad 87       	std	Y+13, r26	; 0x0d
    3b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	4a ef       	ldi	r20, 0xFA	; 250
    3b50:	54 e4       	ldi	r21, 0x44	; 68
    3b52:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	8f 83       	std	Y+7, r24	; 0x07
    3b5c:	98 87       	std	Y+8, r25	; 0x08
    3b5e:	a9 87       	std	Y+9, r26	; 0x09
    3b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b62:	6f 81       	ldd	r22, Y+7	; 0x07
    3b64:	78 85       	ldd	r23, Y+8	; 0x08
    3b66:	89 85       	ldd	r24, Y+9	; 0x09
    3b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e8       	ldi	r20, 0x80	; 128
    3b70:	5f e3       	ldi	r21, 0x3F	; 63
    3b72:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__ltsf2>
    3b76:	88 23       	and	r24, r24
    3b78:	2c f4       	brge	.+10     	; 0x3b84 <TFT_Reset+0x282>
		__ticks = 1;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	9e 83       	std	Y+6, r25	; 0x06
    3b80:	8d 83       	std	Y+5, r24	; 0x05
    3b82:	3f c0       	rjmp	.+126    	; 0x3c02 <TFT_Reset+0x300>
	else if (__tmp > 65535)
    3b84:	6f 81       	ldd	r22, Y+7	; 0x07
    3b86:	78 85       	ldd	r23, Y+8	; 0x08
    3b88:	89 85       	ldd	r24, Y+9	; 0x09
    3b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	3f ef       	ldi	r19, 0xFF	; 255
    3b90:	4f e7       	ldi	r20, 0x7F	; 127
    3b92:	57 e4       	ldi	r21, 0x47	; 71
    3b94:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__gtsf2>
    3b98:	18 16       	cp	r1, r24
    3b9a:	4c f5       	brge	.+82     	; 0x3bee <TFT_Reset+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	40 e2       	ldi	r20, 0x20	; 32
    3baa:	51 e4       	ldi	r21, 0x41	; 65
    3bac:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
    3bc4:	0f c0       	rjmp	.+30     	; 0x3be4 <TFT_Reset+0x2e2>
    3bc6:	88 ec       	ldi	r24, 0xC8	; 200
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	9c 83       	std	Y+4, r25	; 0x04
    3bcc:	8b 83       	std	Y+3, r24	; 0x03
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	f1 f7       	brne	.-4      	; 0x3bd2 <TFT_Reset+0x2d0>
    3bd6:	9c 83       	std	Y+4, r25	; 0x04
    3bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bda:	8d 81       	ldd	r24, Y+5	; 0x05
    3bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	9e 83       	std	Y+6, r25	; 0x06
    3be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be4:	8d 81       	ldd	r24, Y+5	; 0x05
    3be6:	9e 81       	ldd	r25, Y+6	; 0x06
    3be8:	00 97       	sbiw	r24, 0x00	; 0
    3bea:	69 f7       	brne	.-38     	; 0x3bc6 <TFT_Reset+0x2c4>
    3bec:	14 c0       	rjmp	.+40     	; 0x3c16 <TFT_Reset+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bee:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf0:	78 85       	ldd	r23, Y+8	; 0x08
    3bf2:	89 85       	ldd	r24, Y+9	; 0x09
    3bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf6:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	9e 83       	std	Y+6, r25	; 0x06
    3c00:	8d 83       	std	Y+5, r24	; 0x05
    3c02:	8d 81       	ldd	r24, Y+5	; 0x05
    3c04:	9e 81       	ldd	r25, Y+6	; 0x06
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	f1 f7       	brne	.-4      	; 0x3c0e <TFT_Reset+0x30c>
    3c12:	9a 83       	std	Y+2, r25	; 0x02
    3c14:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(50);

}
    3c16:	aa 96       	adiw	r28, 0x2a	; 42
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	08 95       	ret

00003c28 <TFT_Set_Rotation>:

static void TFT_Set_Rotation(void)
{
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62

	TFT_Write_Cmd_Byte(0x36);
    3c30:	86 e3       	ldi	r24, 0x36	; 54
    3c32:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
		gu16_TFT_W = TFT_WIDTH;
		gu16_TFT_H = TFT_HIGHT;

	#elif(TFT_DISPLAY_MODE == TFT_LANDSCAPE)

		TFT_Write_Data_Byte(LANDSCAPE);
    3c36:	88 e2       	ldi	r24, 0x28	; 40
    3c38:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
		gu16_TFT_W = TFT_HIGHT;
    3c3c:	80 ee       	ldi	r24, 0xE0	; 224
    3c3e:	91 e0       	ldi	r25, 0x01	; 1
    3c40:	90 93 b7 00 	sts	0x00B7, r25
    3c44:	80 93 b6 00 	sts	0x00B6, r24
		gu16_TFT_H = TFT_WIDTH;
    3c48:	80 e4       	ldi	r24, 0x40	; 64
    3c4a:	91 e0       	ldi	r25, 0x01	; 1
    3c4c:	90 93 b9 00 	sts	0x00B9, r25
    3c50:	80 93 b8 00 	sts	0x00B8, r24

		TFT_Write_Data_Byte(LANDSCAPE_REV);
		gu16_TFT_W = TFT_HIGHT;
		gu16_TFT_H = TFT_WIDTH;
	#endif
}
    3c54:	cf 91       	pop	r28
    3c56:	df 91       	pop	r29
    3c58:	08 95       	ret

00003c5a <TFT_Init>:
/***************************************************************************************/
/* TFT Provided FUNCTIONS for USER		         		                               */
/***************************************************************************************/
/***************************************************************************************/
void TFT_Init(void)
{
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	6c 97       	sbiw	r28, 0x1c	; 28
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
	/* SET CONTROL PINS OUTPUT */
	SET_BIT(TFT_CTRL_PORT_DIR,TFT_WR);
    3c6e:	a1 e3       	ldi	r26, 0x31	; 49
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	e1 e3       	ldi	r30, 0x31	; 49
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	80 81       	ld	r24, Z
    3c78:	80 61       	ori	r24, 0x10	; 16
    3c7a:	8c 93       	st	X, r24
	SET_BIT(TFT_CTRL_PORT_DIR,TFT_RS);
    3c7c:	a1 e3       	ldi	r26, 0x31	; 49
    3c7e:	b0 e0       	ldi	r27, 0x00	; 0
    3c80:	e1 e3       	ldi	r30, 0x31	; 49
    3c82:	f0 e0       	ldi	r31, 0x00	; 0
    3c84:	80 81       	ld	r24, Z
    3c86:	80 62       	ori	r24, 0x20	; 32
    3c88:	8c 93       	st	X, r24
	SET_BIT(TFT_CTRL_PORT_DIR,TFT_CS);
    3c8a:	a1 e3       	ldi	r26, 0x31	; 49
    3c8c:	b0 e0       	ldi	r27, 0x00	; 0
    3c8e:	e1 e3       	ldi	r30, 0x31	; 49
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	80 81       	ld	r24, Z
    3c94:	80 64       	ori	r24, 0x40	; 64
    3c96:	8c 93       	st	X, r24
	SET_BIT(TFT_CTRL_PORT_DIR,TFT_RD);
    3c98:	a1 e3       	ldi	r26, 0x31	; 49
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	e1 e3       	ldi	r30, 0x31	; 49
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	80 81       	ld	r24, Z
    3ca2:	88 60       	ori	r24, 0x08	; 8
    3ca4:	8c 93       	st	X, r24
	SET_BIT(TFT_CTRL_PORT_DIR,TFT_RST);
    3ca6:	a1 e3       	ldi	r26, 0x31	; 49
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	e1 e3       	ldi	r30, 0x31	; 49
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	80 81       	ld	r24, Z
    3cb0:	80 68       	ori	r24, 0x80	; 128
    3cb2:	8c 93       	st	X, r24
	/* SET DATA PINS OUTPUT */
	TFT_DATA_PORT_DIR = 0xFF ;
    3cb4:	e4 e3       	ldi	r30, 0x34	; 52
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	8f ef       	ldi	r24, 0xFF	; 255
    3cba:	80 83       	st	Z, r24

	TFT_Reset();
    3cbc:	0e 94 81 1c 	call	0x3902	; 0x3902 <TFT_Reset>

	TFT_Write_Cmd_Byte(0x11); // Sleep out, also SW reset
    3cc0:	81 e1       	ldi	r24, 0x11	; 17
    3cc2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	a8 e4       	ldi	r26, 0x48	; 72
    3ccc:	b2 e4       	ldi	r27, 0x42	; 66
    3cce:	89 8f       	std	Y+25, r24	; 0x19
    3cd0:	9a 8f       	std	Y+26, r25	; 0x1a
    3cd2:	ab 8f       	std	Y+27, r26	; 0x1b
    3cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd6:	69 8d       	ldd	r22, Y+25	; 0x19
    3cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	4a ef       	ldi	r20, 0xFA	; 250
    3ce4:	54 e4       	ldi	r21, 0x44	; 68
    3ce6:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	8d 8b       	std	Y+21, r24	; 0x15
    3cf0:	9e 8b       	std	Y+22, r25	; 0x16
    3cf2:	af 8b       	std	Y+23, r26	; 0x17
    3cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    3cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    3cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e8       	ldi	r20, 0x80	; 128
    3d04:	5f e3       	ldi	r21, 0x3F	; 63
    3d06:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__ltsf2>
    3d0a:	88 23       	and	r24, r24
    3d0c:	2c f4       	brge	.+10     	; 0x3d18 <TFT_Init+0xbe>
		__ticks = 1;
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	9c 8b       	std	Y+20, r25	; 0x14
    3d14:	8b 8b       	std	Y+19, r24	; 0x13
    3d16:	3f c0       	rjmp	.+126    	; 0x3d96 <TFT_Init+0x13c>
	else if (__tmp > 65535)
    3d18:	6d 89       	ldd	r22, Y+21	; 0x15
    3d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	3f ef       	ldi	r19, 0xFF	; 255
    3d24:	4f e7       	ldi	r20, 0x7F	; 127
    3d26:	57 e4       	ldi	r21, 0x47	; 71
    3d28:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__gtsf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	4c f5       	brge	.+82     	; 0x3d82 <TFT_Init+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d30:	69 8d       	ldd	r22, Y+25	; 0x19
    3d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e2       	ldi	r20, 0x20	; 32
    3d3e:	51 e4       	ldi	r21, 0x41	; 65
    3d40:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	bc 01       	movw	r22, r24
    3d4a:	cd 01       	movw	r24, r26
    3d4c:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	9c 8b       	std	Y+20, r25	; 0x14
    3d56:	8b 8b       	std	Y+19, r24	; 0x13
    3d58:	0f c0       	rjmp	.+30     	; 0x3d78 <TFT_Init+0x11e>
    3d5a:	88 ec       	ldi	r24, 0xC8	; 200
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	9a 8b       	std	Y+18, r25	; 0x12
    3d60:	89 8b       	std	Y+17, r24	; 0x11
    3d62:	89 89       	ldd	r24, Y+17	; 0x11
    3d64:	9a 89       	ldd	r25, Y+18	; 0x12
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	f1 f7       	brne	.-4      	; 0x3d66 <TFT_Init+0x10c>
    3d6a:	9a 8b       	std	Y+18, r25	; 0x12
    3d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d70:	9c 89       	ldd	r25, Y+20	; 0x14
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	9c 8b       	std	Y+20, r25	; 0x14
    3d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d78:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7c:	00 97       	sbiw	r24, 0x00	; 0
    3d7e:	69 f7       	brne	.-38     	; 0x3d5a <TFT_Init+0x100>
    3d80:	14 c0       	rjmp	.+40     	; 0x3daa <TFT_Init+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d82:	6d 89       	ldd	r22, Y+21	; 0x15
    3d84:	7e 89       	ldd	r23, Y+22	; 0x16
    3d86:	8f 89       	ldd	r24, Y+23	; 0x17
    3d88:	98 8d       	ldd	r25, Y+24	; 0x18
    3d8a:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	9c 8b       	std	Y+20, r25	; 0x14
    3d94:	8b 8b       	std	Y+19, r24	; 0x13
    3d96:	8b 89       	ldd	r24, Y+19	; 0x13
    3d98:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9a:	98 8b       	std	Y+16, r25	; 0x10
    3d9c:	8f 87       	std	Y+15, r24	; 0x0f
    3d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da0:	98 89       	ldd	r25, Y+16	; 0x10
    3da2:	01 97       	sbiw	r24, 0x01	; 1
    3da4:	f1 f7       	brne	.-4      	; 0x3da2 <TFT_Init+0x148>
    3da6:	98 8b       	std	Y+16, r25	; 0x10
    3da8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);

	TFT_Write_Cmd_Byte(0x3A);
    3daa:	8a e3       	ldi	r24, 0x3A	; 58
    3dac:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Byte(0x55);
    3db0:	85 e5       	ldi	r24, 0x55	; 85
    3db2:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>

	TFT_Write_Cmd_Byte(0xC2);
    3db6:	82 ec       	ldi	r24, 0xC2	; 194
    3db8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Byte(0x44);
    3dbc:	84 e4       	ldi	r24, 0x44	; 68
    3dbe:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>

	TFT_Write_Cmd_Byte(0xC5);
    3dc2:	85 ec       	ldi	r24, 0xC5	; 197
    3dc4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Byte(0x00);
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x00);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x00);
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x00);
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>

	TFT_Write_Cmd_Byte(0xE0);
    3de0:	80 ee       	ldi	r24, 0xE0	; 224
    3de2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Byte(0x0F);
    3de6:	8f e0       	ldi	r24, 0x0F	; 15
    3de8:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x1F);
    3dec:	8f e1       	ldi	r24, 0x1F	; 31
    3dee:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x1C);
    3df2:	8c e1       	ldi	r24, 0x1C	; 28
    3df4:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x0C);
    3df8:	8c e0       	ldi	r24, 0x0C	; 12
    3dfa:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x0F);
    3dfe:	8f e0       	ldi	r24, 0x0F	; 15
    3e00:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x08);
    3e04:	88 e0       	ldi	r24, 0x08	; 8
    3e06:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x48);
    3e0a:	88 e4       	ldi	r24, 0x48	; 72
    3e0c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x98);
    3e10:	88 e9       	ldi	r24, 0x98	; 152
    3e12:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x37);
    3e16:	87 e3       	ldi	r24, 0x37	; 55
    3e18:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x0A);
    3e1c:	8a e0       	ldi	r24, 0x0A	; 10
    3e1e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x13);
    3e22:	83 e1       	ldi	r24, 0x13	; 19
    3e24:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x04);
    3e28:	84 e0       	ldi	r24, 0x04	; 4
    3e2a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x11);
    3e2e:	81 e1       	ldi	r24, 0x11	; 17
    3e30:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x0D);
    3e34:	8d e0       	ldi	r24, 0x0D	; 13
    3e36:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x00);
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>

	TFT_Write_Cmd_Byte(0xE1);
    3e40:	81 ee       	ldi	r24, 0xE1	; 225
    3e42:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Byte(0x0F);
    3e46:	8f e0       	ldi	r24, 0x0F	; 15
    3e48:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x32);
    3e4c:	82 e3       	ldi	r24, 0x32	; 50
    3e4e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x2E);
    3e52:	8e e2       	ldi	r24, 0x2E	; 46
    3e54:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x0B);
    3e58:	8b e0       	ldi	r24, 0x0B	; 11
    3e5a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x0D);
    3e5e:	8d e0       	ldi	r24, 0x0D	; 13
    3e60:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x05);
    3e64:	85 e0       	ldi	r24, 0x05	; 5
    3e66:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x47);
    3e6a:	87 e4       	ldi	r24, 0x47	; 71
    3e6c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x75);
    3e70:	85 e7       	ldi	r24, 0x75	; 117
    3e72:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x37);
    3e76:	87 e3       	ldi	r24, 0x37	; 55
    3e78:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x06);
    3e7c:	86 e0       	ldi	r24, 0x06	; 6
    3e7e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x10);
    3e82:	80 e1       	ldi	r24, 0x10	; 16
    3e84:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x03);
    3e88:	83 e0       	ldi	r24, 0x03	; 3
    3e8a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x24);
    3e8e:	84 e2       	ldi	r24, 0x24	; 36
    3e90:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x20);
    3e94:	80 e2       	ldi	r24, 0x20	; 32
    3e96:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>
	TFT_Write_Data_Byte(0x00);
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>

	TFT_Write_Cmd_Byte(0x20);                     // display inversion OFF
    3ea0:	80 e2       	ldi	r24, 0x20	; 32
    3ea2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>

	TFT_Write_Cmd_Byte(0x36);
    3ea6:	86 e3       	ldi	r24, 0x36	; 54
    3ea8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
	TFT_Write_Data_Byte(0x48);
    3eac:	88 e4       	ldi	r24, 0x48	; 72
    3eae:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TFT_Write_Data_Byte>

	TFT_Write_Cmd_Byte(0x29);                     // display on
    3eb2:	89 e2       	ldi	r24, 0x29	; 41
    3eb4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	a8 e4       	ldi	r26, 0x48	; 72
    3ebe:	b2 e4       	ldi	r27, 0x42	; 66
    3ec0:	8b 87       	std	Y+11, r24	; 0x0b
    3ec2:	9c 87       	std	Y+12, r25	; 0x0c
    3ec4:	ad 87       	std	Y+13, r26	; 0x0d
    3ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	4a ef       	ldi	r20, 0xFA	; 250
    3ed6:	54 e4       	ldi	r21, 0x44	; 68
    3ed8:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	8f 83       	std	Y+7, r24	; 0x07
    3ee2:	98 87       	std	Y+8, r25	; 0x08
    3ee4:	a9 87       	std	Y+9, r26	; 0x09
    3ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eea:	78 85       	ldd	r23, Y+8	; 0x08
    3eec:	89 85       	ldd	r24, Y+9	; 0x09
    3eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e8       	ldi	r20, 0x80	; 128
    3ef6:	5f e3       	ldi	r21, 0x3F	; 63
    3ef8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__ltsf2>
    3efc:	88 23       	and	r24, r24
    3efe:	2c f4       	brge	.+10     	; 0x3f0a <TFT_Init+0x2b0>
		__ticks = 1;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	9e 83       	std	Y+6, r25	; 0x06
    3f06:	8d 83       	std	Y+5, r24	; 0x05
    3f08:	3f c0       	rjmp	.+126    	; 0x3f88 <TFT_Init+0x32e>
	else if (__tmp > 65535)
    3f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f0c:	78 85       	ldd	r23, Y+8	; 0x08
    3f0e:	89 85       	ldd	r24, Y+9	; 0x09
    3f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	3f ef       	ldi	r19, 0xFF	; 255
    3f16:	4f e7       	ldi	r20, 0x7F	; 127
    3f18:	57 e4       	ldi	r21, 0x47	; 71
    3f1a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__gtsf2>
    3f1e:	18 16       	cp	r1, r24
    3f20:	4c f5       	brge	.+82     	; 0x3f74 <TFT_Init+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e2       	ldi	r20, 0x20	; 32
    3f30:	51 e4       	ldi	r21, 0x41	; 65
    3f32:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	9e 83       	std	Y+6, r25	; 0x06
    3f48:	8d 83       	std	Y+5, r24	; 0x05
    3f4a:	0f c0       	rjmp	.+30     	; 0x3f6a <TFT_Init+0x310>
    3f4c:	88 ec       	ldi	r24, 0xC8	; 200
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	9c 83       	std	Y+4, r25	; 0x04
    3f52:	8b 83       	std	Y+3, r24	; 0x03
    3f54:	8b 81       	ldd	r24, Y+3	; 0x03
    3f56:	9c 81       	ldd	r25, Y+4	; 0x04
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <TFT_Init+0x2fe>
    3f5c:	9c 83       	std	Y+4, r25	; 0x04
    3f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f60:	8d 81       	ldd	r24, Y+5	; 0x05
    3f62:	9e 81       	ldd	r25, Y+6	; 0x06
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	9e 83       	std	Y+6, r25	; 0x06
    3f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	69 f7       	brne	.-38     	; 0x3f4c <TFT_Init+0x2f2>
    3f72:	14 c0       	rjmp	.+40     	; 0x3f9c <TFT_Init+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f74:	6f 81       	ldd	r22, Y+7	; 0x07
    3f76:	78 85       	ldd	r23, Y+8	; 0x08
    3f78:	89 85       	ldd	r24, Y+9	; 0x09
    3f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7c:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9e 83       	std	Y+6, r25	; 0x06
    3f86:	8d 83       	std	Y+5, r24	; 0x05
    3f88:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8c:	9a 83       	std	Y+2, r25	; 0x02
    3f8e:	89 83       	std	Y+1, r24	; 0x01
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	9a 81       	ldd	r25, Y+2	; 0x02
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	f1 f7       	brne	.-4      	; 0x3f94 <TFT_Init+0x33a>
    3f98:	9a 83       	std	Y+2, r25	; 0x02
    3f9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	TFT_Set_Rotation();
    3f9c:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <TFT_Set_Rotation>
}
    3fa0:	6c 96       	adiw	r28, 0x1c	; 28
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	cf 91       	pop	r28
    3fae:	df 91       	pop	r29
    3fb0:	08 95       	ret

00003fb2 <TFT_ClearDisplay>:

void TFT_ClearDisplay(uint16_t au16_Color)
{
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	00 d0       	rcall	.+0      	; 0x3fb8 <TFT_ClearDisplay+0x6>
    3fb8:	00 d0       	rcall	.+0      	; 0x3fba <TFT_ClearDisplay+0x8>
    3fba:	00 d0       	rcall	.+0      	; 0x3fbc <TFT_ClearDisplay+0xa>
    3fbc:	cd b7       	in	r28, 0x3d	; 61
    3fbe:	de b7       	in	r29, 0x3e	; 62
    3fc0:	9e 83       	std	Y+6, r25	; 0x06
    3fc2:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t Row,Col;

	TFT_SetAddrWindow(INITIAL, INITIAL, gu16_TFT_W -1U, gu16_TFT_H -1U);
    3fc4:	80 91 b6 00 	lds	r24, 0x00B6
    3fc8:	90 91 b7 00 	lds	r25, 0x00B7
    3fcc:	ac 01       	movw	r20, r24
    3fce:	41 50       	subi	r20, 0x01	; 1
    3fd0:	50 40       	sbci	r21, 0x00	; 0
    3fd2:	80 91 b8 00 	lds	r24, 0x00B8
    3fd6:	90 91 b9 00 	lds	r25, 0x00B9
    3fda:	9c 01       	movw	r18, r24
    3fdc:	21 50       	subi	r18, 0x01	; 1
    3fde:	30 40       	sbci	r19, 0x00	; 0
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	60 e0       	ldi	r22, 0x00	; 0
    3fe6:	70 e0       	ldi	r23, 0x00	; 0
    3fe8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TFT_SetAddrWindow>
	TFT_Write_Cmd_Byte(TFT_RAMWR);
    3fec:	8c e2       	ldi	r24, 0x2C	; 44
    3fee:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>

	for(Row = NULL; Row < gu16_TFT_W; Row++)
    3ff2:	1c 82       	std	Y+4, r1	; 0x04
    3ff4:	1b 82       	std	Y+3, r1	; 0x03
    3ff6:	53 c0       	rjmp	.+166    	; 0x409e <TFT_ClearDisplay+0xec>
	{
		for (Col = NULL; Col < gu16_TFT_H; Col++)
    3ff8:	1a 82       	std	Y+2, r1	; 0x02
    3ffa:	19 82       	std	Y+1, r1	; 0x01
    3ffc:	41 c0       	rjmp	.+130    	; 0x4080 <TFT_ClearDisplay+0xce>
		{
			TFT_Write_Data_Word(au16_Color);
    3ffe:	a2 e3       	ldi	r26, 0x32	; 50
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	e2 e3       	ldi	r30, 0x32	; 50
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	8f 7b       	andi	r24, 0xBF	; 191
    400a:	8c 93       	st	X, r24
    400c:	a2 e3       	ldi	r26, 0x32	; 50
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	e2 e3       	ldi	r30, 0x32	; 50
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	80 62       	ori	r24, 0x20	; 32
    4018:	8c 93       	st	X, r24
    401a:	e5 e3       	ldi	r30, 0x35	; 53
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	9e 81       	ldd	r25, Y+6	; 0x06
    4022:	89 2f       	mov	r24, r25
    4024:	99 27       	eor	r25, r25
    4026:	80 83       	st	Z, r24
    4028:	a2 e3       	ldi	r26, 0x32	; 50
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	e2 e3       	ldi	r30, 0x32	; 50
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	8f 7e       	andi	r24, 0xEF	; 239
    4034:	8c 93       	st	X, r24
    4036:	a2 e3       	ldi	r26, 0x32	; 50
    4038:	b0 e0       	ldi	r27, 0x00	; 0
    403a:	e2 e3       	ldi	r30, 0x32	; 50
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	80 81       	ld	r24, Z
    4040:	80 61       	ori	r24, 0x10	; 16
    4042:	8c 93       	st	X, r24
    4044:	e5 e3       	ldi	r30, 0x35	; 53
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	8d 81       	ldd	r24, Y+5	; 0x05
    404a:	80 83       	st	Z, r24
    404c:	a2 e3       	ldi	r26, 0x32	; 50
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	e2 e3       	ldi	r30, 0x32	; 50
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	8f 7e       	andi	r24, 0xEF	; 239
    4058:	8c 93       	st	X, r24
    405a:	a2 e3       	ldi	r26, 0x32	; 50
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	e2 e3       	ldi	r30, 0x32	; 50
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	80 81       	ld	r24, Z
    4064:	80 61       	ori	r24, 0x10	; 16
    4066:	8c 93       	st	X, r24
    4068:	a2 e3       	ldi	r26, 0x32	; 50
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	e2 e3       	ldi	r30, 0x32	; 50
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	80 64       	ori	r24, 0x40	; 64
    4074:	8c 93       	st	X, r24
	TFT_SetAddrWindow(INITIAL, INITIAL, gu16_TFT_W -1U, gu16_TFT_H -1U);
	TFT_Write_Cmd_Byte(TFT_RAMWR);

	for(Row = NULL; Row < gu16_TFT_W; Row++)
	{
		for (Col = NULL; Col < gu16_TFT_H; Col++)
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	9a 81       	ldd	r25, Y+2	; 0x02
    407a:	01 96       	adiw	r24, 0x01	; 1
    407c:	9a 83       	std	Y+2, r25	; 0x02
    407e:	89 83       	std	Y+1, r24	; 0x01
    4080:	20 91 b8 00 	lds	r18, 0x00B8
    4084:	30 91 b9 00 	lds	r19, 0x00B9
    4088:	89 81       	ldd	r24, Y+1	; 0x01
    408a:	9a 81       	ldd	r25, Y+2	; 0x02
    408c:	82 17       	cp	r24, r18
    408e:	93 07       	cpc	r25, r19
    4090:	08 f4       	brcc	.+2      	; 0x4094 <TFT_ClearDisplay+0xe2>
    4092:	b5 cf       	rjmp	.-150    	; 0x3ffe <TFT_ClearDisplay+0x4c>
	uint16_t Row,Col;

	TFT_SetAddrWindow(INITIAL, INITIAL, gu16_TFT_W -1U, gu16_TFT_H -1U);
	TFT_Write_Cmd_Byte(TFT_RAMWR);

	for(Row = NULL; Row < gu16_TFT_W; Row++)
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	9c 81       	ldd	r25, Y+4	; 0x04
    4098:	01 96       	adiw	r24, 0x01	; 1
    409a:	9c 83       	std	Y+4, r25	; 0x04
    409c:	8b 83       	std	Y+3, r24	; 0x03
    409e:	20 91 b6 00 	lds	r18, 0x00B6
    40a2:	30 91 b7 00 	lds	r19, 0x00B7
    40a6:	8b 81       	ldd	r24, Y+3	; 0x03
    40a8:	9c 81       	ldd	r25, Y+4	; 0x04
    40aa:	82 17       	cp	r24, r18
    40ac:	93 07       	cpc	r25, r19
    40ae:	08 f4       	brcc	.+2      	; 0x40b2 <TFT_ClearDisplay+0x100>
    40b0:	a3 cf       	rjmp	.-186    	; 0x3ff8 <TFT_ClearDisplay+0x46>
		for (Col = NULL; Col < gu16_TFT_H; Col++)
		{
			TFT_Write_Data_Word(au16_Color);
		}
	}
}
    40b2:	26 96       	adiw	r28, 0x06	; 6
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	cf 91       	pop	r28
    40c0:	df 91       	pop	r29
    40c2:	08 95       	ret

000040c4 <TFT_Fill_Rect>:

/***************************************************************************************/
/* Draw FUNCTIONS         		                         		      				   */
/***************************************************************************************/
void TFT_Fill_Rect(uint16_t au16_X, uint16_t au16_Y, uint16_t au16_Width, uint16_t au16_Hight, uint16_t au16_Color)
{
    40c4:	0f 93       	push	r16
    40c6:	1f 93       	push	r17
    40c8:	df 93       	push	r29
    40ca:	cf 93       	push	r28
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
    40d0:	2d 97       	sbiw	r28, 0x0d	; 13
    40d2:	0f b6       	in	r0, 0x3f	; 63
    40d4:	f8 94       	cli
    40d6:	de bf       	out	0x3e, r29	; 62
    40d8:	0f be       	out	0x3f, r0	; 63
    40da:	cd bf       	out	0x3d, r28	; 61
    40dc:	9c 83       	std	Y+4, r25	; 0x04
    40de:	8b 83       	std	Y+3, r24	; 0x03
    40e0:	7e 83       	std	Y+6, r23	; 0x06
    40e2:	6d 83       	std	Y+5, r22	; 0x05
    40e4:	58 87       	std	Y+8, r21	; 0x08
    40e6:	4f 83       	std	Y+7, r20	; 0x07
    40e8:	3a 87       	std	Y+10, r19	; 0x0a
    40ea:	29 87       	std	Y+9, r18	; 0x09
    40ec:	1c 87       	std	Y+12, r17	; 0x0c
    40ee:	0b 87       	std	Y+11, r16	; 0x0b
	uint16_t u16_Max;

	u16_Max = au16_X + au16_Width;
    40f0:	2b 81       	ldd	r18, Y+3	; 0x03
    40f2:	3c 81       	ldd	r19, Y+4	; 0x04
    40f4:	8f 81       	ldd	r24, Y+7	; 0x07
    40f6:	98 85       	ldd	r25, Y+8	; 0x08
    40f8:	82 0f       	add	r24, r18
    40fa:	93 1f       	adc	r25, r19
    40fc:	9a 83       	std	Y+2, r25	; 0x02
    40fe:	89 83       	std	Y+1, r24	; 0x01
	if (u16_Max > gu16_TFT_W)
    4100:	20 91 b6 00 	lds	r18, 0x00B6
    4104:	30 91 b7 00 	lds	r19, 0x00B7
    4108:	89 81       	ldd	r24, Y+1	; 0x01
    410a:	9a 81       	ldd	r25, Y+2	; 0x02
    410c:	28 17       	cp	r18, r24
    410e:	39 07       	cpc	r19, r25
    4110:	80 f4       	brcc	.+32     	; 0x4132 <TFT_Fill_Rect+0x6e>
	{
		u16_Max = gu16_TFT_W;
    4112:	80 91 b6 00 	lds	r24, 0x00B6
    4116:	90 91 b7 00 	lds	r25, 0x00B7
    411a:	9a 83       	std	Y+2, r25	; 0x02
    411c:	89 83       	std	Y+1, r24	; 0x01
		au16_Width = u16_Max - au16_X;
    411e:	29 81       	ldd	r18, Y+1	; 0x01
    4120:	3a 81       	ldd	r19, Y+2	; 0x02
    4122:	8b 81       	ldd	r24, Y+3	; 0x03
    4124:	9c 81       	ldd	r25, Y+4	; 0x04
    4126:	a9 01       	movw	r20, r18
    4128:	48 1b       	sub	r20, r24
    412a:	59 0b       	sbc	r21, r25
    412c:	ca 01       	movw	r24, r20
    412e:	98 87       	std	Y+8, r25	; 0x08
    4130:	8f 83       	std	Y+7, r24	; 0x07
	}

	u16_Max = au16_Y + au16_Hight;
    4132:	2d 81       	ldd	r18, Y+5	; 0x05
    4134:	3e 81       	ldd	r19, Y+6	; 0x06
    4136:	89 85       	ldd	r24, Y+9	; 0x09
    4138:	9a 85       	ldd	r25, Y+10	; 0x0a
    413a:	82 0f       	add	r24, r18
    413c:	93 1f       	adc	r25, r19
    413e:	9a 83       	std	Y+2, r25	; 0x02
    4140:	89 83       	std	Y+1, r24	; 0x01
	if (u16_Max > gu16_TFT_H)
    4142:	20 91 b8 00 	lds	r18, 0x00B8
    4146:	30 91 b9 00 	lds	r19, 0x00B9
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	9a 81       	ldd	r25, Y+2	; 0x02
    414e:	28 17       	cp	r18, r24
    4150:	39 07       	cpc	r19, r25
    4152:	80 f4       	brcc	.+32     	; 0x4174 <TFT_Fill_Rect+0xb0>
	{
		u16_Max = gu16_TFT_H;
    4154:	80 91 b8 00 	lds	r24, 0x00B8
    4158:	90 91 b9 00 	lds	r25, 0x00B9
    415c:	9a 83       	std	Y+2, r25	; 0x02
    415e:	89 83       	std	Y+1, r24	; 0x01
		au16_Hight = u16_Max - au16_Y;
    4160:	29 81       	ldd	r18, Y+1	; 0x01
    4162:	3a 81       	ldd	r19, Y+2	; 0x02
    4164:	8d 81       	ldd	r24, Y+5	; 0x05
    4166:	9e 81       	ldd	r25, Y+6	; 0x06
    4168:	a9 01       	movw	r20, r18
    416a:	48 1b       	sub	r20, r24
    416c:	59 0b       	sbc	r21, r25
    416e:	ca 01       	movw	r24, r20
    4170:	9a 87       	std	Y+10, r25	; 0x0a
    4172:	89 87       	std	Y+9, r24	; 0x09
	}

	TFT_SetAddrWindow(au16_X, au16_Y, au16_X + au16_Width - 1U, au16_Y + au16_Hight - 1U);
    4174:	2b 81       	ldd	r18, Y+3	; 0x03
    4176:	3c 81       	ldd	r19, Y+4	; 0x04
    4178:	8f 81       	ldd	r24, Y+7	; 0x07
    417a:	98 85       	ldd	r25, Y+8	; 0x08
    417c:	82 0f       	add	r24, r18
    417e:	93 1f       	adc	r25, r19
    4180:	ac 01       	movw	r20, r24
    4182:	41 50       	subi	r20, 0x01	; 1
    4184:	50 40       	sbci	r21, 0x00	; 0
    4186:	2d 81       	ldd	r18, Y+5	; 0x05
    4188:	3e 81       	ldd	r19, Y+6	; 0x06
    418a:	89 85       	ldd	r24, Y+9	; 0x09
    418c:	9a 85       	ldd	r25, Y+10	; 0x0a
    418e:	82 0f       	add	r24, r18
    4190:	93 1f       	adc	r25, r19
    4192:	fc 01       	movw	r30, r24
    4194:	31 97       	sbiw	r30, 0x01	; 1
    4196:	8b 81       	ldd	r24, Y+3	; 0x03
    4198:	9c 81       	ldd	r25, Y+4	; 0x04
    419a:	2d 81       	ldd	r18, Y+5	; 0x05
    419c:	3e 81       	ldd	r19, Y+6	; 0x06
    419e:	b9 01       	movw	r22, r18
    41a0:	9f 01       	movw	r18, r30
    41a2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TFT_SetAddrWindow>
	TFT_Write_Cmd_Byte(TFT_RAMWR);
    41a6:	8c e2       	ldi	r24, 0x2C	; 44
    41a8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TFT_Write_Cmd_Byte>
    41ac:	4a c0       	rjmp	.+148    	; 0x4242 <TFT_Fill_Rect+0x17e>

	while (au16_Hight-- > NULL)
	{
		u16_Max = au16_Width;
    41ae:	8f 81       	ldd	r24, Y+7	; 0x07
    41b0:	98 85       	ldd	r25, Y+8	; 0x08
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	89 83       	std	Y+1, r24	; 0x01
		do{
			TFT_Write_Data_Word(au16_Color);
    41b6:	a2 e3       	ldi	r26, 0x32	; 50
    41b8:	b0 e0       	ldi	r27, 0x00	; 0
    41ba:	e2 e3       	ldi	r30, 0x32	; 50
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	80 81       	ld	r24, Z
    41c0:	8f 7b       	andi	r24, 0xBF	; 191
    41c2:	8c 93       	st	X, r24
    41c4:	a2 e3       	ldi	r26, 0x32	; 50
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	e2 e3       	ldi	r30, 0x32	; 50
    41ca:	f0 e0       	ldi	r31, 0x00	; 0
    41cc:	80 81       	ld	r24, Z
    41ce:	80 62       	ori	r24, 0x20	; 32
    41d0:	8c 93       	st	X, r24
    41d2:	e5 e3       	ldi	r30, 0x35	; 53
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    41d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    41da:	89 2f       	mov	r24, r25
    41dc:	99 27       	eor	r25, r25
    41de:	80 83       	st	Z, r24
    41e0:	a2 e3       	ldi	r26, 0x32	; 50
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	e2 e3       	ldi	r30, 0x32	; 50
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	80 81       	ld	r24, Z
    41ea:	8f 7e       	andi	r24, 0xEF	; 239
    41ec:	8c 93       	st	X, r24
    41ee:	a2 e3       	ldi	r26, 0x32	; 50
    41f0:	b0 e0       	ldi	r27, 0x00	; 0
    41f2:	e2 e3       	ldi	r30, 0x32	; 50
    41f4:	f0 e0       	ldi	r31, 0x00	; 0
    41f6:	80 81       	ld	r24, Z
    41f8:	80 61       	ori	r24, 0x10	; 16
    41fa:	8c 93       	st	X, r24
    41fc:	e5 e3       	ldi	r30, 0x35	; 53
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	8b 85       	ldd	r24, Y+11	; 0x0b
    4202:	80 83       	st	Z, r24
    4204:	a2 e3       	ldi	r26, 0x32	; 50
    4206:	b0 e0       	ldi	r27, 0x00	; 0
    4208:	e2 e3       	ldi	r30, 0x32	; 50
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	80 81       	ld	r24, Z
    420e:	8f 7e       	andi	r24, 0xEF	; 239
    4210:	8c 93       	st	X, r24
    4212:	a2 e3       	ldi	r26, 0x32	; 50
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	e2 e3       	ldi	r30, 0x32	; 50
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	80 81       	ld	r24, Z
    421c:	80 61       	ori	r24, 0x10	; 16
    421e:	8c 93       	st	X, r24
    4220:	a2 e3       	ldi	r26, 0x32	; 50
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	e2 e3       	ldi	r30, 0x32	; 50
    4226:	f0 e0       	ldi	r31, 0x00	; 0
    4228:	80 81       	ld	r24, Z
    422a:	80 64       	ori	r24, 0x40	; 64
    422c:	8c 93       	st	X, r24
		} while (--u16_Max != NULL);
    422e:	89 81       	ldd	r24, Y+1	; 0x01
    4230:	9a 81       	ldd	r25, Y+2	; 0x02
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	9a 83       	std	Y+2, r25	; 0x02
    4236:	89 83       	std	Y+1, r24	; 0x01
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	09 f0       	breq	.+2      	; 0x4242 <TFT_Fill_Rect+0x17e>
    4240:	ba cf       	rjmp	.-140    	; 0x41b6 <TFT_Fill_Rect+0xf2>
	}

	TFT_SetAddrWindow(au16_X, au16_Y, au16_X + au16_Width - 1U, au16_Y + au16_Hight - 1U);
	TFT_Write_Cmd_Byte(TFT_RAMWR);

	while (au16_Hight-- > NULL)
    4242:	1d 86       	std	Y+13, r1	; 0x0d
    4244:	89 85       	ldd	r24, Y+9	; 0x09
    4246:	9a 85       	ldd	r25, Y+10	; 0x0a
    4248:	00 97       	sbiw	r24, 0x00	; 0
    424a:	11 f0       	breq	.+4      	; 0x4250 <TFT_Fill_Rect+0x18c>
    424c:	51 e0       	ldi	r21, 0x01	; 1
    424e:	5d 87       	std	Y+13, r21	; 0x0d
    4250:	89 85       	ldd	r24, Y+9	; 0x09
    4252:	9a 85       	ldd	r25, Y+10	; 0x0a
    4254:	01 97       	sbiw	r24, 0x01	; 1
    4256:	9a 87       	std	Y+10, r25	; 0x0a
    4258:	89 87       	std	Y+9, r24	; 0x09
    425a:	8d 85       	ldd	r24, Y+13	; 0x0d
    425c:	88 23       	and	r24, r24
    425e:	09 f0       	breq	.+2      	; 0x4262 <TFT_Fill_Rect+0x19e>
    4260:	a6 cf       	rjmp	.-180    	; 0x41ae <TFT_Fill_Rect+0xea>
		do{
			TFT_Write_Data_Word(au16_Color);
		} while (--u16_Max != NULL);
	}

}
    4262:	2d 96       	adiw	r28, 0x0d	; 13
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	cf 91       	pop	r28
    4270:	df 91       	pop	r29
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	08 95       	ret

00004278 <TFT_Fill_Screen>:

void TFT_Fill_Screen(uint16_t au16_Color)
{
    4278:	0f 93       	push	r16
    427a:	1f 93       	push	r17
    427c:	df 93       	push	r29
    427e:	cf 93       	push	r28
    4280:	00 d0       	rcall	.+0      	; 0x4282 <TFT_Fill_Screen+0xa>
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
	TFT_Fill_Rect(INITIAL, INITIAL, gu16_TFT_W, gu16_TFT_H, au16_Color);
    428a:	20 91 b6 00 	lds	r18, 0x00B6
    428e:	30 91 b7 00 	lds	r19, 0x00B7
    4292:	e0 91 b8 00 	lds	r30, 0x00B8
    4296:	f0 91 b9 00 	lds	r31, 0x00B9
    429a:	a9 81       	ldd	r26, Y+1	; 0x01
    429c:	ba 81       	ldd	r27, Y+2	; 0x02
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	60 e0       	ldi	r22, 0x00	; 0
    42a4:	70 e0       	ldi	r23, 0x00	; 0
    42a6:	a9 01       	movw	r20, r18
    42a8:	9f 01       	movw	r18, r30
    42aa:	8d 01       	movw	r16, r26
    42ac:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
}
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	cf 91       	pop	r28
    42b6:	df 91       	pop	r29
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	08 95       	ret

000042be <TFT_Draw_VLine>:

void TFT_Draw_VLine(uint16_t au16_X, uint16_t au16_Y, uint16_t au16_Hight, uint16_t color)
{
    42be:	0f 93       	push	r16
    42c0:	1f 93       	push	r17
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	28 97       	sbiw	r28, 0x08	; 8
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	9a 83       	std	Y+2, r25	; 0x02
    42d8:	89 83       	std	Y+1, r24	; 0x01
    42da:	7c 83       	std	Y+4, r23	; 0x04
    42dc:	6b 83       	std	Y+3, r22	; 0x03
    42de:	5e 83       	std	Y+6, r21	; 0x06
    42e0:	4d 83       	std	Y+5, r20	; 0x05
    42e2:	38 87       	std	Y+8, r19	; 0x08
    42e4:	2f 83       	std	Y+7, r18	; 0x07
	if ((au16_X >= gu16_TFT_W) || (au16_Y >= gu16_TFT_H) || (au16_Hight < 1U))
    42e6:	20 91 b6 00 	lds	r18, 0x00B6
    42ea:	30 91 b7 00 	lds	r19, 0x00B7
    42ee:	89 81       	ldd	r24, Y+1	; 0x01
    42f0:	9a 81       	ldd	r25, Y+2	; 0x02
    42f2:	82 17       	cp	r24, r18
    42f4:	93 07       	cpc	r25, r19
    42f6:	b0 f5       	brcc	.+108    	; 0x4364 <TFT_Draw_VLine+0xa6>
    42f8:	20 91 b8 00 	lds	r18, 0x00B8
    42fc:	30 91 b9 00 	lds	r19, 0x00B9
    4300:	8b 81       	ldd	r24, Y+3	; 0x03
    4302:	9c 81       	ldd	r25, Y+4	; 0x04
    4304:	82 17       	cp	r24, r18
    4306:	93 07       	cpc	r25, r19
    4308:	68 f5       	brcc	.+90     	; 0x4364 <TFT_Draw_VLine+0xa6>
    430a:	8d 81       	ldd	r24, Y+5	; 0x05
    430c:	9e 81       	ldd	r25, Y+6	; 0x06
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	49 f1       	breq	.+82     	; 0x4364 <TFT_Draw_VLine+0xa6>
	{
		return;
	}

	if ((au16_Y + au16_Hight - 1U) >= gu16_TFT_H)
    4312:	2b 81       	ldd	r18, Y+3	; 0x03
    4314:	3c 81       	ldd	r19, Y+4	; 0x04
    4316:	8d 81       	ldd	r24, Y+5	; 0x05
    4318:	9e 81       	ldd	r25, Y+6	; 0x06
    431a:	82 0f       	add	r24, r18
    431c:	93 1f       	adc	r25, r19
    431e:	9c 01       	movw	r18, r24
    4320:	21 50       	subi	r18, 0x01	; 1
    4322:	30 40       	sbci	r19, 0x00	; 0
    4324:	80 91 b8 00 	lds	r24, 0x00B8
    4328:	90 91 b9 00 	lds	r25, 0x00B9
    432c:	28 17       	cp	r18, r24
    432e:	39 07       	cpc	r19, r25
    4330:	50 f0       	brcs	.+20     	; 0x4346 <TFT_Draw_VLine+0x88>
	{
		au16_Hight = gu16_TFT_H - au16_Y;
    4332:	80 91 b8 00 	lds	r24, 0x00B8
    4336:	90 91 b9 00 	lds	r25, 0x00B9
    433a:	2b 81       	ldd	r18, Y+3	; 0x03
    433c:	3c 81       	ldd	r19, Y+4	; 0x04
    433e:	82 1b       	sub	r24, r18
    4340:	93 0b       	sbc	r25, r19
    4342:	9e 83       	std	Y+6, r25	; 0x06
    4344:	8d 83       	std	Y+5, r24	; 0x05
	}

	TFT_Fill_Rect(au16_X, au16_Y, 1, au16_Hight, color);
    4346:	89 81       	ldd	r24, Y+1	; 0x01
    4348:	9a 81       	ldd	r25, Y+2	; 0x02
    434a:	2b 81       	ldd	r18, Y+3	; 0x03
    434c:	3c 81       	ldd	r19, Y+4	; 0x04
    434e:	ed 81       	ldd	r30, Y+5	; 0x05
    4350:	fe 81       	ldd	r31, Y+6	; 0x06
    4352:	af 81       	ldd	r26, Y+7	; 0x07
    4354:	b8 85       	ldd	r27, Y+8	; 0x08
    4356:	b9 01       	movw	r22, r18
    4358:	41 e0       	ldi	r20, 0x01	; 1
    435a:	50 e0       	ldi	r21, 0x00	; 0
    435c:	9f 01       	movw	r18, r30
    435e:	8d 01       	movw	r16, r26
    4360:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
}
    4364:	28 96       	adiw	r28, 0x08	; 8
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	f8 94       	cli
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	cd bf       	out	0x3d, r28	; 61
    4370:	cf 91       	pop	r28
    4372:	df 91       	pop	r29
    4374:	1f 91       	pop	r17
    4376:	0f 91       	pop	r16
    4378:	08 95       	ret

0000437a <TFT_Draw_HLine>:

void TFT_Draw_HLine(uint16_t au16_X, uint16_t au16_Y, uint16_t au16_Width, uint16_t au16_color)
{
    437a:	0f 93       	push	r16
    437c:	1f 93       	push	r17
    437e:	df 93       	push	r29
    4380:	cf 93       	push	r28
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	28 97       	sbiw	r28, 0x08	; 8
    4388:	0f b6       	in	r0, 0x3f	; 63
    438a:	f8 94       	cli
    438c:	de bf       	out	0x3e, r29	; 62
    438e:	0f be       	out	0x3f, r0	; 63
    4390:	cd bf       	out	0x3d, r28	; 61
    4392:	9a 83       	std	Y+2, r25	; 0x02
    4394:	89 83       	std	Y+1, r24	; 0x01
    4396:	7c 83       	std	Y+4, r23	; 0x04
    4398:	6b 83       	std	Y+3, r22	; 0x03
    439a:	5e 83       	std	Y+6, r21	; 0x06
    439c:	4d 83       	std	Y+5, r20	; 0x05
    439e:	38 87       	std	Y+8, r19	; 0x08
    43a0:	2f 83       	std	Y+7, r18	; 0x07
	if ((au16_X >= gu16_TFT_W) || (au16_Y >= gu16_TFT_H) || (au16_Width < 1U))
    43a2:	20 91 b6 00 	lds	r18, 0x00B6
    43a6:	30 91 b7 00 	lds	r19, 0x00B7
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	9a 81       	ldd	r25, Y+2	; 0x02
    43ae:	82 17       	cp	r24, r18
    43b0:	93 07       	cpc	r25, r19
    43b2:	a8 f5       	brcc	.+106    	; 0x441e <TFT_Draw_HLine+0xa4>
    43b4:	20 91 b8 00 	lds	r18, 0x00B8
    43b8:	30 91 b9 00 	lds	r19, 0x00B9
    43bc:	8b 81       	ldd	r24, Y+3	; 0x03
    43be:	9c 81       	ldd	r25, Y+4	; 0x04
    43c0:	82 17       	cp	r24, r18
    43c2:	93 07       	cpc	r25, r19
    43c4:	60 f5       	brcc	.+88     	; 0x441e <TFT_Draw_HLine+0xa4>
    43c6:	8d 81       	ldd	r24, Y+5	; 0x05
    43c8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ca:	00 97       	sbiw	r24, 0x00	; 0
    43cc:	41 f1       	breq	.+80     	; 0x441e <TFT_Draw_HLine+0xa4>
	{
		return;
	}

	if ((au16_X + au16_Width - 1U) >=gu16_TFT_W)
    43ce:	29 81       	ldd	r18, Y+1	; 0x01
    43d0:	3a 81       	ldd	r19, Y+2	; 0x02
    43d2:	8d 81       	ldd	r24, Y+5	; 0x05
    43d4:	9e 81       	ldd	r25, Y+6	; 0x06
    43d6:	82 0f       	add	r24, r18
    43d8:	93 1f       	adc	r25, r19
    43da:	9c 01       	movw	r18, r24
    43dc:	21 50       	subi	r18, 0x01	; 1
    43de:	30 40       	sbci	r19, 0x00	; 0
    43e0:	80 91 b6 00 	lds	r24, 0x00B6
    43e4:	90 91 b7 00 	lds	r25, 0x00B7
    43e8:	28 17       	cp	r18, r24
    43ea:	39 07       	cpc	r19, r25
    43ec:	50 f0       	brcs	.+20     	; 0x4402 <TFT_Draw_HLine+0x88>
	{
		au16_Width = gu16_TFT_W - au16_X;
    43ee:	80 91 b6 00 	lds	r24, 0x00B6
    43f2:	90 91 b7 00 	lds	r25, 0x00B7
    43f6:	29 81       	ldd	r18, Y+1	; 0x01
    43f8:	3a 81       	ldd	r19, Y+2	; 0x02
    43fa:	82 1b       	sub	r24, r18
    43fc:	93 0b       	sbc	r25, r19
    43fe:	9e 83       	std	Y+6, r25	; 0x06
    4400:	8d 83       	std	Y+5, r24	; 0x05
	}

	TFT_Fill_Rect(au16_X, au16_Y, au16_Width, 1, au16_color);
    4402:	89 81       	ldd	r24, Y+1	; 0x01
    4404:	9a 81       	ldd	r25, Y+2	; 0x02
    4406:	2b 81       	ldd	r18, Y+3	; 0x03
    4408:	3c 81       	ldd	r19, Y+4	; 0x04
    440a:	4d 81       	ldd	r20, Y+5	; 0x05
    440c:	5e 81       	ldd	r21, Y+6	; 0x06
    440e:	ef 81       	ldd	r30, Y+7	; 0x07
    4410:	f8 85       	ldd	r31, Y+8	; 0x08
    4412:	b9 01       	movw	r22, r18
    4414:	21 e0       	ldi	r18, 0x01	; 1
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	8f 01       	movw	r16, r30
    441a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
}
    441e:	28 96       	adiw	r28, 0x08	; 8
    4420:	0f b6       	in	r0, 0x3f	; 63
    4422:	f8 94       	cli
    4424:	de bf       	out	0x3e, r29	; 62
    4426:	0f be       	out	0x3f, r0	; 63
    4428:	cd bf       	out	0x3d, r28	; 61
    442a:	cf 91       	pop	r28
    442c:	df 91       	pop	r29
    442e:	1f 91       	pop	r17
    4430:	0f 91       	pop	r16
    4432:	08 95       	ret

00004434 <TFT_Draw_CLine>:

void TFT_Draw_CLine(uint16_t au16_X0, uint16_t au16_Y0, uint16_t au16_X1, uint16_t au16_Y1, uint16_t au16_color)
{
    4434:	0f 93       	push	r16
    4436:	1f 93       	push	r17
    4438:	df 93       	push	r29
    443a:	cf 93       	push	r28
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	63 97       	sbiw	r28, 0x13	; 19
    4442:	0f b6       	in	r0, 0x3f	; 63
    4444:	f8 94       	cli
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	cd bf       	out	0x3d, r28	; 61
    444c:	9b 87       	std	Y+11, r25	; 0x0b
    444e:	8a 87       	std	Y+10, r24	; 0x0a
    4450:	7d 87       	std	Y+13, r23	; 0x0d
    4452:	6c 87       	std	Y+12, r22	; 0x0c
    4454:	5f 87       	std	Y+15, r21	; 0x0f
    4456:	4e 87       	std	Y+14, r20	; 0x0e
    4458:	39 8b       	std	Y+17, r19	; 0x11
    445a:	28 8b       	std	Y+16, r18	; 0x10
    445c:	1b 8b       	std	Y+19, r17	; 0x13
    445e:	0a 8b       	std	Y+18, r16	; 0x12
	uint16_t u16_Diff_x,u16_Diff_y;
	sint8_t s8_Sign_x,s8_Sign_y;
	sint16_t E;

	/* distance between two points */
	if(au16_X1 > au16_X0)
    4460:	2e 85       	ldd	r18, Y+14	; 0x0e
    4462:	3f 85       	ldd	r19, Y+15	; 0x0f
    4464:	8a 85       	ldd	r24, Y+10	; 0x0a
    4466:	9b 85       	ldd	r25, Y+11	; 0x0b
    4468:	82 17       	cp	r24, r18
    446a:	93 07       	cpc	r25, r19
    446c:	68 f4       	brcc	.+26     	; 0x4488 <TFT_Draw_CLine+0x54>
	{
		u16_Diff_x = au16_X1 - au16_X0 ;
    446e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4470:	3f 85       	ldd	r19, Y+15	; 0x0f
    4472:	8a 85       	ldd	r24, Y+10	; 0x0a
    4474:	9b 85       	ldd	r25, Y+11	; 0x0b
    4476:	a9 01       	movw	r20, r18
    4478:	48 1b       	sub	r20, r24
    447a:	59 0b       	sbc	r21, r25
    447c:	ca 01       	movw	r24, r20
    447e:	98 87       	std	Y+8, r25	; 0x08
    4480:	8f 83       	std	Y+7, r24	; 0x07
		s8_Sign_x = 1 ;
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	8c 83       	std	Y+4, r24	; 0x04
    4486:	0c c0       	rjmp	.+24     	; 0x44a0 <TFT_Draw_CLine+0x6c>
	}
	else
	{
		u16_Diff_x = au16_X0 - au16_X1 ;
    4488:	2a 85       	ldd	r18, Y+10	; 0x0a
    448a:	3b 85       	ldd	r19, Y+11	; 0x0b
    448c:	8e 85       	ldd	r24, Y+14	; 0x0e
    448e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4490:	a9 01       	movw	r20, r18
    4492:	48 1b       	sub	r20, r24
    4494:	59 0b       	sbc	r21, r25
    4496:	ca 01       	movw	r24, r20
    4498:	98 87       	std	Y+8, r25	; 0x08
    449a:	8f 83       	std	Y+7, r24	; 0x07
		s8_Sign_x = -1 ;
    449c:	8f ef       	ldi	r24, 0xFF	; 255
    449e:	8c 83       	std	Y+4, r24	; 0x04
	}

	if(au16_Y1 > au16_Y0)
    44a0:	28 89       	ldd	r18, Y+16	; 0x10
    44a2:	39 89       	ldd	r19, Y+17	; 0x11
    44a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    44a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    44a8:	82 17       	cp	r24, r18
    44aa:	93 07       	cpc	r25, r19
    44ac:	68 f4       	brcc	.+26     	; 0x44c8 <TFT_Draw_CLine+0x94>
	{
		u16_Diff_y = au16_Y1 - au16_Y0 ;
    44ae:	28 89       	ldd	r18, Y+16	; 0x10
    44b0:	39 89       	ldd	r19, Y+17	; 0x11
    44b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    44b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    44b6:	a9 01       	movw	r20, r18
    44b8:	48 1b       	sub	r20, r24
    44ba:	59 0b       	sbc	r21, r25
    44bc:	ca 01       	movw	r24, r20
    44be:	9e 83       	std	Y+6, r25	; 0x06
    44c0:	8d 83       	std	Y+5, r24	; 0x05
		s8_Sign_y = 1 ;
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	8b 83       	std	Y+3, r24	; 0x03
    44c6:	0c c0       	rjmp	.+24     	; 0x44e0 <TFT_Draw_CLine+0xac>
	}
	else
	{
		u16_Diff_y = au16_Y0 - au16_Y1 ;
    44c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    44ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    44cc:	88 89       	ldd	r24, Y+16	; 0x10
    44ce:	99 89       	ldd	r25, Y+17	; 0x11
    44d0:	a9 01       	movw	r20, r18
    44d2:	48 1b       	sub	r20, r24
    44d4:	59 0b       	sbc	r21, r25
    44d6:	ca 01       	movw	r24, r20
    44d8:	9e 83       	std	Y+6, r25	; 0x06
    44da:	8d 83       	std	Y+5, r24	; 0x05
		s8_Sign_y = -1;
    44dc:	8f ef       	ldi	r24, 0xFF	; 255
    44de:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (au16_Y0 == au16_Y1)
    44e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    44e2:	3d 85       	ldd	r19, Y+13	; 0x0d
    44e4:	88 89       	ldd	r24, Y+16	; 0x10
    44e6:	99 89       	ldd	r25, Y+17	; 0x11
    44e8:	28 17       	cp	r18, r24
    44ea:	39 07       	cpc	r19, r25
    44ec:	99 f5       	brne	.+102    	; 0x4554 <TFT_Draw_CLine+0x120>
	{
		if (au16_X1 > au16_X0)
    44ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    44f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    44f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44f6:	82 17       	cp	r24, r18
    44f8:	93 07       	cpc	r25, r19
    44fa:	b0 f4       	brcc	.+44     	; 0x4528 <TFT_Draw_CLine+0xf4>
		{
			TFT_Draw_HLine(au16_X0, au16_Y0, au16_X1 - au16_X0 + 1, au16_color);
    44fc:	2e 85       	ldd	r18, Y+14	; 0x0e
    44fe:	3f 85       	ldd	r19, Y+15	; 0x0f
    4500:	8a 85       	ldd	r24, Y+10	; 0x0a
    4502:	9b 85       	ldd	r25, Y+11	; 0x0b
    4504:	a9 01       	movw	r20, r18
    4506:	48 1b       	sub	r20, r24
    4508:	59 0b       	sbc	r21, r25
    450a:	ca 01       	movw	r24, r20
    450c:	ac 01       	movw	r20, r24
    450e:	4f 5f       	subi	r20, 0xFF	; 255
    4510:	5f 4f       	sbci	r21, 0xFF	; 255
    4512:	8a 85       	ldd	r24, Y+10	; 0x0a
    4514:	9b 85       	ldd	r25, Y+11	; 0x0b
    4516:	2c 85       	ldd	r18, Y+12	; 0x0c
    4518:	3d 85       	ldd	r19, Y+13	; 0x0d
    451a:	ea 89       	ldd	r30, Y+18	; 0x12
    451c:	fb 89       	ldd	r31, Y+19	; 0x13
    451e:	b9 01       	movw	r22, r18
    4520:	9f 01       	movw	r18, r30
    4522:	0e 94 bd 21 	call	0x437a	; 0x437a <TFT_Draw_HLine>
    4526:	f7 c0       	rjmp	.+494    	; 0x4716 <TFT_Draw_CLine+0x2e2>
		}
		else
		{
			TFT_Draw_HLine(au16_X1, au16_Y0, au16_X0 - au16_X1 + 1, au16_color);
    4528:	2a 85       	ldd	r18, Y+10	; 0x0a
    452a:	3b 85       	ldd	r19, Y+11	; 0x0b
    452c:	8e 85       	ldd	r24, Y+14	; 0x0e
    452e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4530:	a9 01       	movw	r20, r18
    4532:	48 1b       	sub	r20, r24
    4534:	59 0b       	sbc	r21, r25
    4536:	ca 01       	movw	r24, r20
    4538:	ac 01       	movw	r20, r24
    453a:	4f 5f       	subi	r20, 0xFF	; 255
    453c:	5f 4f       	sbci	r21, 0xFF	; 255
    453e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4540:	9f 85       	ldd	r25, Y+15	; 0x0f
    4542:	2c 85       	ldd	r18, Y+12	; 0x0c
    4544:	3d 85       	ldd	r19, Y+13	; 0x0d
    4546:	ea 89       	ldd	r30, Y+18	; 0x12
    4548:	fb 89       	ldd	r31, Y+19	; 0x13
    454a:	b9 01       	movw	r22, r18
    454c:	9f 01       	movw	r18, r30
    454e:	0e 94 bd 21 	call	0x437a	; 0x437a <TFT_Draw_HLine>
    4552:	e1 c0       	rjmp	.+450    	; 0x4716 <TFT_Draw_CLine+0x2e2>
		}
		return;
	}
	else if (au16_X0 == au16_X1)
    4554:	2a 85       	ldd	r18, Y+10	; 0x0a
    4556:	3b 85       	ldd	r19, Y+11	; 0x0b
    4558:	8e 85       	ldd	r24, Y+14	; 0x0e
    455a:	9f 85       	ldd	r25, Y+15	; 0x0f
    455c:	28 17       	cp	r18, r24
    455e:	39 07       	cpc	r19, r25
    4560:	99 f5       	brne	.+102    	; 0x45c8 <TFT_Draw_CLine+0x194>
	{
		if (au16_Y1 > au16_Y0)
    4562:	28 89       	ldd	r18, Y+16	; 0x10
    4564:	39 89       	ldd	r19, Y+17	; 0x11
    4566:	8c 85       	ldd	r24, Y+12	; 0x0c
    4568:	9d 85       	ldd	r25, Y+13	; 0x0d
    456a:	82 17       	cp	r24, r18
    456c:	93 07       	cpc	r25, r19
    456e:	b0 f4       	brcc	.+44     	; 0x459c <TFT_Draw_CLine+0x168>
		{
			TFT_Draw_VLine(au16_X0, au16_Y0, au16_Y1 - au16_Y0 + 1, au16_color);
    4570:	28 89       	ldd	r18, Y+16	; 0x10
    4572:	39 89       	ldd	r19, Y+17	; 0x11
    4574:	8c 85       	ldd	r24, Y+12	; 0x0c
    4576:	9d 85       	ldd	r25, Y+13	; 0x0d
    4578:	a9 01       	movw	r20, r18
    457a:	48 1b       	sub	r20, r24
    457c:	59 0b       	sbc	r21, r25
    457e:	ca 01       	movw	r24, r20
    4580:	ac 01       	movw	r20, r24
    4582:	4f 5f       	subi	r20, 0xFF	; 255
    4584:	5f 4f       	sbci	r21, 0xFF	; 255
    4586:	8a 85       	ldd	r24, Y+10	; 0x0a
    4588:	9b 85       	ldd	r25, Y+11	; 0x0b
    458a:	2c 85       	ldd	r18, Y+12	; 0x0c
    458c:	3d 85       	ldd	r19, Y+13	; 0x0d
    458e:	ea 89       	ldd	r30, Y+18	; 0x12
    4590:	fb 89       	ldd	r31, Y+19	; 0x13
    4592:	b9 01       	movw	r22, r18
    4594:	9f 01       	movw	r18, r30
    4596:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
    459a:	bd c0       	rjmp	.+378    	; 0x4716 <TFT_Draw_CLine+0x2e2>
		}
		else
		{
			TFT_Draw_VLine(au16_X0, au16_Y1, au16_Y0 - au16_Y1 + 1, au16_color);
    459c:	2c 85       	ldd	r18, Y+12	; 0x0c
    459e:	3d 85       	ldd	r19, Y+13	; 0x0d
    45a0:	88 89       	ldd	r24, Y+16	; 0x10
    45a2:	99 89       	ldd	r25, Y+17	; 0x11
    45a4:	a9 01       	movw	r20, r18
    45a6:	48 1b       	sub	r20, r24
    45a8:	59 0b       	sbc	r21, r25
    45aa:	ca 01       	movw	r24, r20
    45ac:	ac 01       	movw	r20, r24
    45ae:	4f 5f       	subi	r20, 0xFF	; 255
    45b0:	5f 4f       	sbci	r21, 0xFF	; 255
    45b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    45b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    45b6:	28 89       	ldd	r18, Y+16	; 0x10
    45b8:	39 89       	ldd	r19, Y+17	; 0x11
    45ba:	ea 89       	ldd	r30, Y+18	; 0x12
    45bc:	fb 89       	ldd	r31, Y+19	; 0x13
    45be:	b9 01       	movw	r22, r18
    45c0:	9f 01       	movw	r18, r30
    45c2:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
    45c6:	a7 c0       	rjmp	.+334    	; 0x4716 <TFT_Draw_CLine+0x2e2>
		}
		return;
	}

	/* inclination < 1 */
	if ( u16_Diff_x > u16_Diff_y )
    45c8:	2f 81       	ldd	r18, Y+7	; 0x07
    45ca:	38 85       	ldd	r19, Y+8	; 0x08
    45cc:	8d 81       	ldd	r24, Y+5	; 0x05
    45ce:	9e 81       	ldd	r25, Y+6	; 0x06
    45d0:	82 17       	cp	r24, r18
    45d2:	93 07       	cpc	r25, r19
    45d4:	08 f0       	brcs	.+2      	; 0x45d8 <TFT_Draw_CLine+0x1a4>
    45d6:	50 c0       	rjmp	.+160    	; 0x4678 <TFT_Draw_CLine+0x244>
	{
		E = -u16_Diff_x;
    45d8:	8f 81       	ldd	r24, Y+7	; 0x07
    45da:	98 85       	ldd	r25, Y+8	; 0x08
    45dc:	90 95       	com	r25
    45de:	81 95       	neg	r24
    45e0:	9f 4f       	sbci	r25, 0xFF	; 255
    45e2:	9a 83       	std	Y+2, r25	; 0x02
    45e4:	89 83       	std	Y+1, r24	; 0x01
		for ( u8_Count = 0 ; u8_Count <= u16_Diff_x ; u8_Count++ )
    45e6:	19 86       	std	Y+9, r1	; 0x09
    45e8:	3d c0       	rjmp	.+122    	; 0x4664 <TFT_Draw_CLine+0x230>
		{
			TFT_Draw_Pixel( au16_X0, au16_Y0, au16_color );
    45ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    45ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    45ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    45f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    45f2:	4a 89       	ldd	r20, Y+18	; 0x12
    45f4:	5b 89       	ldd	r21, Y+19	; 0x13
    45f6:	b9 01       	movw	r22, r18
    45f8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
			au16_X0 += s8_Sign_x;
    45fc:	8c 81       	ldd	r24, Y+4	; 0x04
    45fe:	28 2f       	mov	r18, r24
    4600:	33 27       	eor	r19, r19
    4602:	27 fd       	sbrc	r18, 7
    4604:	30 95       	com	r19
    4606:	8a 85       	ldd	r24, Y+10	; 0x0a
    4608:	9b 85       	ldd	r25, Y+11	; 0x0b
    460a:	82 0f       	add	r24, r18
    460c:	93 1f       	adc	r25, r19
    460e:	9b 87       	std	Y+11, r25	; 0x0b
    4610:	8a 87       	std	Y+10, r24	; 0x0a
			E += 2 * u16_Diff_y;
    4612:	8d 81       	ldd	r24, Y+5	; 0x05
    4614:	9e 81       	ldd	r25, Y+6	; 0x06
    4616:	9c 01       	movw	r18, r24
    4618:	22 0f       	add	r18, r18
    461a:	33 1f       	adc	r19, r19
    461c:	89 81       	ldd	r24, Y+1	; 0x01
    461e:	9a 81       	ldd	r25, Y+2	; 0x02
    4620:	82 0f       	add	r24, r18
    4622:	93 1f       	adc	r25, r19
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
			if ( E >= 0 )
    4628:	89 81       	ldd	r24, Y+1	; 0x01
    462a:	9a 81       	ldd	r25, Y+2	; 0x02
    462c:	99 23       	and	r25, r25
    462e:	bc f0       	brlt	.+46     	; 0x465e <TFT_Draw_CLine+0x22a>
			{
				au16_Y0 += s8_Sign_y;
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	28 2f       	mov	r18, r24
    4634:	33 27       	eor	r19, r19
    4636:	27 fd       	sbrc	r18, 7
    4638:	30 95       	com	r19
    463a:	8c 85       	ldd	r24, Y+12	; 0x0c
    463c:	9d 85       	ldd	r25, Y+13	; 0x0d
    463e:	82 0f       	add	r24, r18
    4640:	93 1f       	adc	r25, r19
    4642:	9d 87       	std	Y+13, r25	; 0x0d
    4644:	8c 87       	std	Y+12, r24	; 0x0c
				E -= 2 * u16_Diff_x;
    4646:	29 81       	ldd	r18, Y+1	; 0x01
    4648:	3a 81       	ldd	r19, Y+2	; 0x02
    464a:	8f 81       	ldd	r24, Y+7	; 0x07
    464c:	98 85       	ldd	r25, Y+8	; 0x08
    464e:	88 0f       	add	r24, r24
    4650:	99 1f       	adc	r25, r25
    4652:	a9 01       	movw	r20, r18
    4654:	48 1b       	sub	r20, r24
    4656:	59 0b       	sbc	r21, r25
    4658:	ca 01       	movw	r24, r20
    465a:	9a 83       	std	Y+2, r25	; 0x02
    465c:	89 83       	std	Y+1, r24	; 0x01

	/* inclination < 1 */
	if ( u16_Diff_x > u16_Diff_y )
	{
		E = -u16_Diff_x;
		for ( u8_Count = 0 ; u8_Count <= u16_Diff_x ; u8_Count++ )
    465e:	89 85       	ldd	r24, Y+9	; 0x09
    4660:	8f 5f       	subi	r24, 0xFF	; 255
    4662:	89 87       	std	Y+9, r24	; 0x09
    4664:	89 85       	ldd	r24, Y+9	; 0x09
    4666:	28 2f       	mov	r18, r24
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	8f 81       	ldd	r24, Y+7	; 0x07
    466c:	98 85       	ldd	r25, Y+8	; 0x08
    466e:	82 17       	cp	r24, r18
    4670:	93 07       	cpc	r25, r19
    4672:	08 f0       	brcs	.+2      	; 0x4676 <TFT_Draw_CLine+0x242>
    4674:	ba cf       	rjmp	.-140    	; 0x45ea <TFT_Draw_CLine+0x1b6>
    4676:	4f c0       	rjmp	.+158    	; 0x4716 <TFT_Draw_CLine+0x2e2>
		}
	}
	/* inclination >= 1 */
	else
	{
		E = -u16_Diff_y;
    4678:	8d 81       	ldd	r24, Y+5	; 0x05
    467a:	9e 81       	ldd	r25, Y+6	; 0x06
    467c:	90 95       	com	r25
    467e:	81 95       	neg	r24
    4680:	9f 4f       	sbci	r25, 0xFF	; 255
    4682:	9a 83       	std	Y+2, r25	; 0x02
    4684:	89 83       	std	Y+1, r24	; 0x01
		for ( u8_Count = 0 ; u8_Count <= u16_Diff_y ; u8_Count++ )
    4686:	19 86       	std	Y+9, r1	; 0x09
    4688:	3d c0       	rjmp	.+122    	; 0x4704 <TFT_Draw_CLine+0x2d0>
		{
			TFT_Draw_Pixel( au16_X0, au16_Y0, au16_color );
    468a:	8a 85       	ldd	r24, Y+10	; 0x0a
    468c:	9b 85       	ldd	r25, Y+11	; 0x0b
    468e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4690:	3d 85       	ldd	r19, Y+13	; 0x0d
    4692:	4a 89       	ldd	r20, Y+18	; 0x12
    4694:	5b 89       	ldd	r21, Y+19	; 0x13
    4696:	b9 01       	movw	r22, r18
    4698:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
			au16_Y0 += s8_Sign_y;
    469c:	8b 81       	ldd	r24, Y+3	; 0x03
    469e:	28 2f       	mov	r18, r24
    46a0:	33 27       	eor	r19, r19
    46a2:	27 fd       	sbrc	r18, 7
    46a4:	30 95       	com	r19
    46a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    46a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    46aa:	82 0f       	add	r24, r18
    46ac:	93 1f       	adc	r25, r19
    46ae:	9d 87       	std	Y+13, r25	; 0x0d
    46b0:	8c 87       	std	Y+12, r24	; 0x0c
			E += 2 * u16_Diff_x;
    46b2:	8f 81       	ldd	r24, Y+7	; 0x07
    46b4:	98 85       	ldd	r25, Y+8	; 0x08
    46b6:	9c 01       	movw	r18, r24
    46b8:	22 0f       	add	r18, r18
    46ba:	33 1f       	adc	r19, r19
    46bc:	89 81       	ldd	r24, Y+1	; 0x01
    46be:	9a 81       	ldd	r25, Y+2	; 0x02
    46c0:	82 0f       	add	r24, r18
    46c2:	93 1f       	adc	r25, r19
    46c4:	9a 83       	std	Y+2, r25	; 0x02
    46c6:	89 83       	std	Y+1, r24	; 0x01
			if ( E >= 0 )
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
    46ca:	9a 81       	ldd	r25, Y+2	; 0x02
    46cc:	99 23       	and	r25, r25
    46ce:	bc f0       	brlt	.+46     	; 0x46fe <TFT_Draw_CLine+0x2ca>
			{
				au16_X0 += s8_Sign_x;
    46d0:	8c 81       	ldd	r24, Y+4	; 0x04
    46d2:	28 2f       	mov	r18, r24
    46d4:	33 27       	eor	r19, r19
    46d6:	27 fd       	sbrc	r18, 7
    46d8:	30 95       	com	r19
    46da:	8a 85       	ldd	r24, Y+10	; 0x0a
    46dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    46de:	82 0f       	add	r24, r18
    46e0:	93 1f       	adc	r25, r19
    46e2:	9b 87       	std	Y+11, r25	; 0x0b
    46e4:	8a 87       	std	Y+10, r24	; 0x0a
				E -= 2 * u16_Diff_y;
    46e6:	29 81       	ldd	r18, Y+1	; 0x01
    46e8:	3a 81       	ldd	r19, Y+2	; 0x02
    46ea:	8d 81       	ldd	r24, Y+5	; 0x05
    46ec:	9e 81       	ldd	r25, Y+6	; 0x06
    46ee:	88 0f       	add	r24, r24
    46f0:	99 1f       	adc	r25, r25
    46f2:	a9 01       	movw	r20, r18
    46f4:	48 1b       	sub	r20, r24
    46f6:	59 0b       	sbc	r21, r25
    46f8:	ca 01       	movw	r24, r20
    46fa:	9a 83       	std	Y+2, r25	; 0x02
    46fc:	89 83       	std	Y+1, r24	; 0x01
	}
	/* inclination >= 1 */
	else
	{
		E = -u16_Diff_y;
		for ( u8_Count = 0 ; u8_Count <= u16_Diff_y ; u8_Count++ )
    46fe:	89 85       	ldd	r24, Y+9	; 0x09
    4700:	8f 5f       	subi	r24, 0xFF	; 255
    4702:	89 87       	std	Y+9, r24	; 0x09
    4704:	89 85       	ldd	r24, Y+9	; 0x09
    4706:	28 2f       	mov	r18, r24
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	8d 81       	ldd	r24, Y+5	; 0x05
    470c:	9e 81       	ldd	r25, Y+6	; 0x06
    470e:	82 17       	cp	r24, r18
    4710:	93 07       	cpc	r25, r19
    4712:	08 f0       	brcs	.+2      	; 0x4716 <TFT_Draw_CLine+0x2e2>
    4714:	ba cf       	rjmp	.-140    	; 0x468a <TFT_Draw_CLine+0x256>
				au16_X0 += s8_Sign_x;
				E -= 2 * u16_Diff_y;
			}
		}
	}
}
    4716:	63 96       	adiw	r28, 0x13	; 19
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	cd bf       	out	0x3d, r28	; 61
    4722:	cf 91       	pop	r28
    4724:	df 91       	pop	r29
    4726:	1f 91       	pop	r17
    4728:	0f 91       	pop	r16
    472a:	08 95       	ret

0000472c <TFT_Draw_Circle>:

void TFT_Draw_Circle(uint16_t au16_X0, uint16_t au16_Y0, uint16_t au16_Radius, uint16_t au16_Color)
{
    472c:	df 93       	push	r29
    472e:	cf 93       	push	r28
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	62 97       	sbiw	r28, 0x12	; 18
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	f8 94       	cli
    473a:	de bf       	out	0x3e, r29	; 62
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	cd bf       	out	0x3d, r28	; 61
    4740:	9c 87       	std	Y+12, r25	; 0x0c
    4742:	8b 87       	std	Y+11, r24	; 0x0b
    4744:	7e 87       	std	Y+14, r23	; 0x0e
    4746:	6d 87       	std	Y+13, r22	; 0x0d
    4748:	58 8b       	std	Y+16, r21	; 0x10
    474a:	4f 87       	std	Y+15, r20	; 0x0f
    474c:	3a 8b       	std	Y+18, r19	; 0x12
    474e:	29 8b       	std	Y+17, r18	; 0x11
	sint16_t f = 1 - au16_Radius;
    4750:	21 e0       	ldi	r18, 0x01	; 1
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	8f 85       	ldd	r24, Y+15	; 0x0f
    4756:	98 89       	ldd	r25, Y+16	; 0x10
    4758:	a9 01       	movw	r20, r18
    475a:	48 1b       	sub	r20, r24
    475c:	59 0b       	sbc	r21, r25
    475e:	ca 01       	movw	r24, r20
    4760:	9a 87       	std	Y+10, r25	; 0x0a
    4762:	89 87       	std	Y+9, r24	; 0x09
	sint16_t ddF_x = 1;
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	98 87       	std	Y+8, r25	; 0x08
    476a:	8f 83       	std	Y+7, r24	; 0x07
	sint16_t ddF_y = -2 * au16_Radius;
    476c:	8f 85       	ldd	r24, Y+15	; 0x0f
    476e:	98 89       	ldd	r25, Y+16	; 0x10
    4770:	88 0f       	add	r24, r24
    4772:	99 1f       	adc	r25, r25
    4774:	90 95       	com	r25
    4776:	81 95       	neg	r24
    4778:	9f 4f       	sbci	r25, 0xFF	; 255
    477a:	9e 83       	std	Y+6, r25	; 0x06
    477c:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t x = 0;
    477e:	1c 82       	std	Y+4, r1	; 0x04
    4780:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t y = au16_Radius;
    4782:	8f 85       	ldd	r24, Y+15	; 0x0f
    4784:	98 89       	ldd	r25, Y+16	; 0x10
    4786:	9a 83       	std	Y+2, r25	; 0x02
    4788:	89 83       	std	Y+1, r24	; 0x01

	TFT_Draw_Pixel(au16_X0  , au16_Y0 + au16_Radius, au16_Color);
    478a:	2d 85       	ldd	r18, Y+13	; 0x0d
    478c:	3e 85       	ldd	r19, Y+14	; 0x0e
    478e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4790:	98 89       	ldd	r25, Y+16	; 0x10
    4792:	a9 01       	movw	r20, r18
    4794:	48 0f       	add	r20, r24
    4796:	59 1f       	adc	r21, r25
    4798:	8b 85       	ldd	r24, Y+11	; 0x0b
    479a:	9c 85       	ldd	r25, Y+12	; 0x0c
    479c:	29 89       	ldd	r18, Y+17	; 0x11
    479e:	3a 89       	ldd	r19, Y+18	; 0x12
    47a0:	ba 01       	movw	r22, r20
    47a2:	a9 01       	movw	r20, r18
    47a4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
	TFT_Draw_Pixel(au16_X0  , au16_Y0 - au16_Radius, au16_Color);
    47a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    47aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    47ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    47ae:	98 89       	ldd	r25, Y+16	; 0x10
    47b0:	a9 01       	movw	r20, r18
    47b2:	48 1b       	sub	r20, r24
    47b4:	59 0b       	sbc	r21, r25
    47b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    47b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    47ba:	29 89       	ldd	r18, Y+17	; 0x11
    47bc:	3a 89       	ldd	r19, Y+18	; 0x12
    47be:	ba 01       	movw	r22, r20
    47c0:	a9 01       	movw	r20, r18
    47c2:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
	TFT_Draw_Pixel(au16_X0 + au16_Radius, au16_Y0  , au16_Color);
    47c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    47c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    47ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    47cc:	98 89       	ldd	r25, Y+16	; 0x10
    47ce:	82 0f       	add	r24, r18
    47d0:	93 1f       	adc	r25, r19
    47d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    47d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    47d6:	49 89       	ldd	r20, Y+17	; 0x11
    47d8:	5a 89       	ldd	r21, Y+18	; 0x12
    47da:	b9 01       	movw	r22, r18
    47dc:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
	TFT_Draw_Pixel(au16_X0 - au16_Radius, au16_Y0  , au16_Color);
    47e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    47e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    47e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47e6:	98 89       	ldd	r25, Y+16	; 0x10
    47e8:	a9 01       	movw	r20, r18
    47ea:	48 1b       	sub	r20, r24
    47ec:	59 0b       	sbc	r21, r25
    47ee:	ca 01       	movw	r24, r20
    47f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    47f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    47f4:	49 89       	ldd	r20, Y+17	; 0x11
    47f6:	5a 89       	ldd	r21, Y+18	; 0x12
    47f8:	b9 01       	movw	r22, r18
    47fa:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
    47fe:	c0 c0       	rjmp	.+384    	; 0x4980 <TFT_Draw_Circle+0x254>

	while (x < y)
	{

		if (f >= 0)
    4800:	89 85       	ldd	r24, Y+9	; 0x09
    4802:	9a 85       	ldd	r25, Y+10	; 0x0a
    4804:	99 23       	and	r25, r25
    4806:	94 f0       	brlt	.+36     	; 0x482c <TFT_Draw_Circle+0x100>
		{
			y--;
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	9a 81       	ldd	r25, Y+2	; 0x02
    480c:	01 97       	sbiw	r24, 0x01	; 1
    480e:	9a 83       	std	Y+2, r25	; 0x02
    4810:	89 83       	std	Y+1, r24	; 0x01
			ddF_y += 2;
    4812:	8d 81       	ldd	r24, Y+5	; 0x05
    4814:	9e 81       	ldd	r25, Y+6	; 0x06
    4816:	02 96       	adiw	r24, 0x02	; 2
    4818:	9e 83       	std	Y+6, r25	; 0x06
    481a:	8d 83       	std	Y+5, r24	; 0x05
			f += ddF_y;
    481c:	29 85       	ldd	r18, Y+9	; 0x09
    481e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4820:	8d 81       	ldd	r24, Y+5	; 0x05
    4822:	9e 81       	ldd	r25, Y+6	; 0x06
    4824:	82 0f       	add	r24, r18
    4826:	93 1f       	adc	r25, r19
    4828:	9a 87       	std	Y+10, r25	; 0x0a
    482a:	89 87       	std	Y+9, r24	; 0x09
		}

		x++;
    482c:	8b 81       	ldd	r24, Y+3	; 0x03
    482e:	9c 81       	ldd	r25, Y+4	; 0x04
    4830:	01 96       	adiw	r24, 0x01	; 1
    4832:	9c 83       	std	Y+4, r25	; 0x04
    4834:	8b 83       	std	Y+3, r24	; 0x03
		ddF_x += 2;
    4836:	8f 81       	ldd	r24, Y+7	; 0x07
    4838:	98 85       	ldd	r25, Y+8	; 0x08
    483a:	02 96       	adiw	r24, 0x02	; 2
    483c:	98 87       	std	Y+8, r25	; 0x08
    483e:	8f 83       	std	Y+7, r24	; 0x07
		f += ddF_x;
    4840:	29 85       	ldd	r18, Y+9	; 0x09
    4842:	3a 85       	ldd	r19, Y+10	; 0x0a
    4844:	8f 81       	ldd	r24, Y+7	; 0x07
    4846:	98 85       	ldd	r25, Y+8	; 0x08
    4848:	82 0f       	add	r24, r18
    484a:	93 1f       	adc	r25, r19
    484c:	9a 87       	std	Y+10, r25	; 0x0a
    484e:	89 87       	std	Y+9, r24	; 0x09

		TFT_Draw_Pixel(au16_X0 + x, au16_Y0 + y, au16_Color);
    4850:	2b 85       	ldd	r18, Y+11	; 0x0b
    4852:	3c 85       	ldd	r19, Y+12	; 0x0c
    4854:	8b 81       	ldd	r24, Y+3	; 0x03
    4856:	9c 81       	ldd	r25, Y+4	; 0x04
    4858:	b9 01       	movw	r22, r18
    485a:	68 0f       	add	r22, r24
    485c:	79 1f       	adc	r23, r25
    485e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4860:	3e 85       	ldd	r19, Y+14	; 0x0e
    4862:	89 81       	ldd	r24, Y+1	; 0x01
    4864:	9a 81       	ldd	r25, Y+2	; 0x02
    4866:	28 0f       	add	r18, r24
    4868:	39 1f       	adc	r19, r25
    486a:	49 89       	ldd	r20, Y+17	; 0x11
    486c:	5a 89       	ldd	r21, Y+18	; 0x12
    486e:	cb 01       	movw	r24, r22
    4870:	b9 01       	movw	r22, r18
    4872:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
		TFT_Draw_Pixel(au16_X0 - x, au16_Y0 + y, au16_Color);
    4876:	2b 85       	ldd	r18, Y+11	; 0x0b
    4878:	3c 85       	ldd	r19, Y+12	; 0x0c
    487a:	8b 81       	ldd	r24, Y+3	; 0x03
    487c:	9c 81       	ldd	r25, Y+4	; 0x04
    487e:	b9 01       	movw	r22, r18
    4880:	68 1b       	sub	r22, r24
    4882:	79 0b       	sbc	r23, r25
    4884:	2d 85       	ldd	r18, Y+13	; 0x0d
    4886:	3e 85       	ldd	r19, Y+14	; 0x0e
    4888:	89 81       	ldd	r24, Y+1	; 0x01
    488a:	9a 81       	ldd	r25, Y+2	; 0x02
    488c:	28 0f       	add	r18, r24
    488e:	39 1f       	adc	r19, r25
    4890:	49 89       	ldd	r20, Y+17	; 0x11
    4892:	5a 89       	ldd	r21, Y+18	; 0x12
    4894:	cb 01       	movw	r24, r22
    4896:	b9 01       	movw	r22, r18
    4898:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
		TFT_Draw_Pixel(au16_X0 + x, au16_Y0 - y, au16_Color);
    489c:	2b 85       	ldd	r18, Y+11	; 0x0b
    489e:	3c 85       	ldd	r19, Y+12	; 0x0c
    48a0:	8b 81       	ldd	r24, Y+3	; 0x03
    48a2:	9c 81       	ldd	r25, Y+4	; 0x04
    48a4:	b9 01       	movw	r22, r18
    48a6:	68 0f       	add	r22, r24
    48a8:	79 1f       	adc	r23, r25
    48aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    48ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
    48b0:	9a 81       	ldd	r25, Y+2	; 0x02
    48b2:	28 1b       	sub	r18, r24
    48b4:	39 0b       	sbc	r19, r25
    48b6:	49 89       	ldd	r20, Y+17	; 0x11
    48b8:	5a 89       	ldd	r21, Y+18	; 0x12
    48ba:	cb 01       	movw	r24, r22
    48bc:	b9 01       	movw	r22, r18
    48be:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
		TFT_Draw_Pixel(au16_X0 - x, au16_Y0 - y, au16_Color);
    48c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    48c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    48c6:	8b 81       	ldd	r24, Y+3	; 0x03
    48c8:	9c 81       	ldd	r25, Y+4	; 0x04
    48ca:	b9 01       	movw	r22, r18
    48cc:	68 1b       	sub	r22, r24
    48ce:	79 0b       	sbc	r23, r25
    48d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    48d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	9a 81       	ldd	r25, Y+2	; 0x02
    48d8:	28 1b       	sub	r18, r24
    48da:	39 0b       	sbc	r19, r25
    48dc:	49 89       	ldd	r20, Y+17	; 0x11
    48de:	5a 89       	ldd	r21, Y+18	; 0x12
    48e0:	cb 01       	movw	r24, r22
    48e2:	b9 01       	movw	r22, r18
    48e4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
		TFT_Draw_Pixel(au16_X0 + y, au16_Y0 + x, au16_Color);
    48e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    48ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    48ec:	89 81       	ldd	r24, Y+1	; 0x01
    48ee:	9a 81       	ldd	r25, Y+2	; 0x02
    48f0:	b9 01       	movw	r22, r18
    48f2:	68 0f       	add	r22, r24
    48f4:	79 1f       	adc	r23, r25
    48f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    48f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    48fa:	8b 81       	ldd	r24, Y+3	; 0x03
    48fc:	9c 81       	ldd	r25, Y+4	; 0x04
    48fe:	28 0f       	add	r18, r24
    4900:	39 1f       	adc	r19, r25
    4902:	49 89       	ldd	r20, Y+17	; 0x11
    4904:	5a 89       	ldd	r21, Y+18	; 0x12
    4906:	cb 01       	movw	r24, r22
    4908:	b9 01       	movw	r22, r18
    490a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
		TFT_Draw_Pixel(au16_X0 - y, au16_Y0 + x, au16_Color);
    490e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4910:	3c 85       	ldd	r19, Y+12	; 0x0c
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	9a 81       	ldd	r25, Y+2	; 0x02
    4916:	b9 01       	movw	r22, r18
    4918:	68 1b       	sub	r22, r24
    491a:	79 0b       	sbc	r23, r25
    491c:	2d 85       	ldd	r18, Y+13	; 0x0d
    491e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4920:	8b 81       	ldd	r24, Y+3	; 0x03
    4922:	9c 81       	ldd	r25, Y+4	; 0x04
    4924:	28 0f       	add	r18, r24
    4926:	39 1f       	adc	r19, r25
    4928:	49 89       	ldd	r20, Y+17	; 0x11
    492a:	5a 89       	ldd	r21, Y+18	; 0x12
    492c:	cb 01       	movw	r24, r22
    492e:	b9 01       	movw	r22, r18
    4930:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
		TFT_Draw_Pixel(au16_X0 + y, au16_Y0 - x, au16_Color);
    4934:	2b 85       	ldd	r18, Y+11	; 0x0b
    4936:	3c 85       	ldd	r19, Y+12	; 0x0c
    4938:	89 81       	ldd	r24, Y+1	; 0x01
    493a:	9a 81       	ldd	r25, Y+2	; 0x02
    493c:	b9 01       	movw	r22, r18
    493e:	68 0f       	add	r22, r24
    4940:	79 1f       	adc	r23, r25
    4942:	2d 85       	ldd	r18, Y+13	; 0x0d
    4944:	3e 85       	ldd	r19, Y+14	; 0x0e
    4946:	8b 81       	ldd	r24, Y+3	; 0x03
    4948:	9c 81       	ldd	r25, Y+4	; 0x04
    494a:	28 1b       	sub	r18, r24
    494c:	39 0b       	sbc	r19, r25
    494e:	49 89       	ldd	r20, Y+17	; 0x11
    4950:	5a 89       	ldd	r21, Y+18	; 0x12
    4952:	cb 01       	movw	r24, r22
    4954:	b9 01       	movw	r22, r18
    4956:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
		TFT_Draw_Pixel(au16_X0 - y, au16_Y0 - x, au16_Color);
    495a:	2b 85       	ldd	r18, Y+11	; 0x0b
    495c:	3c 85       	ldd	r19, Y+12	; 0x0c
    495e:	89 81       	ldd	r24, Y+1	; 0x01
    4960:	9a 81       	ldd	r25, Y+2	; 0x02
    4962:	b9 01       	movw	r22, r18
    4964:	68 1b       	sub	r22, r24
    4966:	79 0b       	sbc	r23, r25
    4968:	2d 85       	ldd	r18, Y+13	; 0x0d
    496a:	3e 85       	ldd	r19, Y+14	; 0x0e
    496c:	8b 81       	ldd	r24, Y+3	; 0x03
    496e:	9c 81       	ldd	r25, Y+4	; 0x04
    4970:	28 1b       	sub	r18, r24
    4972:	39 0b       	sbc	r19, r25
    4974:	49 89       	ldd	r20, Y+17	; 0x11
    4976:	5a 89       	ldd	r21, Y+18	; 0x12
    4978:	cb 01       	movw	r24, r22
    497a:	b9 01       	movw	r22, r18
    497c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <TFT_Draw_Pixel>
	TFT_Draw_Pixel(au16_X0  , au16_Y0 + au16_Radius, au16_Color);
	TFT_Draw_Pixel(au16_X0  , au16_Y0 - au16_Radius, au16_Color);
	TFT_Draw_Pixel(au16_X0 + au16_Radius, au16_Y0  , au16_Color);
	TFT_Draw_Pixel(au16_X0 - au16_Radius, au16_Y0  , au16_Color);

	while (x < y)
    4980:	2b 81       	ldd	r18, Y+3	; 0x03
    4982:	3c 81       	ldd	r19, Y+4	; 0x04
    4984:	89 81       	ldd	r24, Y+1	; 0x01
    4986:	9a 81       	ldd	r25, Y+2	; 0x02
    4988:	28 17       	cp	r18, r24
    498a:	39 07       	cpc	r19, r25
    498c:	08 f4       	brcc	.+2      	; 0x4990 <TFT_Draw_Circle+0x264>
    498e:	38 cf       	rjmp	.-400    	; 0x4800 <TFT_Draw_Circle+0xd4>
		TFT_Draw_Pixel(au16_X0 + y, au16_Y0 + x, au16_Color);
		TFT_Draw_Pixel(au16_X0 - y, au16_Y0 + x, au16_Color);
		TFT_Draw_Pixel(au16_X0 + y, au16_Y0 - x, au16_Color);
		TFT_Draw_Pixel(au16_X0 - y, au16_Y0 - x, au16_Color);
	}
}
    4990:	62 96       	adiw	r28, 0x12	; 18
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	f8 94       	cli
    4996:	de bf       	out	0x3e, r29	; 62
    4998:	0f be       	out	0x3f, r0	; 63
    499a:	cd bf       	out	0x3d, r28	; 61
    499c:	cf 91       	pop	r28
    499e:	df 91       	pop	r29
    49a0:	08 95       	ret

000049a2 <TFT_Fill_Circle>:

void TFT_Fill_Circle(uint16_t au16_X0, uint16_t au16_Y0, uint16_t au16_Radius, uint8_t au8_Side, uint16_t au16_Color)
{
    49a2:	0f 93       	push	r16
    49a4:	1f 93       	push	r17
    49a6:	df 93       	push	r29
    49a8:	cf 93       	push	r28
    49aa:	cd b7       	in	r28, 0x3d	; 61
    49ac:	de b7       	in	r29, 0x3e	; 62
    49ae:	65 97       	sbiw	r28, 0x15	; 21
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	f8 94       	cli
    49b4:	de bf       	out	0x3e, r29	; 62
    49b6:	0f be       	out	0x3f, r0	; 63
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	9c 87       	std	Y+12, r25	; 0x0c
    49bc:	8b 87       	std	Y+11, r24	; 0x0b
    49be:	7e 87       	std	Y+14, r23	; 0x0e
    49c0:	6d 87       	std	Y+13, r22	; 0x0d
    49c2:	58 8b       	std	Y+16, r21	; 0x10
    49c4:	4f 87       	std	Y+15, r20	; 0x0f
    49c6:	29 8b       	std	Y+17, r18	; 0x11
    49c8:	1b 8b       	std	Y+19, r17	; 0x13
    49ca:	0a 8b       	std	Y+18, r16	; 0x12
	sint16_t f     = 1 - au16_Radius;
    49cc:	21 e0       	ldi	r18, 0x01	; 1
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    49d2:	98 89       	ldd	r25, Y+16	; 0x10
    49d4:	a9 01       	movw	r20, r18
    49d6:	48 1b       	sub	r20, r24
    49d8:	59 0b       	sbc	r21, r25
    49da:	ca 01       	movw	r24, r20
    49dc:	9a 87       	std	Y+10, r25	; 0x0a
    49de:	89 87       	std	Y+9, r24	; 0x09
	sint16_t ddF_x = 1;
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	98 87       	std	Y+8, r25	; 0x08
    49e6:	8f 83       	std	Y+7, r24	; 0x07
	sint16_t ddF_y = (-2) * au16_Radius;
    49e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ea:	98 89       	ldd	r25, Y+16	; 0x10
    49ec:	88 0f       	add	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	90 95       	com	r25
    49f2:	81 95       	neg	r24
    49f4:	9f 4f       	sbci	r25, 0xFF	; 255
    49f6:	9e 83       	std	Y+6, r25	; 0x06
    49f8:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_X = 0U;
    49fa:	1c 82       	std	Y+4, r1	; 0x04
    49fc:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_Y = au16_Radius;
    49fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a00:	98 89       	ldd	r25, Y+16	; 0x10
    4a02:	9a 83       	std	Y+2, r25	; 0x02
    4a04:	89 83       	std	Y+1, r24	; 0x01

	TFT_Draw_VLine(au16_X0, au16_Y0 - au16_Radius, (2* au16_Radius) +1, au16_Color);
    4a06:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a08:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a0c:	98 89       	ldd	r25, Y+16	; 0x10
    4a0e:	b9 01       	movw	r22, r18
    4a10:	68 1b       	sub	r22, r24
    4a12:	79 0b       	sbc	r23, r25
    4a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a16:	98 89       	ldd	r25, Y+16	; 0x10
    4a18:	88 0f       	add	r24, r24
    4a1a:	99 1f       	adc	r25, r25
    4a1c:	ac 01       	movw	r20, r24
    4a1e:	4f 5f       	subi	r20, 0xFF	; 255
    4a20:	5f 4f       	sbci	r21, 0xFF	; 255
    4a22:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a24:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a26:	2a 89       	ldd	r18, Y+18	; 0x12
    4a28:	3b 89       	ldd	r19, Y+19	; 0x13
    4a2a:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
    4a2e:	29 c1       	rjmp	.+594    	; 0x4c82 <TFT_Fill_Circle+0x2e0>

	while (u16_X < u16_Y)
	{
		if (f >= 0)
    4a30:	89 85       	ldd	r24, Y+9	; 0x09
    4a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a34:	99 23       	and	r25, r25
    4a36:	94 f0       	brlt	.+36     	; 0x4a5c <TFT_Fill_Circle+0xba>
		{
			u16_Y--;
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3c:	01 97       	sbiw	r24, 0x01	; 1
    4a3e:	9a 83       	std	Y+2, r25	; 0x02
    4a40:	89 83       	std	Y+1, r24	; 0x01
			ddF_y += 2;
    4a42:	8d 81       	ldd	r24, Y+5	; 0x05
    4a44:	9e 81       	ldd	r25, Y+6	; 0x06
    4a46:	02 96       	adiw	r24, 0x02	; 2
    4a48:	9e 83       	std	Y+6, r25	; 0x06
    4a4a:	8d 83       	std	Y+5, r24	; 0x05
			f     += ddF_y;
    4a4c:	29 85       	ldd	r18, Y+9	; 0x09
    4a4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a50:	8d 81       	ldd	r24, Y+5	; 0x05
    4a52:	9e 81       	ldd	r25, Y+6	; 0x06
    4a54:	82 0f       	add	r24, r18
    4a56:	93 1f       	adc	r25, r19
    4a58:	9a 87       	std	Y+10, r25	; 0x0a
    4a5a:	89 87       	std	Y+9, r24	; 0x09
		}
		u16_X++;
    4a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a60:	01 96       	adiw	r24, 0x01	; 1
    4a62:	9c 83       	std	Y+4, r25	; 0x04
    4a64:	8b 83       	std	Y+3, r24	; 0x03
		ddF_x += 2;
    4a66:	8f 81       	ldd	r24, Y+7	; 0x07
    4a68:	98 85       	ldd	r25, Y+8	; 0x08
    4a6a:	02 96       	adiw	r24, 0x02	; 2
    4a6c:	98 87       	std	Y+8, r25	; 0x08
    4a6e:	8f 83       	std	Y+7, r24	; 0x07
		f     += ddF_x;
    4a70:	29 85       	ldd	r18, Y+9	; 0x09
    4a72:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a74:	8f 81       	ldd	r24, Y+7	; 0x07
    4a76:	98 85       	ldd	r25, Y+8	; 0x08
    4a78:	82 0f       	add	r24, r18
    4a7a:	93 1f       	adc	r25, r19
    4a7c:	9a 87       	std	Y+10, r25	; 0x0a
    4a7e:	89 87       	std	Y+9, r24	; 0x09

		switch(au8_Side)
    4a80:	89 89       	ldd	r24, Y+17	; 0x11
    4a82:	28 2f       	mov	r18, r24
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	3d 8b       	std	Y+21, r19	; 0x15
    4a88:	2c 8b       	std	Y+20, r18	; 0x14
    4a8a:	4c 89       	ldd	r20, Y+20	; 0x14
    4a8c:	5d 89       	ldd	r21, Y+21	; 0x15
    4a8e:	41 30       	cpi	r20, 0x01	; 1
    4a90:	51 05       	cpc	r21, r1
    4a92:	09 f4       	brne	.+2      	; 0x4a96 <TFT_Fill_Circle+0xf4>
    4a94:	47 c0       	rjmp	.+142    	; 0x4b24 <TFT_Fill_Circle+0x182>
    4a96:	8c 89       	ldd	r24, Y+20	; 0x14
    4a98:	9d 89       	ldd	r25, Y+21	; 0x15
    4a9a:	82 30       	cpi	r24, 0x02	; 2
    4a9c:	91 05       	cpc	r25, r1
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <TFT_Fill_Circle+0x100>
    4aa0:	7c c0       	rjmp	.+248    	; 0x4b9a <TFT_Fill_Circle+0x1f8>
    4aa2:	2c 89       	ldd	r18, Y+20	; 0x14
    4aa4:	3d 89       	ldd	r19, Y+21	; 0x15
    4aa6:	21 15       	cp	r18, r1
    4aa8:	31 05       	cpc	r19, r1
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <TFT_Fill_Circle+0x10c>
    4aac:	ea c0       	rjmp	.+468    	; 0x4c82 <TFT_Fill_Circle+0x2e0>
		{
			case TFT_CIRCLE_R_SIDE:

				TFT_Draw_VLine(au16_X0+u16_X, au16_Y0 - u16_Y, (2*u16_Y) +1, au16_Color);
    4aae:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ab0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab6:	b9 01       	movw	r22, r18
    4ab8:	68 0f       	add	r22, r24
    4aba:	79 1f       	adc	r23, r25
    4abc:	2d 85       	ldd	r18, Y+13	; 0x0d
    4abe:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ac0:	89 81       	ldd	r24, Y+1	; 0x01
    4ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac4:	a9 01       	movw	r20, r18
    4ac6:	48 1b       	sub	r20, r24
    4ac8:	59 0b       	sbc	r21, r25
    4aca:	89 81       	ldd	r24, Y+1	; 0x01
    4acc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ace:	88 0f       	add	r24, r24
    4ad0:	99 1f       	adc	r25, r25
    4ad2:	9c 01       	movw	r18, r24
    4ad4:	2f 5f       	subi	r18, 0xFF	; 255
    4ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad8:	ea 89       	ldd	r30, Y+18	; 0x12
    4ada:	fb 89       	ldd	r31, Y+19	; 0x13
    4adc:	cb 01       	movw	r24, r22
    4ade:	ba 01       	movw	r22, r20
    4ae0:	a9 01       	movw	r20, r18
    4ae2:	9f 01       	movw	r18, r30
    4ae4:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
				TFT_Draw_VLine(au16_X0+u16_Y, au16_Y0 - u16_X, (2*u16_X) +1, au16_Color);
    4ae8:	2b 85       	ldd	r18, Y+11	; 0x0b
    4aea:	3c 85       	ldd	r19, Y+12	; 0x0c
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	9a 81       	ldd	r25, Y+2	; 0x02
    4af0:	b9 01       	movw	r22, r18
    4af2:	68 0f       	add	r22, r24
    4af4:	79 1f       	adc	r23, r25
    4af6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4af8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4afa:	8b 81       	ldd	r24, Y+3	; 0x03
    4afc:	9c 81       	ldd	r25, Y+4	; 0x04
    4afe:	a9 01       	movw	r20, r18
    4b00:	48 1b       	sub	r20, r24
    4b02:	59 0b       	sbc	r21, r25
    4b04:	8b 81       	ldd	r24, Y+3	; 0x03
    4b06:	9c 81       	ldd	r25, Y+4	; 0x04
    4b08:	88 0f       	add	r24, r24
    4b0a:	99 1f       	adc	r25, r25
    4b0c:	9c 01       	movw	r18, r24
    4b0e:	2f 5f       	subi	r18, 0xFF	; 255
    4b10:	3f 4f       	sbci	r19, 0xFF	; 255
    4b12:	ea 89       	ldd	r30, Y+18	; 0x12
    4b14:	fb 89       	ldd	r31, Y+19	; 0x13
    4b16:	cb 01       	movw	r24, r22
    4b18:	ba 01       	movw	r22, r20
    4b1a:	a9 01       	movw	r20, r18
    4b1c:	9f 01       	movw	r18, r30
    4b1e:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
    4b22:	af c0       	rjmp	.+350    	; 0x4c82 <TFT_Fill_Circle+0x2e0>
			break;

			case TFT_CIRCLE_L_SIDE:

				TFT_Draw_VLine(au16_X0-u16_X, au16_Y0 - u16_Y, (2*u16_Y) +1, au16_Color);
    4b24:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b26:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b28:	8b 81       	ldd	r24, Y+3	; 0x03
    4b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b2c:	b9 01       	movw	r22, r18
    4b2e:	68 1b       	sub	r22, r24
    4b30:	79 0b       	sbc	r23, r25
    4b32:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b34:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	9a 81       	ldd	r25, Y+2	; 0x02
    4b3a:	a9 01       	movw	r20, r18
    4b3c:	48 1b       	sub	r20, r24
    4b3e:	59 0b       	sbc	r21, r25
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	9a 81       	ldd	r25, Y+2	; 0x02
    4b44:	88 0f       	add	r24, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	9c 01       	movw	r18, r24
    4b4a:	2f 5f       	subi	r18, 0xFF	; 255
    4b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4e:	ea 89       	ldd	r30, Y+18	; 0x12
    4b50:	fb 89       	ldd	r31, Y+19	; 0x13
    4b52:	cb 01       	movw	r24, r22
    4b54:	ba 01       	movw	r22, r20
    4b56:	a9 01       	movw	r20, r18
    4b58:	9f 01       	movw	r18, r30
    4b5a:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
				TFT_Draw_VLine(au16_X0-u16_Y, au16_Y0 - u16_X, (2*u16_X) +1, au16_Color);
    4b5e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b60:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b62:	89 81       	ldd	r24, Y+1	; 0x01
    4b64:	9a 81       	ldd	r25, Y+2	; 0x02
    4b66:	b9 01       	movw	r22, r18
    4b68:	68 1b       	sub	r22, r24
    4b6a:	79 0b       	sbc	r23, r25
    4b6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b70:	8b 81       	ldd	r24, Y+3	; 0x03
    4b72:	9c 81       	ldd	r25, Y+4	; 0x04
    4b74:	a9 01       	movw	r20, r18
    4b76:	48 1b       	sub	r20, r24
    4b78:	59 0b       	sbc	r21, r25
    4b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b7e:	88 0f       	add	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	9c 01       	movw	r18, r24
    4b84:	2f 5f       	subi	r18, 0xFF	; 255
    4b86:	3f 4f       	sbci	r19, 0xFF	; 255
    4b88:	ea 89       	ldd	r30, Y+18	; 0x12
    4b8a:	fb 89       	ldd	r31, Y+19	; 0x13
    4b8c:	cb 01       	movw	r24, r22
    4b8e:	ba 01       	movw	r22, r20
    4b90:	a9 01       	movw	r20, r18
    4b92:	9f 01       	movw	r18, r30
    4b94:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
    4b98:	74 c0       	rjmp	.+232    	; 0x4c82 <TFT_Fill_Circle+0x2e0>
			break;

			case TFT_CIRCLE_FULL:

				TFT_Draw_VLine(au16_X0+u16_X, au16_Y0 - u16_Y, (2*u16_Y) +1, au16_Color);
    4b9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba2:	b9 01       	movw	r22, r18
    4ba4:	68 0f       	add	r22, r24
    4ba6:	79 1f       	adc	r23, r25
    4ba8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4baa:	3e 85       	ldd	r19, Y+14	; 0x0e
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
    4bae:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb0:	a9 01       	movw	r20, r18
    4bb2:	48 1b       	sub	r20, r24
    4bb4:	59 0b       	sbc	r21, r25
    4bb6:	89 81       	ldd	r24, Y+1	; 0x01
    4bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bba:	88 0f       	add	r24, r24
    4bbc:	99 1f       	adc	r25, r25
    4bbe:	9c 01       	movw	r18, r24
    4bc0:	2f 5f       	subi	r18, 0xFF	; 255
    4bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc4:	ea 89       	ldd	r30, Y+18	; 0x12
    4bc6:	fb 89       	ldd	r31, Y+19	; 0x13
    4bc8:	cb 01       	movw	r24, r22
    4bca:	ba 01       	movw	r22, r20
    4bcc:	a9 01       	movw	r20, r18
    4bce:	9f 01       	movw	r18, r30
    4bd0:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
				TFT_Draw_VLine(au16_X0+u16_Y, au16_Y0 - u16_X, (2*u16_X) +1, au16_Color);
    4bd4:	2b 85       	ldd	r18, Y+11	; 0x0b
    4bd6:	3c 85       	ldd	r19, Y+12	; 0x0c
    4bd8:	89 81       	ldd	r24, Y+1	; 0x01
    4bda:	9a 81       	ldd	r25, Y+2	; 0x02
    4bdc:	b9 01       	movw	r22, r18
    4bde:	68 0f       	add	r22, r24
    4be0:	79 1f       	adc	r23, r25
    4be2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4be4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4be6:	8b 81       	ldd	r24, Y+3	; 0x03
    4be8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bea:	a9 01       	movw	r20, r18
    4bec:	48 1b       	sub	r20, r24
    4bee:	59 0b       	sbc	r21, r25
    4bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf4:	88 0f       	add	r24, r24
    4bf6:	99 1f       	adc	r25, r25
    4bf8:	9c 01       	movw	r18, r24
    4bfa:	2f 5f       	subi	r18, 0xFF	; 255
    4bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfe:	ea 89       	ldd	r30, Y+18	; 0x12
    4c00:	fb 89       	ldd	r31, Y+19	; 0x13
    4c02:	cb 01       	movw	r24, r22
    4c04:	ba 01       	movw	r22, r20
    4c06:	a9 01       	movw	r20, r18
    4c08:	9f 01       	movw	r18, r30
    4c0a:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>

				TFT_Draw_VLine(au16_X0-u16_X, au16_Y0 - u16_Y, (2*u16_Y) +1, au16_Color);
    4c0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4c10:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c12:	8b 81       	ldd	r24, Y+3	; 0x03
    4c14:	9c 81       	ldd	r25, Y+4	; 0x04
    4c16:	b9 01       	movw	r22, r18
    4c18:	68 1b       	sub	r22, r24
    4c1a:	79 0b       	sbc	r23, r25
    4c1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c1e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c20:	89 81       	ldd	r24, Y+1	; 0x01
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	a9 01       	movw	r20, r18
    4c26:	48 1b       	sub	r20, r24
    4c28:	59 0b       	sbc	r21, r25
    4c2a:	89 81       	ldd	r24, Y+1	; 0x01
    4c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c2e:	88 0f       	add	r24, r24
    4c30:	99 1f       	adc	r25, r25
    4c32:	9c 01       	movw	r18, r24
    4c34:	2f 5f       	subi	r18, 0xFF	; 255
    4c36:	3f 4f       	sbci	r19, 0xFF	; 255
    4c38:	ea 89       	ldd	r30, Y+18	; 0x12
    4c3a:	fb 89       	ldd	r31, Y+19	; 0x13
    4c3c:	cb 01       	movw	r24, r22
    4c3e:	ba 01       	movw	r22, r20
    4c40:	a9 01       	movw	r20, r18
    4c42:	9f 01       	movw	r18, r30
    4c44:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
				TFT_Draw_VLine(au16_X0-u16_Y, au16_Y0 - u16_X, (2*u16_X) +1, au16_Color);
    4c48:	2b 85       	ldd	r18, Y+11	; 0x0b
    4c4a:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	b9 01       	movw	r22, r18
    4c52:	68 1b       	sub	r22, r24
    4c54:	79 0b       	sbc	r23, r25
    4c56:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c58:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5e:	a9 01       	movw	r20, r18
    4c60:	48 1b       	sub	r20, r24
    4c62:	59 0b       	sbc	r21, r25
    4c64:	8b 81       	ldd	r24, Y+3	; 0x03
    4c66:	9c 81       	ldd	r25, Y+4	; 0x04
    4c68:	88 0f       	add	r24, r24
    4c6a:	99 1f       	adc	r25, r25
    4c6c:	9c 01       	movw	r18, r24
    4c6e:	2f 5f       	subi	r18, 0xFF	; 255
    4c70:	3f 4f       	sbci	r19, 0xFF	; 255
    4c72:	ea 89       	ldd	r30, Y+18	; 0x12
    4c74:	fb 89       	ldd	r31, Y+19	; 0x13
    4c76:	cb 01       	movw	r24, r22
    4c78:	ba 01       	movw	r22, r20
    4c7a:	a9 01       	movw	r20, r18
    4c7c:	9f 01       	movw	r18, r30
    4c7e:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
	uint16_t u16_X = 0U;
	uint16_t u16_Y = au16_Radius;

	TFT_Draw_VLine(au16_X0, au16_Y0 - au16_Radius, (2* au16_Radius) +1, au16_Color);

	while (u16_X < u16_Y)
    4c82:	2b 81       	ldd	r18, Y+3	; 0x03
    4c84:	3c 81       	ldd	r19, Y+4	; 0x04
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8a:	28 17       	cp	r18, r24
    4c8c:	39 07       	cpc	r19, r25
    4c8e:	08 f4       	brcc	.+2      	; 0x4c92 <TFT_Fill_Circle+0x2f0>
    4c90:	cf ce       	rjmp	.-610    	; 0x4a30 <TFT_Fill_Circle+0x8e>
				TFT_Draw_VLine(au16_X0-u16_X, au16_Y0 - u16_Y, (2*u16_Y) +1, au16_Color);
				TFT_Draw_VLine(au16_X0-u16_Y, au16_Y0 - u16_X, (2*u16_X) +1, au16_Color);
			break;
		}
	}
}
    4c92:	65 96       	adiw	r28, 0x15	; 21
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	f8 94       	cli
    4c98:	de bf       	out	0x3e, r29	; 62
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	cd bf       	out	0x3d, r28	; 61
    4c9e:	cf 91       	pop	r28
    4ca0:	df 91       	pop	r29
    4ca2:	1f 91       	pop	r17
    4ca4:	0f 91       	pop	r16
    4ca6:	08 95       	ret

00004ca8 <TFT_Draw_Rect>:

void TFT_Draw_Rect(uint16_t au16_X, uint16_t au16_Y,  uint16_t au16_Width, uint16_t au16_Hight,  uint16_t au16_Color)
{
    4ca8:	0f 93       	push	r16
    4caa:	1f 93       	push	r17
    4cac:	df 93       	push	r29
    4cae:	cf 93       	push	r28
    4cb0:	cd b7       	in	r28, 0x3d	; 61
    4cb2:	de b7       	in	r29, 0x3e	; 62
    4cb4:	2a 97       	sbiw	r28, 0x0a	; 10
    4cb6:	0f b6       	in	r0, 0x3f	; 63
    4cb8:	f8 94       	cli
    4cba:	de bf       	out	0x3e, r29	; 62
    4cbc:	0f be       	out	0x3f, r0	; 63
    4cbe:	cd bf       	out	0x3d, r28	; 61
    4cc0:	9a 83       	std	Y+2, r25	; 0x02
    4cc2:	89 83       	std	Y+1, r24	; 0x01
    4cc4:	7c 83       	std	Y+4, r23	; 0x04
    4cc6:	6b 83       	std	Y+3, r22	; 0x03
    4cc8:	5e 83       	std	Y+6, r21	; 0x06
    4cca:	4d 83       	std	Y+5, r20	; 0x05
    4ccc:	38 87       	std	Y+8, r19	; 0x08
    4cce:	2f 83       	std	Y+7, r18	; 0x07
    4cd0:	1a 87       	std	Y+10, r17	; 0x0a
    4cd2:	09 87       	std	Y+9, r16	; 0x09
	TFT_Draw_HLine(au16_X, au16_Y, au16_Width, au16_Color);
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
    4cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    4cda:	3c 81       	ldd	r19, Y+4	; 0x04
    4cdc:	4d 81       	ldd	r20, Y+5	; 0x05
    4cde:	5e 81       	ldd	r21, Y+6	; 0x06
    4ce0:	e9 85       	ldd	r30, Y+9	; 0x09
    4ce2:	fa 85       	ldd	r31, Y+10	; 0x0a
    4ce4:	b9 01       	movw	r22, r18
    4ce6:	9f 01       	movw	r18, r30
    4ce8:	0e 94 bd 21 	call	0x437a	; 0x437a <TFT_Draw_HLine>
	TFT_Draw_HLine(au16_X, au16_Y + au16_Hight -1U, au16_Width, au16_Color);
    4cec:	2b 81       	ldd	r18, Y+3	; 0x03
    4cee:	3c 81       	ldd	r19, Y+4	; 0x04
    4cf0:	8f 81       	ldd	r24, Y+7	; 0x07
    4cf2:	98 85       	ldd	r25, Y+8	; 0x08
    4cf4:	82 0f       	add	r24, r18
    4cf6:	93 1f       	adc	r25, r19
    4cf8:	ac 01       	movw	r20, r24
    4cfa:	41 50       	subi	r20, 0x01	; 1
    4cfc:	50 40       	sbci	r21, 0x00	; 0
    4cfe:	89 81       	ldd	r24, Y+1	; 0x01
    4d00:	9a 81       	ldd	r25, Y+2	; 0x02
    4d02:	2d 81       	ldd	r18, Y+5	; 0x05
    4d04:	3e 81       	ldd	r19, Y+6	; 0x06
    4d06:	e9 85       	ldd	r30, Y+9	; 0x09
    4d08:	fa 85       	ldd	r31, Y+10	; 0x0a
    4d0a:	ba 01       	movw	r22, r20
    4d0c:	a9 01       	movw	r20, r18
    4d0e:	9f 01       	movw	r18, r30
    4d10:	0e 94 bd 21 	call	0x437a	; 0x437a <TFT_Draw_HLine>

	TFT_Draw_VLine(au16_X, au16_Y, au16_Hight, au16_Color);
    4d14:	89 81       	ldd	r24, Y+1	; 0x01
    4d16:	9a 81       	ldd	r25, Y+2	; 0x02
    4d18:	2b 81       	ldd	r18, Y+3	; 0x03
    4d1a:	3c 81       	ldd	r19, Y+4	; 0x04
    4d1c:	4f 81       	ldd	r20, Y+7	; 0x07
    4d1e:	58 85       	ldd	r21, Y+8	; 0x08
    4d20:	e9 85       	ldd	r30, Y+9	; 0x09
    4d22:	fa 85       	ldd	r31, Y+10	; 0x0a
    4d24:	b9 01       	movw	r22, r18
    4d26:	9f 01       	movw	r18, r30
    4d28:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
	TFT_Draw_VLine(au16_X + au16_Width -1U, au16_Y, au16_Hight, au16_Color);
    4d2c:	29 81       	ldd	r18, Y+1	; 0x01
    4d2e:	3a 81       	ldd	r19, Y+2	; 0x02
    4d30:	8d 81       	ldd	r24, Y+5	; 0x05
    4d32:	9e 81       	ldd	r25, Y+6	; 0x06
    4d34:	82 0f       	add	r24, r18
    4d36:	93 1f       	adc	r25, r19
    4d38:	01 97       	sbiw	r24, 0x01	; 1
    4d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    4d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    4d3e:	4f 81       	ldd	r20, Y+7	; 0x07
    4d40:	58 85       	ldd	r21, Y+8	; 0x08
    4d42:	e9 85       	ldd	r30, Y+9	; 0x09
    4d44:	fa 85       	ldd	r31, Y+10	; 0x0a
    4d46:	b9 01       	movw	r22, r18
    4d48:	9f 01       	movw	r18, r30
    4d4a:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
}
    4d4e:	2a 96       	adiw	r28, 0x0a	; 10
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	cd bf       	out	0x3d, r28	; 61
    4d5a:	cf 91       	pop	r28
    4d5c:	df 91       	pop	r29
    4d5e:	1f 91       	pop	r17
    4d60:	0f 91       	pop	r16
    4d62:	08 95       	ret

00004d64 <TFT_SetCursor>:

/***************************************************************************************/
/* TEXT PRINT FUNCTIONS         		                               				   */
/***************************************************************************************/
void TFT_SetCursor(uint16_t au16_X, uint16_t au16_Y)
{
    4d64:	df 93       	push	r29
    4d66:	cf 93       	push	r28
    4d68:	00 d0       	rcall	.+0      	; 0x4d6a <TFT_SetCursor+0x6>
    4d6a:	00 d0       	rcall	.+0      	; 0x4d6c <TFT_SetCursor+0x8>
    4d6c:	cd b7       	in	r28, 0x3d	; 61
    4d6e:	de b7       	in	r29, 0x3e	; 62
    4d70:	9a 83       	std	Y+2, r25	; 0x02
    4d72:	89 83       	std	Y+1, r24	; 0x01
    4d74:	7c 83       	std	Y+4, r23	; 0x04
    4d76:	6b 83       	std	Y+3, r22	; 0x03
		gu16_Cursor_X = au16_X;
		gu16_Cursor_Y = au16_Y;

	#elif(TFT_DISPLAY_MODE == TFT_LANDSCAPE)

		gu16_Cursor_X = au16_Y;
    4d78:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d7c:	90 93 0c 07 	sts	0x070C, r25
    4d80:	80 93 0b 07 	sts	0x070B, r24
		gu16_Cursor_Y = au16_X;
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
    4d86:	9a 81       	ldd	r25, Y+2	; 0x02
    4d88:	90 93 0a 07 	sts	0x070A, r25
    4d8c:	80 93 09 07 	sts	0x0709, r24

	#elif(TFT_DISPLAY_MODE == TFT_LANDSCAPE_REV)
			gu16_Cursor_X = au16_Y + TFT_HIGHT;
			gu16_Cursor_Y = au16_X + TFT_WIDTH;
	#endif
}
    4d90:	0f 90       	pop	r0
    4d92:	0f 90       	pop	r0
    4d94:	0f 90       	pop	r0
    4d96:	0f 90       	pop	r0
    4d98:	cf 91       	pop	r28
    4d9a:	df 91       	pop	r29
    4d9c:	08 95       	ret

00004d9e <TFT_SetTextColor>:


void TFT_SetTextColor(uint16_t au16_Point_C, uint16_t au16_Back_C)
{
    4d9e:	df 93       	push	r29
    4da0:	cf 93       	push	r28
    4da2:	00 d0       	rcall	.+0      	; 0x4da4 <TFT_SetTextColor+0x6>
    4da4:	00 d0       	rcall	.+0      	; 0x4da6 <TFT_SetTextColor+0x8>
    4da6:	cd b7       	in	r28, 0x3d	; 61
    4da8:	de b7       	in	r29, 0x3e	; 62
    4daa:	9a 83       	std	Y+2, r25	; 0x02
    4dac:	89 83       	std	Y+1, r24	; 0x01
    4dae:	7c 83       	std	Y+4, r23	; 0x04
    4db0:	6b 83       	std	Y+3, r22	; 0x03
	gu16_Point_Color = au16_Point_C;
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	9a 81       	ldd	r25, Y+2	; 0x02
    4db6:	90 93 06 07 	sts	0x0706, r25
    4dba:	80 93 05 07 	sts	0x0705, r24
	gu16_Back_Color  = au16_Back_C;
    4dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc2:	90 93 08 07 	sts	0x0708, r25
    4dc6:	80 93 07 07 	sts	0x0707, r24
}
    4dca:	0f 90       	pop	r0
    4dcc:	0f 90       	pop	r0
    4dce:	0f 90       	pop	r0
    4dd0:	0f 90       	pop	r0
    4dd2:	cf 91       	pop	r28
    4dd4:	df 91       	pop	r29
    4dd6:	08 95       	ret

00004dd8 <TFT_Print_String>:

void TFT_Print_String(uint8_t *pu8_Str, uint8_t au8_Char_Size, uint8_t au8_TFT_Str_Mode)
{
    4dd8:	0f 93       	push	r16
    4dda:	df 93       	push	r29
    4ddc:	cf 93       	push	r28
    4dde:	cd b7       	in	r28, 0x3d	; 61
    4de0:	de b7       	in	r29, 0x3e	; 62
    4de2:	29 97       	sbiw	r28, 0x09	; 9
    4de4:	0f b6       	in	r0, 0x3f	; 63
    4de6:	f8 94       	cli
    4de8:	de bf       	out	0x3e, r29	; 62
    4dea:	0f be       	out	0x3f, r0	; 63
    4dec:	cd bf       	out	0x3d, r28	; 61
    4dee:	9d 83       	std	Y+5, r25	; 0x05
    4df0:	8c 83       	std	Y+4, r24	; 0x04
    4df2:	6e 83       	std	Y+6, r22	; 0x06
    4df4:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t u8_index = INITIAL;
    4df6:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8_Font_W;
	uint8_t u8_Font_H;

	switch(au8_Char_Size)
    4df8:	8e 81       	ldd	r24, Y+6	; 0x06
    4dfa:	28 2f       	mov	r18, r24
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	39 87       	std	Y+9, r19	; 0x09
    4e00:	28 87       	std	Y+8, r18	; 0x08
    4e02:	88 85       	ldd	r24, Y+8	; 0x08
    4e04:	99 85       	ldd	r25, Y+9	; 0x09
    4e06:	81 30       	cpi	r24, 0x01	; 1
    4e08:	91 05       	cpc	r25, r1
    4e0a:	79 f0       	breq	.+30     	; 0x4e2a <TFT_Print_String+0x52>
    4e0c:	28 85       	ldd	r18, Y+8	; 0x08
    4e0e:	39 85       	ldd	r19, Y+9	; 0x09
    4e10:	22 30       	cpi	r18, 0x02	; 2
    4e12:	31 05       	cpc	r19, r1
    4e14:	79 f0       	breq	.+30     	; 0x4e34 <TFT_Print_String+0x5c>
    4e16:	88 85       	ldd	r24, Y+8	; 0x08
    4e18:	99 85       	ldd	r25, Y+9	; 0x09
    4e1a:	00 97       	sbiw	r24, 0x00	; 0
    4e1c:	09 f0       	breq	.+2      	; 0x4e20 <TFT_Print_String+0x48>
    4e1e:	6e c0       	rjmp	.+220    	; 0x4efc <TFT_Print_String+0x124>
	{
		case TFT_CHAR_18_32 :

			u8_Font_W = 18U;
    4e20:	82 e1       	ldi	r24, 0x12	; 18
    4e22:	8a 83       	std	Y+2, r24	; 0x02
			u8_Font_H = 32U;
    4e24:	80 e2       	ldi	r24, 0x20	; 32
    4e26:	89 83       	std	Y+1, r24	; 0x01
    4e28:	69 c0       	rjmp	.+210    	; 0x4efc <TFT_Print_String+0x124>
		break;

		case TFT_CHAR_14_24 :

			u8_Font_W = 14U;
    4e2a:	8e e0       	ldi	r24, 0x0E	; 14
    4e2c:	8a 83       	std	Y+2, r24	; 0x02
			u8_Font_H = 24U;
    4e2e:	88 e1       	ldi	r24, 0x18	; 24
    4e30:	89 83       	std	Y+1, r24	; 0x01
    4e32:	64 c0       	rjmp	.+200    	; 0x4efc <TFT_Print_String+0x124>
		break;

		case TFT_CHAR_8_16 :

			u8_Font_W = 8U;
    4e34:	88 e0       	ldi	r24, 0x08	; 8
    4e36:	8a 83       	std	Y+2, r24	; 0x02
			u8_Font_H = 16U;
    4e38:	80 e1       	ldi	r24, 0x10	; 16
    4e3a:	89 83       	std	Y+1, r24	; 0x01
    4e3c:	5f c0       	rjmp	.+190    	; 0x4efc <TFT_Print_String+0x124>
		break;
	}

	while(pu8_Str[u8_index]!= '\0')
	{
		if(gu16_Cursor_Y > (gu16_TFT_W - u8_Font_W))
    4e3e:	20 91 b6 00 	lds	r18, 0x00B6
    4e42:	30 91 b7 00 	lds	r19, 0x00B7
    4e46:	8a 81       	ldd	r24, Y+2	; 0x02
    4e48:	88 2f       	mov	r24, r24
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	28 1b       	sub	r18, r24
    4e4e:	39 0b       	sbc	r19, r25
    4e50:	80 91 09 07 	lds	r24, 0x0709
    4e54:	90 91 0a 07 	lds	r25, 0x070A
    4e58:	28 17       	cp	r18, r24
    4e5a:	39 07       	cpc	r19, r25
    4e5c:	88 f4       	brcc	.+34     	; 0x4e80 <TFT_Print_String+0xa8>
		{
			gu16_Cursor_Y = INITIAL;
    4e5e:	10 92 0a 07 	sts	0x070A, r1
    4e62:	10 92 09 07 	sts	0x0709, r1
			gu16_Cursor_X += u8_Font_H;
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	28 2f       	mov	r18, r24
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	80 91 0b 07 	lds	r24, 0x070B
    4e70:	90 91 0c 07 	lds	r25, 0x070C
    4e74:	82 0f       	add	r24, r18
    4e76:	93 1f       	adc	r25, r19
    4e78:	90 93 0c 07 	sts	0x070C, r25
    4e7c:	80 93 0b 07 	sts	0x070B, r24
		}

		if(gu16_Cursor_X > (gu16_TFT_H - u8_Font_H))
    4e80:	20 91 b8 00 	lds	r18, 0x00B8
    4e84:	30 91 b9 00 	lds	r19, 0x00B9
    4e88:	89 81       	ldd	r24, Y+1	; 0x01
    4e8a:	88 2f       	mov	r24, r24
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	28 1b       	sub	r18, r24
    4e90:	39 0b       	sbc	r19, r25
    4e92:	80 91 0b 07 	lds	r24, 0x070B
    4e96:	90 91 0c 07 	lds	r25, 0x070C
    4e9a:	28 17       	cp	r18, r24
    4e9c:	39 07       	cpc	r19, r25
    4e9e:	40 f4       	brcc	.+16     	; 0x4eb0 <TFT_Print_String+0xd8>
		{
			gu16_Cursor_X = INITIAL;
    4ea0:	10 92 0c 07 	sts	0x070C, r1
    4ea4:	10 92 0b 07 	sts	0x070B, r1
			gu16_Cursor_Y = INITIAL;
    4ea8:	10 92 0a 07 	sts	0x070A, r1
    4eac:	10 92 09 07 	sts	0x0709, r1
		}

		TFT_Print_Char(gu16_Cursor_Y, gu16_Cursor_X, au8_Char_Size,pu8_Str[u8_index], au8_TFT_Str_Mode);
    4eb0:	40 91 09 07 	lds	r20, 0x0709
    4eb4:	50 91 0a 07 	lds	r21, 0x070A
    4eb8:	60 91 0b 07 	lds	r22, 0x070B
    4ebc:	70 91 0c 07 	lds	r23, 0x070C
    4ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec2:	28 2f       	mov	r18, r24
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    4eca:	fc 01       	movw	r30, r24
    4ecc:	e2 0f       	add	r30, r18
    4ece:	f3 1f       	adc	r31, r19
    4ed0:	20 81       	ld	r18, Z
    4ed2:	ca 01       	movw	r24, r20
    4ed4:	4e 81       	ldd	r20, Y+6	; 0x06
    4ed6:	0f 81       	ldd	r16, Y+7	; 0x07
    4ed8:	0e 94 28 18 	call	0x3050	; 0x3050 <TFT_Print_Char>
		gu16_Cursor_Y += u8_Font_W;
    4edc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ede:	28 2f       	mov	r18, r24
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	80 91 09 07 	lds	r24, 0x0709
    4ee6:	90 91 0a 07 	lds	r25, 0x070A
    4eea:	82 0f       	add	r24, r18
    4eec:	93 1f       	adc	r25, r19
    4eee:	90 93 0a 07 	sts	0x070A, r25
    4ef2:	80 93 09 07 	sts	0x0709, r24
		u8_index++;
    4ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef8:	8f 5f       	subi	r24, 0xFF	; 255
    4efa:	8b 83       	std	Y+3, r24	; 0x03
			u8_Font_W = 8U;
			u8_Font_H = 16U;
		break;
	}

	while(pu8_Str[u8_index]!= '\0')
    4efc:	8b 81       	ldd	r24, Y+3	; 0x03
    4efe:	28 2f       	mov	r18, r24
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	8c 81       	ldd	r24, Y+4	; 0x04
    4f04:	9d 81       	ldd	r25, Y+5	; 0x05
    4f06:	fc 01       	movw	r30, r24
    4f08:	e2 0f       	add	r30, r18
    4f0a:	f3 1f       	adc	r31, r19
    4f0c:	80 81       	ld	r24, Z
    4f0e:	88 23       	and	r24, r24
    4f10:	09 f0       	breq	.+2      	; 0x4f14 <TFT_Print_String+0x13c>
    4f12:	95 cf       	rjmp	.-214    	; 0x4e3e <TFT_Print_String+0x66>

		TFT_Print_Char(gu16_Cursor_Y, gu16_Cursor_X, au8_Char_Size,pu8_Str[u8_index], au8_TFT_Str_Mode);
		gu16_Cursor_Y += u8_Font_W;
		u8_index++;
	}
}
    4f14:	29 96       	adiw	r28, 0x09	; 9
    4f16:	0f b6       	in	r0, 0x3f	; 63
    4f18:	f8 94       	cli
    4f1a:	de bf       	out	0x3e, r29	; 62
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	cd bf       	out	0x3d, r28	; 61
    4f20:	cf 91       	pop	r28
    4f22:	df 91       	pop	r29
    4f24:	0f 91       	pop	r16
    4f26:	08 95       	ret

00004f28 <TFT_Print_Number>:

void TFT_Print_Number(sint32_t  as32_Num, uint8_t au8_Char_Size, uint8_t au8_TFT_Str_Mode)
{
    4f28:	0f 93       	push	r16
    4f2a:	df 93       	push	r29
    4f2c:	cf 93       	push	r28
    4f2e:	cd b7       	in	r28, 0x3d	; 61
    4f30:	de b7       	in	r29, 0x3e	; 62
    4f32:	66 97       	sbiw	r28, 0x16	; 22
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	f8 94       	cli
    4f38:	de bf       	out	0x3e, r29	; 62
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	cd bf       	out	0x3d, r28	; 61
    4f3e:	6f 87       	std	Y+15, r22	; 0x0f
    4f40:	78 8b       	std	Y+16, r23	; 0x10
    4f42:	89 8b       	std	Y+17, r24	; 0x11
    4f44:	9a 8b       	std	Y+18, r25	; 0x12
    4f46:	4b 8b       	std	Y+19, r20	; 0x13
    4f48:	2c 8b       	std	Y+20, r18	; 0x14

	uint32_t u32_Num_Rev = 1L;
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	a0 e0       	ldi	r26, 0x00	; 0
    4f50:	b0 e0       	ldi	r27, 0x00	; 0
    4f52:	8b 87       	std	Y+11, r24	; 0x0b
    4f54:	9c 87       	std	Y+12, r25	; 0x0c
    4f56:	ad 87       	std	Y+13, r26	; 0x0d
    4f58:	be 87       	std	Y+14, r27	; 0x0e
	uint32_t u32_Reminder_1 = INITIAL;
    4f5a:	1f 82       	std	Y+7, r1	; 0x07
    4f5c:	18 86       	std	Y+8, r1	; 0x08
    4f5e:	19 86       	std	Y+9, r1	; 0x09
    4f60:	1a 86       	std	Y+10, r1	; 0x0a
	uint32_t u32_Reminder_2 = INITIAL;
    4f62:	1b 82       	std	Y+3, r1	; 0x03
    4f64:	1c 82       	std	Y+4, r1	; 0x04
    4f66:	1d 82       	std	Y+5, r1	; 0x05
    4f68:	1e 82       	std	Y+6, r1	; 0x06

	uint8_t u8_Font_W;
	uint8_t u8_Font_H;

	switch(au8_Char_Size)
    4f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    4f6c:	28 2f       	mov	r18, r24
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	3e 8b       	std	Y+22, r19	; 0x16
    4f72:	2d 8b       	std	Y+21, r18	; 0x15
    4f74:	8d 89       	ldd	r24, Y+21	; 0x15
    4f76:	9e 89       	ldd	r25, Y+22	; 0x16
    4f78:	81 30       	cpi	r24, 0x01	; 1
    4f7a:	91 05       	cpc	r25, r1
    4f7c:	71 f0       	breq	.+28     	; 0x4f9a <TFT_Print_Number+0x72>
    4f7e:	2d 89       	ldd	r18, Y+21	; 0x15
    4f80:	3e 89       	ldd	r19, Y+22	; 0x16
    4f82:	22 30       	cpi	r18, 0x02	; 2
    4f84:	31 05       	cpc	r19, r1
    4f86:	71 f0       	breq	.+28     	; 0x4fa4 <TFT_Print_Number+0x7c>
    4f88:	8d 89       	ldd	r24, Y+21	; 0x15
    4f8a:	9e 89       	ldd	r25, Y+22	; 0x16
    4f8c:	00 97       	sbiw	r24, 0x00	; 0
    4f8e:	71 f4       	brne	.+28     	; 0x4fac <TFT_Print_Number+0x84>
	{
		case TFT_CHAR_18_32 :

			u8_Font_W = 18U;
    4f90:	82 e1       	ldi	r24, 0x12	; 18
    4f92:	8a 83       	std	Y+2, r24	; 0x02
			u8_Font_H = 32U;
    4f94:	80 e2       	ldi	r24, 0x20	; 32
    4f96:	89 83       	std	Y+1, r24	; 0x01
    4f98:	09 c0       	rjmp	.+18     	; 0x4fac <TFT_Print_Number+0x84>
		break;

		case TFT_CHAR_14_24 :

			u8_Font_W = 14U;
    4f9a:	8e e0       	ldi	r24, 0x0E	; 14
    4f9c:	8a 83       	std	Y+2, r24	; 0x02
			u8_Font_H = 24U;
    4f9e:	88 e1       	ldi	r24, 0x18	; 24
    4fa0:	89 83       	std	Y+1, r24	; 0x01
    4fa2:	04 c0       	rjmp	.+8      	; 0x4fac <TFT_Print_Number+0x84>
		break;

		case TFT_CHAR_8_16 :

			u8_Font_W = 8U;
    4fa4:	88 e0       	ldi	r24, 0x08	; 8
    4fa6:	8a 83       	std	Y+2, r24	; 0x02
			u8_Font_H = 16U;
    4fa8:	80 e1       	ldi	r24, 0x10	; 16
    4faa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	if(gu16_Cursor_Y > (gu16_TFT_W - u8_Font_W))
    4fac:	20 91 b6 00 	lds	r18, 0x00B6
    4fb0:	30 91 b7 00 	lds	r19, 0x00B7
    4fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb6:	88 2f       	mov	r24, r24
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	28 1b       	sub	r18, r24
    4fbc:	39 0b       	sbc	r19, r25
    4fbe:	80 91 09 07 	lds	r24, 0x0709
    4fc2:	90 91 0a 07 	lds	r25, 0x070A
    4fc6:	28 17       	cp	r18, r24
    4fc8:	39 07       	cpc	r19, r25
    4fca:	88 f4       	brcc	.+34     	; 0x4fee <TFT_Print_Number+0xc6>
	{
		gu16_Cursor_Y = INITIAL;
    4fcc:	10 92 0a 07 	sts	0x070A, r1
    4fd0:	10 92 09 07 	sts	0x0709, r1
		gu16_Cursor_X += u8_Font_H;
    4fd4:	89 81       	ldd	r24, Y+1	; 0x01
    4fd6:	28 2f       	mov	r18, r24
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	80 91 0b 07 	lds	r24, 0x070B
    4fde:	90 91 0c 07 	lds	r25, 0x070C
    4fe2:	82 0f       	add	r24, r18
    4fe4:	93 1f       	adc	r25, r19
    4fe6:	90 93 0c 07 	sts	0x070C, r25
    4fea:	80 93 0b 07 	sts	0x070B, r24
	}

	if(gu16_Cursor_X > (gu16_TFT_H - u8_Font_H))
    4fee:	20 91 b8 00 	lds	r18, 0x00B8
    4ff2:	30 91 b9 00 	lds	r19, 0x00B9
    4ff6:	89 81       	ldd	r24, Y+1	; 0x01
    4ff8:	88 2f       	mov	r24, r24
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	28 1b       	sub	r18, r24
    4ffe:	39 0b       	sbc	r19, r25
    5000:	80 91 0b 07 	lds	r24, 0x070B
    5004:	90 91 0c 07 	lds	r25, 0x070C
    5008:	28 17       	cp	r18, r24
    500a:	39 07       	cpc	r19, r25
    500c:	40 f4       	brcc	.+16     	; 0x501e <TFT_Print_Number+0xf6>
	{
		gu16_Cursor_X = INITIAL;
    500e:	10 92 0c 07 	sts	0x070C, r1
    5012:	10 92 0b 07 	sts	0x070B, r1
		gu16_Cursor_Y = INITIAL;
    5016:	10 92 0a 07 	sts	0x070A, r1
    501a:	10 92 09 07 	sts	0x0709, r1
	}

	switch(as32_Num)
    501e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5020:	98 89       	ldd	r25, Y+16	; 0x10
    5022:	a9 89       	ldd	r26, Y+17	; 0x11
    5024:	ba 89       	ldd	r27, Y+18	; 0x12
    5026:	00 97       	sbiw	r24, 0x00	; 0
    5028:	a1 05       	cpc	r26, r1
    502a:	b1 05       	cpc	r27, r1
    502c:	e1 f4       	brne	.+56     	; 0x5066 <TFT_Print_Number+0x13e>
	{
		case 0U:
			TFT_Print_Char(gu16_Cursor_Y, gu16_Cursor_X, au8_Char_Size, '0', au8_TFT_Str_Mode);
    502e:	80 91 09 07 	lds	r24, 0x0709
    5032:	90 91 0a 07 	lds	r25, 0x070A
    5036:	20 91 0b 07 	lds	r18, 0x070B
    503a:	30 91 0c 07 	lds	r19, 0x070C
    503e:	b9 01       	movw	r22, r18
    5040:	4b 89       	ldd	r20, Y+19	; 0x13
    5042:	20 e3       	ldi	r18, 0x30	; 48
    5044:	0c 89       	ldd	r16, Y+20	; 0x14
    5046:	0e 94 28 18 	call	0x3050	; 0x3050 <TFT_Print_Char>
			gu16_Cursor_Y += u8_Font_W;
    504a:	8a 81       	ldd	r24, Y+2	; 0x02
    504c:	28 2f       	mov	r18, r24
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	80 91 09 07 	lds	r24, 0x0709
    5054:	90 91 0a 07 	lds	r25, 0x070A
    5058:	82 0f       	add	r24, r18
    505a:	93 1f       	adc	r25, r19
    505c:	90 93 0a 07 	sts	0x070A, r25
    5060:	80 93 09 07 	sts	0x0709, r24
    5064:	b8 c0       	rjmp	.+368    	; 0x51d6 <TFT_Print_Number+0x2ae>
		break;
		default:
			if(0U > as32_Num)
    5066:	8f 85       	ldd	r24, Y+15	; 0x0f
    5068:	98 89       	ldd	r25, Y+16	; 0x10
    506a:	a9 89       	ldd	r26, Y+17	; 0x11
    506c:	ba 89       	ldd	r27, Y+18	; 0x12
    506e:	bb 23       	and	r27, r27
    5070:	0c f0       	brlt	.+2      	; 0x5074 <TFT_Print_Number+0x14c>
    5072:	5a c0       	rjmp	.+180    	; 0x5128 <TFT_Print_Number+0x200>
			{
				TFT_Print_Char(gu16_Cursor_Y, gu16_Cursor_X, au8_Char_Size, '-', au8_TFT_Str_Mode);
    5074:	80 91 09 07 	lds	r24, 0x0709
    5078:	90 91 0a 07 	lds	r25, 0x070A
    507c:	20 91 0b 07 	lds	r18, 0x070B
    5080:	30 91 0c 07 	lds	r19, 0x070C
    5084:	b9 01       	movw	r22, r18
    5086:	4b 89       	ldd	r20, Y+19	; 0x13
    5088:	2d e2       	ldi	r18, 0x2D	; 45
    508a:	0c 89       	ldd	r16, Y+20	; 0x14
    508c:	0e 94 28 18 	call	0x3050	; 0x3050 <TFT_Print_Char>
				gu16_Cursor_Y += u8_Font_W;
    5090:	8a 81       	ldd	r24, Y+2	; 0x02
    5092:	28 2f       	mov	r18, r24
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	80 91 09 07 	lds	r24, 0x0709
    509a:	90 91 0a 07 	lds	r25, 0x070A
    509e:	82 0f       	add	r24, r18
    50a0:	93 1f       	adc	r25, r19
    50a2:	90 93 0a 07 	sts	0x070A, r25
    50a6:	80 93 09 07 	sts	0x0709, r24
    50aa:	3e c0       	rjmp	.+124    	; 0x5128 <TFT_Print_Number+0x200>
			}
			while (as32_Num)
			{
				u32_Reminder_1 = as32_Num % 10;
    50ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    50ae:	98 89       	ldd	r25, Y+16	; 0x10
    50b0:	a9 89       	ldd	r26, Y+17	; 0x11
    50b2:	ba 89       	ldd	r27, Y+18	; 0x12
    50b4:	2a e0       	ldi	r18, 0x0A	; 10
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	40 e0       	ldi	r20, 0x00	; 0
    50ba:	50 e0       	ldi	r21, 0x00	; 0
    50bc:	bc 01       	movw	r22, r24
    50be:	cd 01       	movw	r24, r26
    50c0:	0e 94 59 30 	call	0x60b2	; 0x60b2 <__divmodsi4>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	8f 83       	std	Y+7, r24	; 0x07
    50ca:	98 87       	std	Y+8, r25	; 0x08
    50cc:	a9 87       	std	Y+9, r26	; 0x09
    50ce:	ba 87       	std	Y+10, r27	; 0x0a
				as32_Num      /= 10 ;
    50d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    50d2:	98 89       	ldd	r25, Y+16	; 0x10
    50d4:	a9 89       	ldd	r26, Y+17	; 0x11
    50d6:	ba 89       	ldd	r27, Y+18	; 0x12
    50d8:	2a e0       	ldi	r18, 0x0A	; 10
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	40 e0       	ldi	r20, 0x00	; 0
    50de:	50 e0       	ldi	r21, 0x00	; 0
    50e0:	bc 01       	movw	r22, r24
    50e2:	cd 01       	movw	r24, r26
    50e4:	0e 94 59 30 	call	0x60b2	; 0x60b2 <__divmodsi4>
    50e8:	da 01       	movw	r26, r20
    50ea:	c9 01       	movw	r24, r18
    50ec:	8f 87       	std	Y+15, r24	; 0x0f
    50ee:	98 8b       	std	Y+16, r25	; 0x10
    50f0:	a9 8b       	std	Y+17, r26	; 0x11
    50f2:	ba 8b       	std	Y+18, r27	; 0x12
				u32_Num_Rev    = (u32_Num_Rev *10) + u32_Reminder_1 ;
    50f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    50f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    50f8:	ad 85       	ldd	r26, Y+13	; 0x0d
    50fa:	be 85       	ldd	r27, Y+14	; 0x0e
    50fc:	2a e0       	ldi	r18, 0x0A	; 10
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	40 e0       	ldi	r20, 0x00	; 0
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	bc 01       	movw	r22, r24
    5106:	cd 01       	movw	r24, r26
    5108:	0e 94 18 30 	call	0x6030	; 0x6030 <__mulsi3>
    510c:	9b 01       	movw	r18, r22
    510e:	ac 01       	movw	r20, r24
    5110:	8f 81       	ldd	r24, Y+7	; 0x07
    5112:	98 85       	ldd	r25, Y+8	; 0x08
    5114:	a9 85       	ldd	r26, Y+9	; 0x09
    5116:	ba 85       	ldd	r27, Y+10	; 0x0a
    5118:	82 0f       	add	r24, r18
    511a:	93 1f       	adc	r25, r19
    511c:	a4 1f       	adc	r26, r20
    511e:	b5 1f       	adc	r27, r21
    5120:	8b 87       	std	Y+11, r24	; 0x0b
    5122:	9c 87       	std	Y+12, r25	; 0x0c
    5124:	ad 87       	std	Y+13, r26	; 0x0d
    5126:	be 87       	std	Y+14, r27	; 0x0e
			if(0U > as32_Num)
			{
				TFT_Print_Char(gu16_Cursor_Y, gu16_Cursor_X, au8_Char_Size, '-', au8_TFT_Str_Mode);
				gu16_Cursor_Y += u8_Font_W;
			}
			while (as32_Num)
    5128:	8f 85       	ldd	r24, Y+15	; 0x0f
    512a:	98 89       	ldd	r25, Y+16	; 0x10
    512c:	a9 89       	ldd	r26, Y+17	; 0x11
    512e:	ba 89       	ldd	r27, Y+18	; 0x12
    5130:	00 97       	sbiw	r24, 0x00	; 0
    5132:	a1 05       	cpc	r26, r1
    5134:	b1 05       	cpc	r27, r1
    5136:	09 f0       	breq	.+2      	; 0x513a <TFT_Print_Number+0x212>
    5138:	b9 cf       	rjmp	.-142    	; 0x50ac <TFT_Print_Number+0x184>
    513a:	43 c0       	rjmp	.+134    	; 0x51c2 <TFT_Print_Number+0x29a>
				as32_Num      /= 10 ;
				u32_Num_Rev    = (u32_Num_Rev *10) + u32_Reminder_1 ;
			}
			while (u32_Num_Rev != 1U)
			{
				u32_Reminder_2 = u32_Num_Rev % 10 ;
    513c:	8b 85       	ldd	r24, Y+11	; 0x0b
    513e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5140:	ad 85       	ldd	r26, Y+13	; 0x0d
    5142:	be 85       	ldd	r27, Y+14	; 0x0e
    5144:	2a e0       	ldi	r18, 0x0A	; 10
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	40 e0       	ldi	r20, 0x00	; 0
    514a:	50 e0       	ldi	r21, 0x00	; 0
    514c:	bc 01       	movw	r22, r24
    514e:	cd 01       	movw	r24, r26
    5150:	0e 94 37 30 	call	0x606e	; 0x606e <__udivmodsi4>
    5154:	dc 01       	movw	r26, r24
    5156:	cb 01       	movw	r24, r22
    5158:	8b 83       	std	Y+3, r24	; 0x03
    515a:	9c 83       	std	Y+4, r25	; 0x04
    515c:	ad 83       	std	Y+5, r26	; 0x05
    515e:	be 83       	std	Y+6, r27	; 0x06

				TFT_Print_Char(gu16_Cursor_Y, gu16_Cursor_X, au8_Char_Size,u32_Reminder_2 +'0', au8_TFT_Str_Mode);
    5160:	20 91 09 07 	lds	r18, 0x0709
    5164:	30 91 0a 07 	lds	r19, 0x070A
    5168:	40 91 0b 07 	lds	r20, 0x070B
    516c:	50 91 0c 07 	lds	r21, 0x070C
    5170:	8b 81       	ldd	r24, Y+3	; 0x03
    5172:	e8 2f       	mov	r30, r24
    5174:	e0 5d       	subi	r30, 0xD0	; 208
    5176:	c9 01       	movw	r24, r18
    5178:	ba 01       	movw	r22, r20
    517a:	4b 89       	ldd	r20, Y+19	; 0x13
    517c:	2e 2f       	mov	r18, r30
    517e:	0c 89       	ldd	r16, Y+20	; 0x14
    5180:	0e 94 28 18 	call	0x3050	; 0x3050 <TFT_Print_Char>
				gu16_Cursor_Y += u8_Font_W;
    5184:	8a 81       	ldd	r24, Y+2	; 0x02
    5186:	28 2f       	mov	r18, r24
    5188:	30 e0       	ldi	r19, 0x00	; 0
    518a:	80 91 09 07 	lds	r24, 0x0709
    518e:	90 91 0a 07 	lds	r25, 0x070A
    5192:	82 0f       	add	r24, r18
    5194:	93 1f       	adc	r25, r19
    5196:	90 93 0a 07 	sts	0x070A, r25
    519a:	80 93 09 07 	sts	0x0709, r24

				u32_Num_Rev /= 10 ;
    519e:	8b 85       	ldd	r24, Y+11	; 0x0b
    51a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    51a2:	ad 85       	ldd	r26, Y+13	; 0x0d
    51a4:	be 85       	ldd	r27, Y+14	; 0x0e
    51a6:	2a e0       	ldi	r18, 0x0A	; 10
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	40 e0       	ldi	r20, 0x00	; 0
    51ac:	50 e0       	ldi	r21, 0x00	; 0
    51ae:	bc 01       	movw	r22, r24
    51b0:	cd 01       	movw	r24, r26
    51b2:	0e 94 37 30 	call	0x606e	; 0x606e <__udivmodsi4>
    51b6:	da 01       	movw	r26, r20
    51b8:	c9 01       	movw	r24, r18
    51ba:	8b 87       	std	Y+11, r24	; 0x0b
    51bc:	9c 87       	std	Y+12, r25	; 0x0c
    51be:	ad 87       	std	Y+13, r26	; 0x0d
    51c0:	be 87       	std	Y+14, r27	; 0x0e
			{
				u32_Reminder_1 = as32_Num % 10;
				as32_Num      /= 10 ;
				u32_Num_Rev    = (u32_Num_Rev *10) + u32_Reminder_1 ;
			}
			while (u32_Num_Rev != 1U)
    51c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    51c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    51c6:	ad 85       	ldd	r26, Y+13	; 0x0d
    51c8:	be 85       	ldd	r27, Y+14	; 0x0e
    51ca:	81 30       	cpi	r24, 0x01	; 1
    51cc:	91 05       	cpc	r25, r1
    51ce:	a1 05       	cpc	r26, r1
    51d0:	b1 05       	cpc	r27, r1
    51d2:	09 f0       	breq	.+2      	; 0x51d6 <TFT_Print_Number+0x2ae>
    51d4:	b3 cf       	rjmp	.-154    	; 0x513c <TFT_Print_Number+0x214>

				u32_Num_Rev /= 10 ;
			}
		break;
	}
}
    51d6:	66 96       	adiw	r28, 0x16	; 22
    51d8:	0f b6       	in	r0, 0x3f	; 63
    51da:	f8 94       	cli
    51dc:	de bf       	out	0x3e, r29	; 62
    51de:	0f be       	out	0x3f, r0	; 63
    51e0:	cd bf       	out	0x3d, r28	; 61
    51e2:	cf 91       	pop	r28
    51e4:	df 91       	pop	r29
    51e6:	0f 91       	pop	r16
    51e8:	08 95       	ret

000051ea <ADC_CallBack>:
/* brief!  what ISR handling                                                           */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
static void ADC_CallBack(uint8_t au8_ADC_L, uint8_t au8_ADC_H)
{
    51ea:	df 93       	push	r29
    51ec:	cf 93       	push	r28
    51ee:	00 d0       	rcall	.+0      	; 0x51f0 <ADC_CallBack+0x6>
    51f0:	cd b7       	in	r28, 0x3d	; 61
    51f2:	de b7       	in	r29, 0x3e	; 62
    51f4:	89 83       	std	Y+1, r24	; 0x01
    51f6:	6a 83       	std	Y+2, r22	; 0x02
	/* Handling ADC Right Adjust */
	gau16_Volt[gu8_ISR_Count++] = ((uint16_t) au8_ADC_L) | ((uint16_t)(au8_ADC_H << 8U));
    51f8:	40 91 c3 00 	lds	r20, 0x00C3
    51fc:	50 91 c4 00 	lds	r21, 0x00C4
    5200:	89 81       	ldd	r24, Y+1	; 0x01
    5202:	28 2f       	mov	r18, r24
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	8a 81       	ldd	r24, Y+2	; 0x02
    5208:	88 2f       	mov	r24, r24
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	98 2f       	mov	r25, r24
    520e:	88 27       	eor	r24, r24
    5210:	28 2b       	or	r18, r24
    5212:	39 2b       	or	r19, r25
    5214:	ca 01       	movw	r24, r20
    5216:	88 0f       	add	r24, r24
    5218:	99 1f       	adc	r25, r25
    521a:	fc 01       	movw	r30, r24
    521c:	eb 53       	subi	r30, 0x3B	; 59
    521e:	ff 4f       	sbci	r31, 0xFF	; 255
    5220:	31 83       	std	Z+1, r19	; 0x01
    5222:	20 83       	st	Z, r18
    5224:	ca 01       	movw	r24, r20
    5226:	01 96       	adiw	r24, 0x01	; 1
    5228:	90 93 c4 00 	sts	0x00C4, r25
    522c:	80 93 c3 00 	sts	0x00C3, r24

	/* Handling ADC Left Adjust */
	//gau16_Volt[index++] = ((uint16_t)(au8_ADC_L >> 6U)) | ((uint16_t)(au8_ADC_H << 2U));

	// initiate the array index when it reach to the last index
	if(NUM_SAMPLE == gu8_ISR_Count)
    5230:	80 91 c3 00 	lds	r24, 0x00C3
    5234:	90 91 c4 00 	lds	r25, 0x00C4
    5238:	23 e0       	ldi	r18, 0x03	; 3
    523a:	80 32       	cpi	r24, 0x20	; 32
    523c:	92 07       	cpc	r25, r18
    523e:	21 f4       	brne	.+8      	; 0x5248 <ADC_CallBack+0x5e>
	{
		gu8_ISR_Count = INITIAL;
    5240:	10 92 c4 00 	sts	0x00C4, r1
    5244:	10 92 c3 00 	sts	0x00C3, r1
	}

}
    5248:	0f 90       	pop	r0
    524a:	0f 90       	pop	r0
    524c:	cf 91       	pop	r28
    524e:	df 91       	pop	r29
    5250:	08 95       	ret

00005252 <Max_V>:
/* param!  (o/p) pu16 that hold the Maximum volt                                        */
/* param!  (o/p) pu16 that hold the Maximum volt index                                  */
/* return! void                                                                        */
/***************************************************************************************/
static void Max_V (uint16_t *pu16_Arr, uint16_t *u16_Max_Val, uint16_t *u16_Max_Loc)
{
    5252:	df 93       	push	r29
    5254:	cf 93       	push	r28
    5256:	cd b7       	in	r28, 0x3d	; 61
    5258:	de b7       	in	r29, 0x3e	; 62
    525a:	28 97       	sbiw	r28, 0x08	; 8
    525c:	0f b6       	in	r0, 0x3f	; 63
    525e:	f8 94       	cli
    5260:	de bf       	out	0x3e, r29	; 62
    5262:	0f be       	out	0x3f, r0	; 63
    5264:	cd bf       	out	0x3d, r28	; 61
    5266:	9c 83       	std	Y+4, r25	; 0x04
    5268:	8b 83       	std	Y+3, r24	; 0x03
    526a:	7e 83       	std	Y+6, r23	; 0x06
    526c:	6d 83       	std	Y+5, r22	; 0x05
    526e:	58 87       	std	Y+8, r21	; 0x08
    5270:	4f 83       	std	Y+7, r20	; 0x07
	/* variable that hold array index */
	uint16_t  u16_index = INITIAL;
    5272:	1a 82       	std	Y+2, r1	; 0x02
    5274:	19 82       	std	Y+1, r1	; 0x01

	*u16_Max_Val = pu16_Arr[0U]; /* init. the u16_Max_Val with the first array value */
    5276:	eb 81       	ldd	r30, Y+3	; 0x03
    5278:	fc 81       	ldd	r31, Y+4	; 0x04
    527a:	80 81       	ld	r24, Z
    527c:	91 81       	ldd	r25, Z+1	; 0x01
    527e:	ed 81       	ldd	r30, Y+5	; 0x05
    5280:	fe 81       	ldd	r31, Y+6	; 0x06
    5282:	91 83       	std	Z+1, r25	; 0x01
    5284:	80 83       	st	Z, r24
	*u16_Max_Loc = INITIAL; 	 /* init. the u16_Max_Loc with the first array index */
    5286:	ef 81       	ldd	r30, Y+7	; 0x07
    5288:	f8 85       	ldd	r31, Y+8	; 0x08
    528a:	11 82       	std	Z+1, r1	; 0x01
    528c:	10 82       	st	Z, r1

	for(u16_index = 1U; u16_index < NUM_SAMPLE; u16_index++)
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	9a 83       	std	Y+2, r25	; 0x02
    5294:	89 83       	std	Y+1, r24	; 0x01
    5296:	2e c0       	rjmp	.+92     	; 0x52f4 <Max_V+0xa2>
	{
		/* Compare the array element until we reach to Maximum Volt */
		if(*u16_Max_Val < pu16_Arr[u16_index])
    5298:	ed 81       	ldd	r30, Y+5	; 0x05
    529a:	fe 81       	ldd	r31, Y+6	; 0x06
    529c:	40 81       	ld	r20, Z
    529e:	51 81       	ldd	r21, Z+1	; 0x01
    52a0:	89 81       	ldd	r24, Y+1	; 0x01
    52a2:	9a 81       	ldd	r25, Y+2	; 0x02
    52a4:	9c 01       	movw	r18, r24
    52a6:	22 0f       	add	r18, r18
    52a8:	33 1f       	adc	r19, r19
    52aa:	8b 81       	ldd	r24, Y+3	; 0x03
    52ac:	9c 81       	ldd	r25, Y+4	; 0x04
    52ae:	fc 01       	movw	r30, r24
    52b0:	e2 0f       	add	r30, r18
    52b2:	f3 1f       	adc	r31, r19
    52b4:	80 81       	ld	r24, Z
    52b6:	91 81       	ldd	r25, Z+1	; 0x01
    52b8:	48 17       	cp	r20, r24
    52ba:	59 07       	cpc	r21, r25
    52bc:	b0 f4       	brcc	.+44     	; 0x52ea <Max_V+0x98>
		{
			*u16_Max_Val = pu16_Arr[u16_index];
    52be:	89 81       	ldd	r24, Y+1	; 0x01
    52c0:	9a 81       	ldd	r25, Y+2	; 0x02
    52c2:	9c 01       	movw	r18, r24
    52c4:	22 0f       	add	r18, r18
    52c6:	33 1f       	adc	r19, r19
    52c8:	8b 81       	ldd	r24, Y+3	; 0x03
    52ca:	9c 81       	ldd	r25, Y+4	; 0x04
    52cc:	fc 01       	movw	r30, r24
    52ce:	e2 0f       	add	r30, r18
    52d0:	f3 1f       	adc	r31, r19
    52d2:	80 81       	ld	r24, Z
    52d4:	91 81       	ldd	r25, Z+1	; 0x01
    52d6:	ed 81       	ldd	r30, Y+5	; 0x05
    52d8:	fe 81       	ldd	r31, Y+6	; 0x06
    52da:	91 83       	std	Z+1, r25	; 0x01
    52dc:	80 83       	st	Z, r24
			*u16_Max_Loc = u16_index;
    52de:	ef 81       	ldd	r30, Y+7	; 0x07
    52e0:	f8 85       	ldd	r31, Y+8	; 0x08
    52e2:	89 81       	ldd	r24, Y+1	; 0x01
    52e4:	9a 81       	ldd	r25, Y+2	; 0x02
    52e6:	91 83       	std	Z+1, r25	; 0x01
    52e8:	80 83       	st	Z, r24
	uint16_t  u16_index = INITIAL;

	*u16_Max_Val = pu16_Arr[0U]; /* init. the u16_Max_Val with the first array value */
	*u16_Max_Loc = INITIAL; 	 /* init. the u16_Max_Loc with the first array index */

	for(u16_index = 1U; u16_index < NUM_SAMPLE; u16_index++)
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	9a 81       	ldd	r25, Y+2	; 0x02
    52ee:	01 96       	adiw	r24, 0x01	; 1
    52f0:	9a 83       	std	Y+2, r25	; 0x02
    52f2:	89 83       	std	Y+1, r24	; 0x01
    52f4:	89 81       	ldd	r24, Y+1	; 0x01
    52f6:	9a 81       	ldd	r25, Y+2	; 0x02
    52f8:	23 e0       	ldi	r18, 0x03	; 3
    52fa:	80 32       	cpi	r24, 0x20	; 32
    52fc:	92 07       	cpc	r25, r18
    52fe:	60 f2       	brcs	.-104    	; 0x5298 <Max_V+0x46>
		{
			*u16_Max_Val = pu16_Arr[u16_index];
			*u16_Max_Loc = u16_index;
		}
	}
}
    5300:	28 96       	adiw	r28, 0x08	; 8
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	f8 94       	cli
    5306:	de bf       	out	0x3e, r29	; 62
    5308:	0f be       	out	0x3f, r0	; 63
    530a:	cd bf       	out	0x3d, r28	; 61
    530c:	cf 91       	pop	r28
    530e:	df 91       	pop	r29
    5310:	08 95       	ret

00005312 <Min_V>:
/* param!  (o/p) pu16 that hold the Minimum volt                                        */
/* param!  (o/p) pu16 that hold the Minimum volt index                                  */
/* return! void                                                                        */
/***************************************************************************************/
static void Min_V(uint16_t *pu16_Arr, uint16_t *u16_Min_Val, uint16_t *u16_Min_Loc)
{
    5312:	df 93       	push	r29
    5314:	cf 93       	push	r28
    5316:	cd b7       	in	r28, 0x3d	; 61
    5318:	de b7       	in	r29, 0x3e	; 62
    531a:	28 97       	sbiw	r28, 0x08	; 8
    531c:	0f b6       	in	r0, 0x3f	; 63
    531e:	f8 94       	cli
    5320:	de bf       	out	0x3e, r29	; 62
    5322:	0f be       	out	0x3f, r0	; 63
    5324:	cd bf       	out	0x3d, r28	; 61
    5326:	9c 83       	std	Y+4, r25	; 0x04
    5328:	8b 83       	std	Y+3, r24	; 0x03
    532a:	7e 83       	std	Y+6, r23	; 0x06
    532c:	6d 83       	std	Y+5, r22	; 0x05
    532e:	58 87       	std	Y+8, r21	; 0x08
    5330:	4f 83       	std	Y+7, r20	; 0x07
	/* variable that hold array index */
	uint16_t  u16_index = INITIAL;
    5332:	1a 82       	std	Y+2, r1	; 0x02
    5334:	19 82       	std	Y+1, r1	; 0x01

	*u16_Min_Val = pu16_Arr[0U]; /* init. the u16_Min_Val with the first array value */
    5336:	eb 81       	ldd	r30, Y+3	; 0x03
    5338:	fc 81       	ldd	r31, Y+4	; 0x04
    533a:	80 81       	ld	r24, Z
    533c:	91 81       	ldd	r25, Z+1	; 0x01
    533e:	ed 81       	ldd	r30, Y+5	; 0x05
    5340:	fe 81       	ldd	r31, Y+6	; 0x06
    5342:	91 83       	std	Z+1, r25	; 0x01
    5344:	80 83       	st	Z, r24
	*u16_Min_Loc = INITIAL; 	 /* init. the u16_Min_Loc with the first array index */
    5346:	ef 81       	ldd	r30, Y+7	; 0x07
    5348:	f8 85       	ldd	r31, Y+8	; 0x08
    534a:	11 82       	std	Z+1, r1	; 0x01
    534c:	10 82       	st	Z, r1

	for (u16_index = 1U; u16_index < NUM_SAMPLE; u16_index++)
    534e:	81 e0       	ldi	r24, 0x01	; 1
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	9a 83       	std	Y+2, r25	; 0x02
    5354:	89 83       	std	Y+1, r24	; 0x01
    5356:	2e c0       	rjmp	.+92     	; 0x53b4 <Min_V+0xa2>
	{
		/* Compare the array element until we reach to Minimum Volt */
		if (*u16_Min_Val > pu16_Arr[u16_index])
    5358:	ed 81       	ldd	r30, Y+5	; 0x05
    535a:	fe 81       	ldd	r31, Y+6	; 0x06
    535c:	40 81       	ld	r20, Z
    535e:	51 81       	ldd	r21, Z+1	; 0x01
    5360:	89 81       	ldd	r24, Y+1	; 0x01
    5362:	9a 81       	ldd	r25, Y+2	; 0x02
    5364:	9c 01       	movw	r18, r24
    5366:	22 0f       	add	r18, r18
    5368:	33 1f       	adc	r19, r19
    536a:	8b 81       	ldd	r24, Y+3	; 0x03
    536c:	9c 81       	ldd	r25, Y+4	; 0x04
    536e:	fc 01       	movw	r30, r24
    5370:	e2 0f       	add	r30, r18
    5372:	f3 1f       	adc	r31, r19
    5374:	80 81       	ld	r24, Z
    5376:	91 81       	ldd	r25, Z+1	; 0x01
    5378:	84 17       	cp	r24, r20
    537a:	95 07       	cpc	r25, r21
    537c:	b0 f4       	brcc	.+44     	; 0x53aa <Min_V+0x98>
		{
			*u16_Min_Val = pu16_Arr[u16_index];
    537e:	89 81       	ldd	r24, Y+1	; 0x01
    5380:	9a 81       	ldd	r25, Y+2	; 0x02
    5382:	9c 01       	movw	r18, r24
    5384:	22 0f       	add	r18, r18
    5386:	33 1f       	adc	r19, r19
    5388:	8b 81       	ldd	r24, Y+3	; 0x03
    538a:	9c 81       	ldd	r25, Y+4	; 0x04
    538c:	fc 01       	movw	r30, r24
    538e:	e2 0f       	add	r30, r18
    5390:	f3 1f       	adc	r31, r19
    5392:	80 81       	ld	r24, Z
    5394:	91 81       	ldd	r25, Z+1	; 0x01
    5396:	ed 81       	ldd	r30, Y+5	; 0x05
    5398:	fe 81       	ldd	r31, Y+6	; 0x06
    539a:	91 83       	std	Z+1, r25	; 0x01
    539c:	80 83       	st	Z, r24
			*u16_Min_Loc = u16_index;
    539e:	ef 81       	ldd	r30, Y+7	; 0x07
    53a0:	f8 85       	ldd	r31, Y+8	; 0x08
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	9a 81       	ldd	r25, Y+2	; 0x02
    53a6:	91 83       	std	Z+1, r25	; 0x01
    53a8:	80 83       	st	Z, r24
	uint16_t  u16_index = INITIAL;

	*u16_Min_Val = pu16_Arr[0U]; /* init. the u16_Min_Val with the first array value */
	*u16_Min_Loc = INITIAL; 	 /* init. the u16_Min_Loc with the first array index */

	for (u16_index = 1U; u16_index < NUM_SAMPLE; u16_index++)
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	9a 81       	ldd	r25, Y+2	; 0x02
    53ae:	01 96       	adiw	r24, 0x01	; 1
    53b0:	9a 83       	std	Y+2, r25	; 0x02
    53b2:	89 83       	std	Y+1, r24	; 0x01
    53b4:	89 81       	ldd	r24, Y+1	; 0x01
    53b6:	9a 81       	ldd	r25, Y+2	; 0x02
    53b8:	23 e0       	ldi	r18, 0x03	; 3
    53ba:	80 32       	cpi	r24, 0x20	; 32
    53bc:	92 07       	cpc	r25, r18
    53be:	60 f2       	brcs	.-104    	; 0x5358 <Min_V+0x46>
		{
			*u16_Min_Val = pu16_Arr[u16_index];
			*u16_Min_Loc = u16_index;
		}
	}
}
    53c0:	28 96       	adiw	r28, 0x08	; 8
    53c2:	0f b6       	in	r0, 0x3f	; 63
    53c4:	f8 94       	cli
    53c6:	de bf       	out	0x3e, r29	; 62
    53c8:	0f be       	out	0x3f, r0	; 63
    53ca:	cd bf       	out	0x3d, r28	; 61
    53cc:	cf 91       	pop	r28
    53ce:	df 91       	pop	r29
    53d0:	08 95       	ret

000053d2 <Signal_Time>:
/* param!  (i/p) u16 that hold the signal Average volt                                 */
/* param!  (o/p) pointer to u32 that hold the signal Periodic Time                     */
/* return! void                                                                        */
/***************************************************************************************/
static void Signal_Time(uint16_t *pu16_Arr, uint16_t u16_Avg_V, uint32_t *pu32_PerTime)
{
    53d2:	df 93       	push	r29
    53d4:	cf 93       	push	r28
    53d6:	cd b7       	in	r28, 0x3d	; 61
    53d8:	de b7       	in	r29, 0x3e	; 62
    53da:	2d 97       	sbiw	r28, 0x0d	; 13
    53dc:	0f b6       	in	r0, 0x3f	; 63
    53de:	f8 94       	cli
    53e0:	de bf       	out	0x3e, r29	; 62
    53e2:	0f be       	out	0x3f, r0	; 63
    53e4:	cd bf       	out	0x3d, r28	; 61
    53e6:	99 87       	std	Y+9, r25	; 0x09
    53e8:	88 87       	std	Y+8, r24	; 0x08
    53ea:	7b 87       	std	Y+11, r23	; 0x0b
    53ec:	6a 87       	std	Y+10, r22	; 0x0a
    53ee:	5d 87       	std	Y+13, r21	; 0x0d
    53f0:	4c 87       	std	Y+12, r20	; 0x0c
	uint16_t u16_Snap_1 = INITIAL; /* variable that hold array index at the first snapshot */
    53f2:	1f 82       	std	Y+7, r1	; 0x07
    53f4:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_Snap_2 = INITIAL; /* variable that hold array index at the second snapshot  */
    53f6:	1d 82       	std	Y+5, r1	; 0x05
    53f8:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t u8_Snap_N = INITIAL;   /* variable that hold the snapshot state condition */
    53fa:	1b 82       	std	Y+3, r1	; 0x03

	/* variable that hold array index */
	uint16_t u16_index = INITIAL ;
    53fc:	1a 82       	std	Y+2, r1	; 0x02
    53fe:	19 82       	std	Y+1, r1	; 0x01

	for(u16_index = INITIAL; u16_index < NUM_SAMPLE; u16_index++)
    5400:	1a 82       	std	Y+2, r1	; 0x02
    5402:	19 82       	std	Y+1, r1	; 0x01
    5404:	53 c0       	rjmp	.+166    	; 0x54ac <Signal_Time+0xda>
	{
		if((pu16_Arr[u16_index] < u16_Avg_V) && (pu16_Arr[u16_index +1U] > u16_Avg_V))
    5406:	89 81       	ldd	r24, Y+1	; 0x01
    5408:	9a 81       	ldd	r25, Y+2	; 0x02
    540a:	9c 01       	movw	r18, r24
    540c:	22 0f       	add	r18, r18
    540e:	33 1f       	adc	r19, r19
    5410:	88 85       	ldd	r24, Y+8	; 0x08
    5412:	99 85       	ldd	r25, Y+9	; 0x09
    5414:	fc 01       	movw	r30, r24
    5416:	e2 0f       	add	r30, r18
    5418:	f3 1f       	adc	r31, r19
    541a:	20 81       	ld	r18, Z
    541c:	31 81       	ldd	r19, Z+1	; 0x01
    541e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5420:	9b 85       	ldd	r25, Y+11	; 0x0b
    5422:	28 17       	cp	r18, r24
    5424:	39 07       	cpc	r19, r25
    5426:	b8 f5       	brcc	.+110    	; 0x5496 <Signal_Time+0xc4>
    5428:	89 81       	ldd	r24, Y+1	; 0x01
    542a:	9a 81       	ldd	r25, Y+2	; 0x02
    542c:	01 96       	adiw	r24, 0x01	; 1
    542e:	9c 01       	movw	r18, r24
    5430:	22 0f       	add	r18, r18
    5432:	33 1f       	adc	r19, r19
    5434:	88 85       	ldd	r24, Y+8	; 0x08
    5436:	99 85       	ldd	r25, Y+9	; 0x09
    5438:	fc 01       	movw	r30, r24
    543a:	e2 0f       	add	r30, r18
    543c:	f3 1f       	adc	r31, r19
    543e:	20 81       	ld	r18, Z
    5440:	31 81       	ldd	r19, Z+1	; 0x01
    5442:	8a 85       	ldd	r24, Y+10	; 0x0a
    5444:	9b 85       	ldd	r25, Y+11	; 0x0b
    5446:	82 17       	cp	r24, r18
    5448:	93 07       	cpc	r25, r19
    544a:	28 f5       	brcc	.+74     	; 0x5496 <Signal_Time+0xc4>
		{
			if(INITIAL == u8_Snap_N)
    544c:	8b 81       	ldd	r24, Y+3	; 0x03
    544e:	88 23       	and	r24, r24
    5450:	39 f4       	brne	.+14     	; 0x5460 <Signal_Time+0x8e>
			{
				u16_Snap_1 = u16_index ;
    5452:	89 81       	ldd	r24, Y+1	; 0x01
    5454:	9a 81       	ldd	r25, Y+2	; 0x02
    5456:	9f 83       	std	Y+7, r25	; 0x07
    5458:	8e 83       	std	Y+6, r24	; 0x06
				u8_Snap_N = 1U;
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	8b 83       	std	Y+3, r24	; 0x03
    545e:	21 c0       	rjmp	.+66     	; 0x54a2 <Signal_Time+0xd0>
			}
			else
			{
				u16_Snap_2 = u16_index ;
    5460:	89 81       	ldd	r24, Y+1	; 0x01
    5462:	9a 81       	ldd	r25, Y+2	; 0x02
    5464:	9d 83       	std	Y+5, r25	; 0x05
    5466:	8c 83       	std	Y+4, r24	; 0x04
				u8_Snap_N = INITIAL;
    5468:	1b 82       	std	Y+3, r1	; 0x03

				*pu32_PerTime = (uint32_t)(u16_Snap_2 - u16_Snap_1) / SAMPLING_TIME;
    546a:	2c 81       	ldd	r18, Y+4	; 0x04
    546c:	3d 81       	ldd	r19, Y+5	; 0x05
    546e:	8e 81       	ldd	r24, Y+6	; 0x06
    5470:	9f 81       	ldd	r25, Y+7	; 0x07
    5472:	a9 01       	movw	r20, r18
    5474:	48 1b       	sub	r20, r24
    5476:	59 0b       	sbc	r21, r25
    5478:	ca 01       	movw	r24, r20
    547a:	96 95       	lsr	r25
    547c:	87 95       	ror	r24
    547e:	96 95       	lsr	r25
    5480:	87 95       	ror	r24
    5482:	cc 01       	movw	r24, r24
    5484:	a0 e0       	ldi	r26, 0x00	; 0
    5486:	b0 e0       	ldi	r27, 0x00	; 0
    5488:	ec 85       	ldd	r30, Y+12	; 0x0c
    548a:	fd 85       	ldd	r31, Y+13	; 0x0d
    548c:	80 83       	st	Z, r24
    548e:	91 83       	std	Z+1, r25	; 0x01
    5490:	a2 83       	std	Z+2, r26	; 0x02
    5492:	b3 83       	std	Z+3, r27	; 0x03
    5494:	12 c0       	rjmp	.+36     	; 0x54ba <Signal_Time+0xe8>
				break;
			}
		}
		else
		{
			*pu32_PerTime = INITIAL;
    5496:	ec 85       	ldd	r30, Y+12	; 0x0c
    5498:	fd 85       	ldd	r31, Y+13	; 0x0d
    549a:	10 82       	st	Z, r1
    549c:	11 82       	std	Z+1, r1	; 0x01
    549e:	12 82       	std	Z+2, r1	; 0x02
    54a0:	13 82       	std	Z+3, r1	; 0x03
	uint8_t u8_Snap_N = INITIAL;   /* variable that hold the snapshot state condition */

	/* variable that hold array index */
	uint16_t u16_index = INITIAL ;

	for(u16_index = INITIAL; u16_index < NUM_SAMPLE; u16_index++)
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	9a 81       	ldd	r25, Y+2	; 0x02
    54a6:	01 96       	adiw	r24, 0x01	; 1
    54a8:	9a 83       	std	Y+2, r25	; 0x02
    54aa:	89 83       	std	Y+1, r24	; 0x01
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	9a 81       	ldd	r25, Y+2	; 0x02
    54b0:	53 e0       	ldi	r21, 0x03	; 3
    54b2:	80 32       	cpi	r24, 0x20	; 32
    54b4:	95 07       	cpc	r25, r21
    54b6:	08 f4       	brcc	.+2      	; 0x54ba <Signal_Time+0xe8>
    54b8:	a6 cf       	rjmp	.-180    	; 0x5406 <Signal_Time+0x34>
		else
		{
			*pu32_PerTime = INITIAL;
		}
	}
}
    54ba:	2d 96       	adiw	r28, 0x0d	; 13
    54bc:	0f b6       	in	r0, 0x3f	; 63
    54be:	f8 94       	cli
    54c0:	de bf       	out	0x3e, r29	; 62
    54c2:	0f be       	out	0x3f, r0	; 63
    54c4:	cd bf       	out	0x3d, r28	; 61
    54c6:	cf 91       	pop	r28
    54c8:	df 91       	pop	r29
    54ca:	08 95       	ret

000054cc <ReScale>:
/* param!  (i/p) s32 that hold the Minimum value output			                       */
/* param!  (i/p) s32 that hold the Maximum value output			                       */
/* return! (i/p) s32 that hold the output value                                        */
/***************************************************************************************/
static sint32_t ReScale(sint32_t value, sint32_t in_min, sint32_t in_max, sint32_t out_min, sint32_t out_max)
{
    54cc:	af 92       	push	r10
    54ce:	bf 92       	push	r11
    54d0:	cf 92       	push	r12
    54d2:	df 92       	push	r13
    54d4:	ef 92       	push	r14
    54d6:	ff 92       	push	r15
    54d8:	0f 93       	push	r16
    54da:	1f 93       	push	r17
    54dc:	df 93       	push	r29
    54de:	cf 93       	push	r28
    54e0:	cd b7       	in	r28, 0x3d	; 61
    54e2:	de b7       	in	r29, 0x3e	; 62
    54e4:	60 97       	sbiw	r28, 0x10	; 16
    54e6:	0f b6       	in	r0, 0x3f	; 63
    54e8:	f8 94       	cli
    54ea:	de bf       	out	0x3e, r29	; 62
    54ec:	0f be       	out	0x3f, r0	; 63
    54ee:	cd bf       	out	0x3d, r28	; 61
    54f0:	69 83       	std	Y+1, r22	; 0x01
    54f2:	7a 83       	std	Y+2, r23	; 0x02
    54f4:	8b 83       	std	Y+3, r24	; 0x03
    54f6:	9c 83       	std	Y+4, r25	; 0x04
    54f8:	2d 83       	std	Y+5, r18	; 0x05
    54fa:	3e 83       	std	Y+6, r19	; 0x06
    54fc:	4f 83       	std	Y+7, r20	; 0x07
    54fe:	58 87       	std	Y+8, r21	; 0x08
    5500:	e9 86       	std	Y+9, r14	; 0x09
    5502:	fa 86       	std	Y+10, r15	; 0x0a
    5504:	0b 87       	std	Y+11, r16	; 0x0b
    5506:	1c 87       	std	Y+12, r17	; 0x0c
    5508:	ad 86       	std	Y+13, r10	; 0x0d
    550a:	be 86       	std	Y+14, r11	; 0x0e
    550c:	cf 86       	std	Y+15, r12	; 0x0f
    550e:	d8 8a       	std	Y+16, r13	; 0x10
	return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5510:	29 81       	ldd	r18, Y+1	; 0x01
    5512:	3a 81       	ldd	r19, Y+2	; 0x02
    5514:	4b 81       	ldd	r20, Y+3	; 0x03
    5516:	5c 81       	ldd	r21, Y+4	; 0x04
    5518:	8d 81       	ldd	r24, Y+5	; 0x05
    551a:	9e 81       	ldd	r25, Y+6	; 0x06
    551c:	af 81       	ldd	r26, Y+7	; 0x07
    551e:	b8 85       	ldd	r27, Y+8	; 0x08
    5520:	79 01       	movw	r14, r18
    5522:	8a 01       	movw	r16, r20
    5524:	e8 1a       	sub	r14, r24
    5526:	f9 0a       	sbc	r15, r25
    5528:	0a 0b       	sbc	r16, r26
    552a:	1b 0b       	sbc	r17, r27
    552c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    552e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5530:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5532:	58 a1       	ldd	r21, Y+32	; 0x20
    5534:	8d 85       	ldd	r24, Y+13	; 0x0d
    5536:	9e 85       	ldd	r25, Y+14	; 0x0e
    5538:	af 85       	ldd	r26, Y+15	; 0x0f
    553a:	b8 89       	ldd	r27, Y+16	; 0x10
    553c:	28 1b       	sub	r18, r24
    553e:	39 0b       	sbc	r19, r25
    5540:	4a 0b       	sbc	r20, r26
    5542:	5b 0b       	sbc	r21, r27
    5544:	c8 01       	movw	r24, r16
    5546:	b7 01       	movw	r22, r14
    5548:	0e 94 18 30 	call	0x6030	; 0x6030 <__mulsi3>
    554c:	7b 01       	movw	r14, r22
    554e:	8c 01       	movw	r16, r24
    5550:	29 85       	ldd	r18, Y+9	; 0x09
    5552:	3a 85       	ldd	r19, Y+10	; 0x0a
    5554:	4b 85       	ldd	r20, Y+11	; 0x0b
    5556:	5c 85       	ldd	r21, Y+12	; 0x0c
    5558:	8d 81       	ldd	r24, Y+5	; 0x05
    555a:	9e 81       	ldd	r25, Y+6	; 0x06
    555c:	af 81       	ldd	r26, Y+7	; 0x07
    555e:	b8 85       	ldd	r27, Y+8	; 0x08
    5560:	28 1b       	sub	r18, r24
    5562:	39 0b       	sbc	r19, r25
    5564:	4a 0b       	sbc	r20, r26
    5566:	5b 0b       	sbc	r21, r27
    5568:	c8 01       	movw	r24, r16
    556a:	b7 01       	movw	r22, r14
    556c:	0e 94 59 30 	call	0x60b2	; 0x60b2 <__divmodsi4>
    5570:	da 01       	movw	r26, r20
    5572:	c9 01       	movw	r24, r18
    5574:	9c 01       	movw	r18, r24
    5576:	ad 01       	movw	r20, r26
    5578:	8d 85       	ldd	r24, Y+13	; 0x0d
    557a:	9e 85       	ldd	r25, Y+14	; 0x0e
    557c:	af 85       	ldd	r26, Y+15	; 0x0f
    557e:	b8 89       	ldd	r27, Y+16	; 0x10
    5580:	82 0f       	add	r24, r18
    5582:	93 1f       	adc	r25, r19
    5584:	a4 1f       	adc	r26, r20
    5586:	b5 1f       	adc	r27, r21
}
    5588:	bc 01       	movw	r22, r24
    558a:	cd 01       	movw	r24, r26
    558c:	60 96       	adiw	r28, 0x10	; 16
    558e:	0f b6       	in	r0, 0x3f	; 63
    5590:	f8 94       	cli
    5592:	de bf       	out	0x3e, r29	; 62
    5594:	0f be       	out	0x3f, r0	; 63
    5596:	cd bf       	out	0x3d, r28	; 61
    5598:	cf 91       	pop	r28
    559a:	df 91       	pop	r29
    559c:	1f 91       	pop	r17
    559e:	0f 91       	pop	r16
    55a0:	ff 90       	pop	r15
    55a2:	ef 90       	pop	r14
    55a4:	df 90       	pop	r13
    55a6:	cf 90       	pop	r12
    55a8:	bf 90       	pop	r11
    55aa:	af 90       	pop	r10
    55ac:	08 95       	ret

000055ae <Osc_Display_Grid>:
/* brief!  static function that print Grid on the Screen 					           */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
static void Osc_Display_Grid(void)
{
    55ae:	0f 93       	push	r16
    55b0:	1f 93       	push	r17
    55b2:	df 93       	push	r29
    55b4:	cf 93       	push	r28
    55b6:	00 d0       	rcall	.+0      	; 0x55b8 <Osc_Display_Grid+0xa>
    55b8:	00 d0       	rcall	.+0      	; 0x55ba <Osc_Display_Grid+0xc>
    55ba:	cd b7       	in	r28, 0x3d	; 61
    55bc:	de b7       	in	r29, 0x3e	; 62
	uint16_t u16_Row = INITIAL; 	/* variable that hold Horizontal cursor position "X-Axis" */
    55be:	1c 82       	std	Y+4, r1	; 0x04
    55c0:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_Col = INITIAL; 	/* variable that hold Vertical cursor position "Y-Axis" */
    55c2:	1a 82       	std	Y+2, r1	; 0x02
    55c4:	19 82       	std	Y+1, r1	; 0x01

	/* Fill the Grid Rectangular with BLAK at the first */
	TFT_Fill_Rect(17U, 49U, 363U, 222U, ILI9486_BLACK);
    55c6:	81 e1       	ldi	r24, 0x11	; 17
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	61 e3       	ldi	r22, 0x31	; 49
    55cc:	70 e0       	ldi	r23, 0x00	; 0
    55ce:	4b e6       	ldi	r20, 0x6B	; 107
    55d0:	51 e0       	ldi	r21, 0x01	; 1
    55d2:	2e ed       	ldi	r18, 0xDE	; 222
    55d4:	30 e0       	ldi	r19, 0x00	; 0
    55d6:	00 e0       	ldi	r16, 0x00	; 0
    55d8:	10 e0       	ldi	r17, 0x00	; 0
    55da:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>

	/* Draw the Horizontal Lines */
	for(u16_Row = 60; u16_Row <= 260; u16_Row += 20)
    55de:	8c e3       	ldi	r24, 0x3C	; 60
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	9c 83       	std	Y+4, r25	; 0x04
    55e4:	8b 83       	std	Y+3, r24	; 0x03
    55e6:	10 c0       	rjmp	.+32     	; 0x5608 <Osc_Display_Grid+0x5a>
	{
		TFT_Draw_HLine(17, u16_Row, 363, ILI9486_OLIVE);
    55e8:	2b 81       	ldd	r18, Y+3	; 0x03
    55ea:	3c 81       	ldd	r19, Y+4	; 0x04
    55ec:	81 e1       	ldi	r24, 0x11	; 17
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	b9 01       	movw	r22, r18
    55f2:	4b e6       	ldi	r20, 0x6B	; 107
    55f4:	51 e0       	ldi	r21, 0x01	; 1
    55f6:	20 ee       	ldi	r18, 0xE0	; 224
    55f8:	3b e7       	ldi	r19, 0x7B	; 123
    55fa:	0e 94 bd 21 	call	0x437a	; 0x437a <TFT_Draw_HLine>

	/* Fill the Grid Rectangular with BLAK at the first */
	TFT_Fill_Rect(17U, 49U, 363U, 222U, ILI9486_BLACK);

	/* Draw the Horizontal Lines */
	for(u16_Row = 60; u16_Row <= 260; u16_Row += 20)
    55fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5600:	9c 81       	ldd	r25, Y+4	; 0x04
    5602:	44 96       	adiw	r24, 0x14	; 20
    5604:	9c 83       	std	Y+4, r25	; 0x04
    5606:	8b 83       	std	Y+3, r24	; 0x03
    5608:	8b 81       	ldd	r24, Y+3	; 0x03
    560a:	9c 81       	ldd	r25, Y+4	; 0x04
    560c:	21 e0       	ldi	r18, 0x01	; 1
    560e:	85 30       	cpi	r24, 0x05	; 5
    5610:	92 07       	cpc	r25, r18
    5612:	50 f3       	brcs	.-44     	; 0x55e8 <Osc_Display_Grid+0x3a>
	{
		TFT_Draw_HLine(17, u16_Row, 363, ILI9486_OLIVE);
	}

	/* Draw the Vertical Lines */
	for(u16_Col = 20; u16_Col <= 360; u16_Col += 20)
    5614:	84 e1       	ldi	r24, 0x14	; 20
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	9a 83       	std	Y+2, r25	; 0x02
    561a:	89 83       	std	Y+1, r24	; 0x01
    561c:	0f c0       	rjmp	.+30     	; 0x563c <Osc_Display_Grid+0x8e>
	{
		TFT_Draw_VLine(u16_Col, 49, 223, ILI9486_OLIVE);
    561e:	89 81       	ldd	r24, Y+1	; 0x01
    5620:	9a 81       	ldd	r25, Y+2	; 0x02
    5622:	61 e3       	ldi	r22, 0x31	; 49
    5624:	70 e0       	ldi	r23, 0x00	; 0
    5626:	4f ed       	ldi	r20, 0xDF	; 223
    5628:	50 e0       	ldi	r21, 0x00	; 0
    562a:	20 ee       	ldi	r18, 0xE0	; 224
    562c:	3b e7       	ldi	r19, 0x7B	; 123
    562e:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>
	{
		TFT_Draw_HLine(17, u16_Row, 363, ILI9486_OLIVE);
	}

	/* Draw the Vertical Lines */
	for(u16_Col = 20; u16_Col <= 360; u16_Col += 20)
    5632:	89 81       	ldd	r24, Y+1	; 0x01
    5634:	9a 81       	ldd	r25, Y+2	; 0x02
    5636:	44 96       	adiw	r24, 0x14	; 20
    5638:	9a 83       	std	Y+2, r25	; 0x02
    563a:	89 83       	std	Y+1, r24	; 0x01
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	9a 81       	ldd	r25, Y+2	; 0x02
    5640:	21 e0       	ldi	r18, 0x01	; 1
    5642:	89 36       	cpi	r24, 0x69	; 105
    5644:	92 07       	cpc	r25, r18
    5646:	58 f3       	brcs	.-42     	; 0x561e <Osc_Display_Grid+0x70>
	{
		TFT_Draw_VLine(u16_Col, 49, 223, ILI9486_OLIVE);
	}
}
    5648:	0f 90       	pop	r0
    564a:	0f 90       	pop	r0
    564c:	0f 90       	pop	r0
    564e:	0f 90       	pop	r0
    5650:	cf 91       	pop	r28
    5652:	df 91       	pop	r29
    5654:	1f 91       	pop	r17
    5656:	0f 91       	pop	r16
    5658:	08 95       	ret

0000565a <Osc_Display_Init>:
/* brief!  Function that Initialize the Oscilloscope display and the hardware he needed*/
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Osc_Display_Init(void)
{
    565a:	df 93       	push	r29
    565c:	cf 93       	push	r28
    565e:	cd b7       	in	r28, 0x3d	; 61
    5660:	de b7       	in	r29, 0x3e	; 62

	ADC_Init(&ADC_Config); 			/* Initialize ADC Module */
    5662:	8a eb       	ldi	r24, 0xBA	; 186
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	0e 94 ab 12 	call	0x2556	; 0x2556 <ADC_Init>
	ADC_SetCallBack(ADC_CallBack);  /* Set ADC function that will run inside ADC the ISR if we choice the ADC INTERRUPT Mode */
    566a:	85 ef       	ldi	r24, 0xF5	; 245
    566c:	98 e2       	ldi	r25, 0x28	; 40
    566e:	0e 94 c5 14 	call	0x298a	; 0x298a <ADC_SetCallBack>

	TFT_Init(); 					/* Initialize TFT screen */
    5672:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <TFT_Init>


	TFT_Fill_Screen(ILI9486_BLACK); /* FILL SCREEN WITH BLACK */
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	0e 94 3c 21 	call	0x4278	; 0x4278 <TFT_Fill_Screen>

	/* Draw some green Lines "Screen Main Lines" */
	TFT_Draw_HLine(INITIAL, 48, 380, ILI9486_GREEN);
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	60 e3       	ldi	r22, 0x30	; 48
    5684:	70 e0       	ldi	r23, 0x00	; 0
    5686:	4c e7       	ldi	r20, 0x7C	; 124
    5688:	51 e0       	ldi	r21, 0x01	; 1
    568a:	20 ee       	ldi	r18, 0xE0	; 224
    568c:	37 e0       	ldi	r19, 0x07	; 7
    568e:	0e 94 bd 21 	call	0x437a	; 0x437a <TFT_Draw_HLine>
	TFT_Draw_HLine(INITIAL, 272, 380, ILI9486_GREEN);
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	60 e1       	ldi	r22, 0x10	; 16
    5698:	71 e0       	ldi	r23, 0x01	; 1
    569a:	4c e7       	ldi	r20, 0x7C	; 124
    569c:	51 e0       	ldi	r21, 0x01	; 1
    569e:	20 ee       	ldi	r18, 0xE0	; 224
    56a0:	37 e0       	ldi	r19, 0x07	; 7
    56a2:	0e 94 bd 21 	call	0x437a	; 0x437a <TFT_Draw_HLine>
	TFT_Draw_VLine(380, INITIAL, 320, ILI9486_GREEN);
    56a6:	8c e7       	ldi	r24, 0x7C	; 124
    56a8:	91 e0       	ldi	r25, 0x01	; 1
    56aa:	60 e0       	ldi	r22, 0x00	; 0
    56ac:	70 e0       	ldi	r23, 0x00	; 0
    56ae:	40 e4       	ldi	r20, 0x40	; 64
    56b0:	51 e0       	ldi	r21, 0x01	; 1
    56b2:	20 ee       	ldi	r18, 0xE0	; 224
    56b4:	37 e0       	ldi	r19, 0x07	; 7
    56b6:	0e 94 5f 21 	call	0x42be	; 0x42be <TFT_Draw_VLine>

	/* Display the string "Oscilloscope" the name on our project*/
	TFT_SetCursor(75U, 8U);
    56ba:	8b e4       	ldi	r24, 0x4B	; 75
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	68 e0       	ldi	r22, 0x08	; 8
    56c0:	70 e0       	ldi	r23, 0x00	; 0
    56c2:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_GREENYELLOW,ILI9486_BLACK);
    56c6:	85 ee       	ldi	r24, 0xE5	; 229
    56c8:	9f ea       	ldi	r25, 0xAF	; 175
    56ca:	60 e0       	ldi	r22, 0x00	; 0
    56cc:	70 e0       	ldi	r23, 0x00	; 0
    56ce:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"Oscilloscope CH_", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    56d2:	80 e6       	ldi	r24, 0x60	; 96
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	61 e0       	ldi	r22, 0x01	; 1
    56d8:	41 e0       	ldi	r20, 0x01	; 1
    56da:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display the string "TimDiv" */
	TFT_SetCursor(388, 2);
    56de:	84 e8       	ldi	r24, 0x84	; 132
    56e0:	91 e0       	ldi	r25, 0x01	; 1
    56e2:	62 e0       	ldi	r22, 0x02	; 2
    56e4:	70 e0       	ldi	r23, 0x00	; 0
    56e6:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_GREEN,ILI9486_BLACK);
    56ea:	80 ee       	ldi	r24, 0xE0	; 224
    56ec:	97 e0       	ldi	r25, 0x07	; 7
    56ee:	60 e0       	ldi	r22, 0x00	; 0
    56f0:	70 e0       	ldi	r23, 0x00	; 0
    56f2:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"TimDiv", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    56f6:	81 e7       	ldi	r24, 0x71	; 113
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	61 e0       	ldi	r22, 0x01	; 1
    56fc:	41 e0       	ldi	r20, 0x01	; 1
    56fe:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display the string "Freq =" */
	TFT_SetCursor(2, 285);
    5702:	82 e0       	ldi	r24, 0x02	; 2
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	6d e1       	ldi	r22, 0x1D	; 29
    5708:	71 e0       	ldi	r23, 0x01	; 1
    570a:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_GREEN, ILI9486_BLACK);
    570e:	80 ee       	ldi	r24, 0xE0	; 224
    5710:	97 e0       	ldi	r25, 0x07	; 7
    5712:	60 e0       	ldi	r22, 0x00	; 0
    5714:	70 e0       	ldi	r23, 0x00	; 0
    5716:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"Freq =", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    571a:	88 e7       	ldi	r24, 0x78	; 120
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	61 e0       	ldi	r22, 0x01	; 1
    5720:	41 e0       	ldi	r20, 0x01	; 1
    5722:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display the string "T =" */
	TFT_SetCursor(195, 285);
    5726:	83 ec       	ldi	r24, 0xC3	; 195
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	6d e1       	ldi	r22, 0x1D	; 29
    572c:	71 e0       	ldi	r23, 0x01	; 1
    572e:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_GREEN, ILI9486_BLACK);
    5732:	80 ee       	ldi	r24, 0xE0	; 224
    5734:	97 e0       	ldi	r25, 0x07	; 7
    5736:	60 e0       	ldi	r22, 0x00	; 0
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"T =", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    573e:	8f e7       	ldi	r24, 0x7F	; 127
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	61 e0       	ldi	r22, 0x01	; 1
    5744:	41 e0       	ldi	r20, 0x01	; 1
    5746:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display the string "Avg_V" */
	TFT_SetCursor(388, 85);
    574a:	84 e8       	ldi	r24, 0x84	; 132
    574c:	91 e0       	ldi	r25, 0x01	; 1
    574e:	65 e5       	ldi	r22, 0x55	; 85
    5750:	70 e0       	ldi	r23, 0x00	; 0
    5752:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_GREEN, ILI9486_BLACK);
    5756:	80 ee       	ldi	r24, 0xE0	; 224
    5758:	97 e0       	ldi	r25, 0x07	; 7
    575a:	60 e0       	ldi	r22, 0x00	; 0
    575c:	70 e0       	ldi	r23, 0x00	; 0
    575e:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"Avg_V", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5762:	83 e8       	ldi	r24, 0x83	; 131
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	61 e0       	ldi	r22, 0x01	; 1
    5768:	41 e0       	ldi	r20, 0x01	; 1
    576a:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display the string "Max_V" */
	TFT_SetCursor(388, 165);
    576e:	84 e8       	ldi	r24, 0x84	; 132
    5770:	91 e0       	ldi	r25, 0x01	; 1
    5772:	65 ea       	ldi	r22, 0xA5	; 165
    5774:	70 e0       	ldi	r23, 0x00	; 0
    5776:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_GREEN, ILI9486_BLACK);
    577a:	80 ee       	ldi	r24, 0xE0	; 224
    577c:	97 e0       	ldi	r25, 0x07	; 7
    577e:	60 e0       	ldi	r22, 0x00	; 0
    5780:	70 e0       	ldi	r23, 0x00	; 0
    5782:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"Max_V", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5786:	89 e8       	ldi	r24, 0x89	; 137
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	61 e0       	ldi	r22, 0x01	; 1
    578c:	41 e0       	ldi	r20, 0x01	; 1
    578e:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display the string "Max_V" */
	TFT_SetCursor(388, 245);
    5792:	84 e8       	ldi	r24, 0x84	; 132
    5794:	91 e0       	ldi	r25, 0x01	; 1
    5796:	65 ef       	ldi	r22, 0xF5	; 245
    5798:	70 e0       	ldi	r23, 0x00	; 0
    579a:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_GREEN, ILI9486_BLACK);
    579e:	80 ee       	ldi	r24, 0xE0	; 224
    57a0:	97 e0       	ldi	r25, 0x07	; 7
    57a2:	60 e0       	ldi	r22, 0x00	; 0
    57a4:	70 e0       	ldi	r23, 0x00	; 0
    57a6:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"Min_V", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    57aa:	8f e8       	ldi	r24, 0x8F	; 143
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	61 e0       	ldi	r22, 0x01	; 1
    57b0:	41 e0       	ldi	r20, 0x01	; 1
    57b2:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Write and display the scale of the Signal Amplitude  */
	TFT_SetCursor(INITIAL, 250);
    57b6:	80 e0       	ldi	r24, 0x00	; 0
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	6a ef       	ldi	r22, 0xFA	; 250
    57bc:	70 e0       	ldi	r23, 0x00	; 0
    57be:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_SetTextColor(ILI9486_RED, ILI9486_BLACK);
    57c2:	80 e0       	ldi	r24, 0x00	; 0
    57c4:	98 ef       	ldi	r25, 0xF8	; 248
    57c6:	60 e0       	ldi	r22, 0x00	; 0
    57c8:	70 e0       	ldi	r23, 0x00	; 0
    57ca:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"0", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    57ce:	85 e9       	ldi	r24, 0x95	; 149
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	61 e0       	ldi	r22, 0x01	; 1
    57d4:	41 e0       	ldi	r20, 0x01	; 1
    57d6:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	TFT_SetCursor(INITIAL, 210);
    57da:	80 e0       	ldi	r24, 0x00	; 0
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	62 ed       	ldi	r22, 0xD2	; 210
    57e0:	70 e0       	ldi	r23, 0x00	; 0
    57e2:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Print_String((uint8_t *)"1", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    57e6:	87 e9       	ldi	r24, 0x97	; 151
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	61 e0       	ldi	r22, 0x01	; 1
    57ec:	41 e0       	ldi	r20, 0x01	; 1
    57ee:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	TFT_SetCursor(INITIAL, 170);
    57f2:	80 e0       	ldi	r24, 0x00	; 0
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	6a ea       	ldi	r22, 0xAA	; 170
    57f8:	70 e0       	ldi	r23, 0x00	; 0
    57fa:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Print_String((uint8_t *)"2", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    57fe:	89 e9       	ldi	r24, 0x99	; 153
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	61 e0       	ldi	r22, 0x01	; 1
    5804:	41 e0       	ldi	r20, 0x01	; 1
    5806:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	TFT_SetCursor(INITIAL, 130);
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	62 e8       	ldi	r22, 0x82	; 130
    5810:	70 e0       	ldi	r23, 0x00	; 0
    5812:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Print_String((uint8_t *)"3", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5816:	8b e9       	ldi	r24, 0x9B	; 155
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	61 e0       	ldi	r22, 0x01	; 1
    581c:	41 e0       	ldi	r20, 0x01	; 1
    581e:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	TFT_SetCursor(INITIAL, 90);
    5822:	80 e0       	ldi	r24, 0x00	; 0
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	6a e5       	ldi	r22, 0x5A	; 90
    5828:	70 e0       	ldi	r23, 0x00	; 0
    582a:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Print_String((uint8_t *)"4", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    582e:	8d e9       	ldi	r24, 0x9D	; 157
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	61 e0       	ldi	r22, 0x01	; 1
    5834:	41 e0       	ldi	r20, 0x01	; 1
    5836:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	TFT_SetCursor(INITIAL, 50);
    583a:	80 e0       	ldi	r24, 0x00	; 0
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	62 e3       	ldi	r22, 0x32	; 50
    5840:	70 e0       	ldi	r23, 0x00	; 0
    5842:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Print_String((uint8_t *)"5", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5846:	8f e9       	ldi	r24, 0x9F	; 159
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	61 e0       	ldi	r22, 0x01	; 1
    584c:	41 e0       	ldi	r20, 0x01	; 1
    584e:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display Oscilloscope Grid */
	Osc_Display_Grid();
    5852:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <Osc_Display_Grid>
}
    5856:	cf 91       	pop	r28
    5858:	df 91       	pop	r29
    585a:	08 95       	ret

0000585c <Osc_Main>:
/* brief!  Function that have the Oscilloscope Scenario to Work						   */
/* param!  (i/p) u8 that used to choice which signal we will sample and display        */
/* return! void                                                                        */
/***************************************************************************************/
void Osc_Main(void)
{
    585c:	8f 92       	push	r8
    585e:	9f 92       	push	r9
    5860:	af 92       	push	r10
    5862:	bf 92       	push	r11
    5864:	cf 92       	push	r12
    5866:	df 92       	push	r13
    5868:	ef 92       	push	r14
    586a:	ff 92       	push	r15
    586c:	0f 93       	push	r16
    586e:	1f 93       	push	r17
    5870:	df 93       	push	r29
    5872:	cf 93       	push	r28
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	a4 97       	sbiw	r28, 0x24	; 36
    587a:	0f b6       	in	r0, 0x3f	; 63
    587c:	f8 94       	cli
    587e:	de bf       	out	0x3e, r29	; 62
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	cd bf       	out	0x3d, r28	; 61
	uint16_t u16_Channel_Num = SIGNAL_CH0;	/* variable that will hold the Chosen Channel Number */
    5884:	1e 8a       	std	Y+22, r1	; 0x16
    5886:	1d 8a       	std	Y+21, r1	; 0x15

	uint16_t u16_Max_V = INITIAL;    /* variable that will hold the Maximum Signal Volt value */
    5888:	18 8e       	std	Y+24, r1	; 0x18
    588a:	1f 8a       	std	Y+23, r1	; 0x17
	uint16_t u16_Min_V = INITIAL;    /* variable that will hold the Minimum Signal Volt value */
    588c:	1a 8e       	std	Y+26, r1	; 0x1a
    588e:	19 8e       	std	Y+25, r1	; 0x19
	uint16_t u16_Avg_V = INITIAL;	 /* variable that will hold the Average Signal Volt value */
    5890:	1c 8a       	std	Y+20, r1	; 0x14
    5892:	1b 8a       	std	Y+19, r1	; 0x13
	uint16_t u16_Index = INITIAL;    /* variable that will hold the Array Index */
    5894:	1a 8a       	std	Y+18, r1	; 0x12
    5896:	19 8a       	std	Y+17, r1	; 0x11
	uint16_t u16_TimeDiv = 1U;		 /* variable that will hold the Time Division value */
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	9c 8f       	std	Y+28, r25	; 0x1c
    589e:	8b 8f       	std	Y+27, r24	; 0x1b

	uint16_t u16_X = INITIAL; 		/* variable that will hold the Cursor X-Axis Position */
    58a0:	18 8a       	std	Y+16, r1	; 0x10
    58a2:	1f 86       	std	Y+15, r1	; 0x0f
	uint32_t u32_PerTime = INITIAL; /* variable that will hold the Signal Periodic Time */
    58a4:	1d 8e       	std	Y+29, r1	; 0x1d
    58a6:	1e 8e       	std	Y+30, r1	; 0x1e
    58a8:	1f 8e       	std	Y+31, r1	; 0x1f
    58aa:	18 a2       	std	Y+32, r1	; 0x20

	uint16_t u16_Max_V_Loc = INITIAL; /* variable that will hold the Maximum volt Index "for future use" */
    58ac:	1a a2       	std	Y+34, r1	; 0x22
    58ae:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t u16_Min_V_Loc = INITIAL; /* variable that will hold the Minimum volt Index "for future use" */
    58b0:	1c a2       	std	Y+36, r1	; 0x24
    58b2:	1b a2       	std	Y+35, r1	; 0x23

	ADC_Change_Channel(SELECT_SIGNAL_CH);	/* Change ADC Channel */
    58b4:	87 e0       	ldi	r24, 0x07	; 7
    58b6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <ADC_Change_Channel>
	ADC_Start_Conversion(); 				/* Start the First ADC Conversion */
    58ba:	0e 94 18 14 	call	0x2830	; 0x2830 <ADC_Start_Conversion>
	ADC_Read(&u16_Channel_Num);				/* Read ADC Digital Value */
    58be:	ce 01       	movw	r24, r28
    58c0:	45 96       	adiw	r24, 0x15	; 21
    58c2:	0e 94 4a 14 	call	0x2894	; 0x2894 <ADC_Read>
	u16_Channel_Num = ReScale(u16_Channel_Num, INITIAL, 1024U, 0U, 6U);
    58c6:	8d 89       	ldd	r24, Y+21	; 0x15
    58c8:	9e 89       	ldd	r25, Y+22	; 0x16
    58ca:	9c 01       	movw	r18, r24
    58cc:	40 e0       	ldi	r20, 0x00	; 0
    58ce:	50 e0       	ldi	r21, 0x00	; 0
    58d0:	00 d0       	rcall	.+0      	; 0x58d2 <Osc_Main+0x76>
    58d2:	00 d0       	rcall	.+0      	; 0x58d4 <Osc_Main+0x78>
    58d4:	ed b7       	in	r30, 0x3d	; 61
    58d6:	fe b7       	in	r31, 0x3e	; 62
    58d8:	31 96       	adiw	r30, 0x01	; 1
    58da:	86 e0       	ldi	r24, 0x06	; 6
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	a0 e0       	ldi	r26, 0x00	; 0
    58e0:	b0 e0       	ldi	r27, 0x00	; 0
    58e2:	80 83       	st	Z, r24
    58e4:	91 83       	std	Z+1, r25	; 0x01
    58e6:	a2 83       	std	Z+2, r26	; 0x02
    58e8:	b3 83       	std	Z+3, r27	; 0x03
    58ea:	ca 01       	movw	r24, r20
    58ec:	b9 01       	movw	r22, r18
    58ee:	20 e0       	ldi	r18, 0x00	; 0
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	40 e0       	ldi	r20, 0x00	; 0
    58f4:	50 e0       	ldi	r21, 0x00	; 0
    58f6:	ee 24       	eor	r14, r14
    58f8:	ff 24       	eor	r15, r15
    58fa:	87 01       	movw	r16, r14
    58fc:	68 94       	set
    58fe:	f2 f8       	bld	r15, 2
    5900:	aa 24       	eor	r10, r10
    5902:	bb 24       	eor	r11, r11
    5904:	65 01       	movw	r12, r10
    5906:	0e 94 66 2a 	call	0x54cc	; 0x54cc <ReScale>
    590a:	0f 90       	pop	r0
    590c:	0f 90       	pop	r0
    590e:	0f 90       	pop	r0
    5910:	0f 90       	pop	r0
    5912:	dc 01       	movw	r26, r24
    5914:	cb 01       	movw	r24, r22
    5916:	9e 8b       	std	Y+22, r25	; 0x16
    5918:	8d 8b       	std	Y+21, r24	; 0x15

	/* Display the "Channel Number" */
	TFT_SetCursor(300U, 8U);
    591a:	8c e2       	ldi	r24, 0x2C	; 44
    591c:	91 e0       	ldi	r25, 0x01	; 1
    591e:	68 e0       	ldi	r22, 0x08	; 8
    5920:	70 e0       	ldi	r23, 0x00	; 0
    5922:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Fill_Rect(300U, 8U, 20U, 20U, ILI9486_BLACK);
    5926:	8c e2       	ldi	r24, 0x2C	; 44
    5928:	91 e0       	ldi	r25, 0x01	; 1
    592a:	68 e0       	ldi	r22, 0x08	; 8
    592c:	70 e0       	ldi	r23, 0x00	; 0
    592e:	44 e1       	ldi	r20, 0x14	; 20
    5930:	50 e0       	ldi	r21, 0x00	; 0
    5932:	24 e1       	ldi	r18, 0x14	; 20
    5934:	30 e0       	ldi	r19, 0x00	; 0
    5936:	00 e0       	ldi	r16, 0x00	; 0
    5938:	10 e0       	ldi	r17, 0x00	; 0
    593a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
	TFT_SetTextColor(ILI9486_GREENYELLOW,ILI9486_BLACK);
    593e:	85 ee       	ldi	r24, 0xE5	; 229
    5940:	9f ea       	ldi	r25, 0xAF	; 175
    5942:	60 e0       	ldi	r22, 0x00	; 0
    5944:	70 e0       	ldi	r23, 0x00	; 0
    5946:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_Number(u16_Channel_Num, TFT_CHAR_14_24, 1U);
    594a:	8d 89       	ldd	r24, Y+21	; 0x15
    594c:	9e 89       	ldd	r25, Y+22	; 0x16
    594e:	cc 01       	movw	r24, r24
    5950:	a0 e0       	ldi	r26, 0x00	; 0
    5952:	b0 e0       	ldi	r27, 0x00	; 0
    5954:	bc 01       	movw	r22, r24
    5956:	cd 01       	movw	r24, r26
    5958:	41 e0       	ldi	r20, 0x01	; 1
    595a:	21 e0       	ldi	r18, 0x01	; 1
    595c:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>


	ADC_Change_Channel(SELECT_TIME_DIV);	/* Change ADC Channel */
    5960:	86 e0       	ldi	r24, 0x06	; 6
    5962:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <ADC_Change_Channel>
	ADC_Start_Conversion(); 				/* Start the First ADC Conversion */
    5966:	0e 94 18 14 	call	0x2830	; 0x2830 <ADC_Start_Conversion>
	ADC_Read(&u16_TimeDiv);					/* Read ADC Digital Value */
    596a:	ce 01       	movw	r24, r28
    596c:	4b 96       	adiw	r24, 0x1b	; 27
    596e:	0e 94 4a 14 	call	0x2894	; 0x2894 <ADC_Read>
	u16_TimeDiv = ReScale(u16_TimeDiv, INITIAL, 1024U, 1U, 5U);
    5972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5976:	9c 01       	movw	r18, r24
    5978:	40 e0       	ldi	r20, 0x00	; 0
    597a:	50 e0       	ldi	r21, 0x00	; 0
    597c:	00 d0       	rcall	.+0      	; 0x597e <Osc_Main+0x122>
    597e:	00 d0       	rcall	.+0      	; 0x5980 <Osc_Main+0x124>
    5980:	ed b7       	in	r30, 0x3d	; 61
    5982:	fe b7       	in	r31, 0x3e	; 62
    5984:	31 96       	adiw	r30, 0x01	; 1
    5986:	85 e0       	ldi	r24, 0x05	; 5
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	a0 e0       	ldi	r26, 0x00	; 0
    598c:	b0 e0       	ldi	r27, 0x00	; 0
    598e:	80 83       	st	Z, r24
    5990:	91 83       	std	Z+1, r25	; 0x01
    5992:	a2 83       	std	Z+2, r26	; 0x02
    5994:	b3 83       	std	Z+3, r27	; 0x03
    5996:	ca 01       	movw	r24, r20
    5998:	b9 01       	movw	r22, r18
    599a:	20 e0       	ldi	r18, 0x00	; 0
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	40 e0       	ldi	r20, 0x00	; 0
    59a0:	50 e0       	ldi	r21, 0x00	; 0
    59a2:	ee 24       	eor	r14, r14
    59a4:	ff 24       	eor	r15, r15
    59a6:	87 01       	movw	r16, r14
    59a8:	68 94       	set
    59aa:	f2 f8       	bld	r15, 2
    59ac:	aa 24       	eor	r10, r10
    59ae:	bb 24       	eor	r11, r11
    59b0:	65 01       	movw	r12, r10
    59b2:	a3 94       	inc	r10
    59b4:	0e 94 66 2a 	call	0x54cc	; 0x54cc <ReScale>
    59b8:	0f 90       	pop	r0
    59ba:	0f 90       	pop	r0
    59bc:	0f 90       	pop	r0
    59be:	0f 90       	pop	r0
    59c0:	dc 01       	movw	r26, r24
    59c2:	cb 01       	movw	r24, r22
    59c4:	9c 8f       	std	Y+28, r25	; 0x1c
    59c6:	8b 8f       	std	Y+27, r24	; 0x1b

	/* Display Time per division */
	TFT_SetCursor(388U, 32U);
    59c8:	84 e8       	ldi	r24, 0x84	; 132
    59ca:	91 e0       	ldi	r25, 0x01	; 1
    59cc:	60 e2       	ldi	r22, 0x20	; 32
    59ce:	70 e0       	ldi	r23, 0x00	; 0
    59d0:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Fill_Rect(388U, 32U, 20U, 20U, ILI9486_BLACK);
    59d4:	84 e8       	ldi	r24, 0x84	; 132
    59d6:	91 e0       	ldi	r25, 0x01	; 1
    59d8:	60 e2       	ldi	r22, 0x20	; 32
    59da:	70 e0       	ldi	r23, 0x00	; 0
    59dc:	44 e1       	ldi	r20, 0x14	; 20
    59de:	50 e0       	ldi	r21, 0x00	; 0
    59e0:	24 e1       	ldi	r18, 0x14	; 20
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	00 e0       	ldi	r16, 0x00	; 0
    59e6:	10 e0       	ldi	r17, 0x00	; 0
    59e8:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
	TFT_SetTextColor(ILI9486_BLUE, ILI9486_BLACK);
    59ec:	8f e1       	ldi	r24, 0x1F	; 31
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	60 e0       	ldi	r22, 0x00	; 0
    59f2:	70 e0       	ldi	r23, 0x00	; 0
    59f4:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_Number(u16_TimeDiv, TFT_CHAR_14_24, 1U);
    59f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59fc:	cc 01       	movw	r24, r24
    59fe:	a0 e0       	ldi	r26, 0x00	; 0
    5a00:	b0 e0       	ldi	r27, 0x00	; 0
    5a02:	bc 01       	movw	r22, r24
    5a04:	cd 01       	movw	r24, r26
    5a06:	41 e0       	ldi	r20, 0x01	; 1
    5a08:	21 e0       	ldi	r18, 0x01	; 1
    5a0a:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>
	TFT_SetTextColor(ILI9486_PURPLE, ILI9486_BLACK);
    5a0e:	8f e0       	ldi	r24, 0x0F	; 15
    5a10:	98 e7       	ldi	r25, 0x78	; 120
    5a12:	60 e0       	ldi	r22, 0x00	; 0
    5a14:	70 e0       	ldi	r23, 0x00	; 0
    5a16:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)" ms", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5a1a:	81 ea       	ldi	r24, 0xA1	; 161
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	61 e0       	ldi	r22, 0x01	; 1
    5a20:	41 e0       	ldi	r20, 0x01	; 1
    5a22:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Read the Signal Samples from the ADC Channel_1*/
	ADC_Change_Channel(u16_Channel_Num);	/* Change ADC Channel */
    5a26:	8d 89       	ldd	r24, Y+21	; 0x15
    5a28:	9e 89       	ldd	r25, Y+22	; 0x16
    5a2a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <ADC_Change_Channel>
	for(u16_Index = INITIAL; u16_Index < NUM_SAMPLE ; u16_Index++)
    5a2e:	1a 8a       	std	Y+18, r1	; 0x12
    5a30:	19 8a       	std	Y+17, r1	; 0x11
    5a32:	11 c0       	rjmp	.+34     	; 0x5a56 <Osc_Main+0x1fa>
	{
		ADC_Start_Conversion(); 			/* Start the First ADC Conversion */
    5a34:	0e 94 18 14 	call	0x2830	; 0x2830 <ADC_Start_Conversion>
		ADC_Read(&gau16_Volt[u16_Index]);	/* Read ADC Digital Value */
    5a38:	25 ec       	ldi	r18, 0xC5	; 197
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	89 89       	ldd	r24, Y+17	; 0x11
    5a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    5a40:	88 0f       	add	r24, r24
    5a42:	99 1f       	adc	r25, r25
    5a44:	82 0f       	add	r24, r18
    5a46:	93 1f       	adc	r25, r19
    5a48:	0e 94 4a 14 	call	0x2894	; 0x2894 <ADC_Read>
	TFT_SetTextColor(ILI9486_PURPLE, ILI9486_BLACK);
	TFT_Print_String((uint8_t *)" ms", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);

	/* Read the Signal Samples from the ADC Channel_1*/
	ADC_Change_Channel(u16_Channel_Num);	/* Change ADC Channel */
	for(u16_Index = INITIAL; u16_Index < NUM_SAMPLE ; u16_Index++)
    5a4c:	89 89       	ldd	r24, Y+17	; 0x11
    5a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    5a50:	01 96       	adiw	r24, 0x01	; 1
    5a52:	9a 8b       	std	Y+18, r25	; 0x12
    5a54:	89 8b       	std	Y+17, r24	; 0x11
    5a56:	89 89       	ldd	r24, Y+17	; 0x11
    5a58:	9a 89       	ldd	r25, Y+18	; 0x12
    5a5a:	23 e0       	ldi	r18, 0x03	; 3
    5a5c:	80 32       	cpi	r24, 0x20	; 32
    5a5e:	92 07       	cpc	r25, r18
    5a60:	48 f3       	brcs	.-46     	; 0x5a34 <Osc_Main+0x1d8>
		ADC_Start_Conversion(); 			/* Start the First ADC Conversion */
		ADC_Read(&gau16_Volt[u16_Index]);	/* Read ADC Digital Value */
	}

	/* Convert the Signal Samples from Digital Value to Analog Value */
	for(u16_Index = INITIAL ; u16_Index < NUM_SAMPLE ; u16_Index++)
    5a62:	1a 8a       	std	Y+18, r1	; 0x12
    5a64:	19 8a       	std	Y+17, r1	; 0x11
    5a66:	3f c0       	rjmp	.+126    	; 0x5ae6 <Osc_Main+0x28a>
	{
		gau16_Volt[u16_Index] = ReScale(gau16_Volt[u16_Index], INITIAL, 1024U, INITIAL, 5005U);
    5a68:	89 88       	ldd	r8, Y+17	; 0x11
    5a6a:	9a 88       	ldd	r9, Y+18	; 0x12
    5a6c:	89 89       	ldd	r24, Y+17	; 0x11
    5a6e:	9a 89       	ldd	r25, Y+18	; 0x12
    5a70:	88 0f       	add	r24, r24
    5a72:	99 1f       	adc	r25, r25
    5a74:	fc 01       	movw	r30, r24
    5a76:	eb 53       	subi	r30, 0x3B	; 59
    5a78:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7a:	80 81       	ld	r24, Z
    5a7c:	91 81       	ldd	r25, Z+1	; 0x01
    5a7e:	9c 01       	movw	r18, r24
    5a80:	40 e0       	ldi	r20, 0x00	; 0
    5a82:	50 e0       	ldi	r21, 0x00	; 0
    5a84:	00 d0       	rcall	.+0      	; 0x5a86 <Osc_Main+0x22a>
    5a86:	00 d0       	rcall	.+0      	; 0x5a88 <Osc_Main+0x22c>
    5a88:	ed b7       	in	r30, 0x3d	; 61
    5a8a:	fe b7       	in	r31, 0x3e	; 62
    5a8c:	31 96       	adiw	r30, 0x01	; 1
    5a8e:	8d e8       	ldi	r24, 0x8D	; 141
    5a90:	93 e1       	ldi	r25, 0x13	; 19
    5a92:	a0 e0       	ldi	r26, 0x00	; 0
    5a94:	b0 e0       	ldi	r27, 0x00	; 0
    5a96:	80 83       	st	Z, r24
    5a98:	91 83       	std	Z+1, r25	; 0x01
    5a9a:	a2 83       	std	Z+2, r26	; 0x02
    5a9c:	b3 83       	std	Z+3, r27	; 0x03
    5a9e:	ca 01       	movw	r24, r20
    5aa0:	b9 01       	movw	r22, r18
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	40 e0       	ldi	r20, 0x00	; 0
    5aa8:	50 e0       	ldi	r21, 0x00	; 0
    5aaa:	ee 24       	eor	r14, r14
    5aac:	ff 24       	eor	r15, r15
    5aae:	87 01       	movw	r16, r14
    5ab0:	68 94       	set
    5ab2:	f2 f8       	bld	r15, 2
    5ab4:	aa 24       	eor	r10, r10
    5ab6:	bb 24       	eor	r11, r11
    5ab8:	65 01       	movw	r12, r10
    5aba:	0e 94 66 2a 	call	0x54cc	; 0x54cc <ReScale>
    5abe:	0f 90       	pop	r0
    5ac0:	0f 90       	pop	r0
    5ac2:	0f 90       	pop	r0
    5ac4:	0f 90       	pop	r0
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	9c 01       	movw	r18, r24
    5acc:	c4 01       	movw	r24, r8
    5ace:	88 0f       	add	r24, r24
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	fc 01       	movw	r30, r24
    5ad4:	eb 53       	subi	r30, 0x3B	; 59
    5ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad8:	31 83       	std	Z+1, r19	; 0x01
    5ada:	20 83       	st	Z, r18
		ADC_Start_Conversion(); 			/* Start the First ADC Conversion */
		ADC_Read(&gau16_Volt[u16_Index]);	/* Read ADC Digital Value */
	}

	/* Convert the Signal Samples from Digital Value to Analog Value */
	for(u16_Index = INITIAL ; u16_Index < NUM_SAMPLE ; u16_Index++)
    5adc:	89 89       	ldd	r24, Y+17	; 0x11
    5ade:	9a 89       	ldd	r25, Y+18	; 0x12
    5ae0:	01 96       	adiw	r24, 0x01	; 1
    5ae2:	9a 8b       	std	Y+18, r25	; 0x12
    5ae4:	89 8b       	std	Y+17, r24	; 0x11
    5ae6:	89 89       	ldd	r24, Y+17	; 0x11
    5ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    5aea:	43 e0       	ldi	r20, 0x03	; 3
    5aec:	80 32       	cpi	r24, 0x20	; 32
    5aee:	94 07       	cpc	r25, r20
    5af0:	08 f4       	brcc	.+2      	; 0x5af4 <Osc_Main+0x298>
    5af2:	ba cf       	rjmp	.-140    	; 0x5a68 <Osc_Main+0x20c>
	{
		gau16_Volt[u16_Index] = ReScale(gau16_Volt[u16_Index], INITIAL, 1024U, INITIAL, 5005U);
	}

	Max_V(gau16_Volt, &u16_Max_V, &u16_Max_V_Loc); 		/* Calculate Maximum volt */
    5af4:	85 ec       	ldi	r24, 0xC5	; 197
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	9e 01       	movw	r18, r28
    5afa:	29 5e       	subi	r18, 0xE9	; 233
    5afc:	3f 4f       	sbci	r19, 0xFF	; 255
    5afe:	ae 01       	movw	r20, r28
    5b00:	4f 5d       	subi	r20, 0xDF	; 223
    5b02:	5f 4f       	sbci	r21, 0xFF	; 255
    5b04:	b9 01       	movw	r22, r18
    5b06:	0e 94 29 29 	call	0x5252	; 0x5252 <Max_V>
	Min_V(gau16_Volt, &u16_Min_V, &u16_Min_V_Loc);		/* Calculate Minimum volt */
    5b0a:	85 ec       	ldi	r24, 0xC5	; 197
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	9e 01       	movw	r18, r28
    5b10:	27 5e       	subi	r18, 0xE7	; 231
    5b12:	3f 4f       	sbci	r19, 0xFF	; 255
    5b14:	ae 01       	movw	r20, r28
    5b16:	4d 5d       	subi	r20, 0xDD	; 221
    5b18:	5f 4f       	sbci	r21, 0xFF	; 255
    5b1a:	b9 01       	movw	r22, r18
    5b1c:	0e 94 89 29 	call	0x5312	; 0x5312 <Min_V>
	u16_Avg_V = (u16_Max_V + u16_Min_V) / 2U ; 			/* Calculate Average Volt */
    5b20:	2f 89       	ldd	r18, Y+23	; 0x17
    5b22:	38 8d       	ldd	r19, Y+24	; 0x18
    5b24:	89 8d       	ldd	r24, Y+25	; 0x19
    5b26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5b28:	82 0f       	add	r24, r18
    5b2a:	93 1f       	adc	r25, r19
    5b2c:	96 95       	lsr	r25
    5b2e:	87 95       	ror	r24
    5b30:	9c 8b       	std	Y+20, r25	; 0x14
    5b32:	8b 8b       	std	Y+19, r24	; 0x13
	Signal_Time(gau16_Volt, u16_Avg_V, &u32_PerTime);	/* Calculate periodic Time */
    5b34:	85 ec       	ldi	r24, 0xC5	; 197
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	2b 89       	ldd	r18, Y+19	; 0x13
    5b3a:	3c 89       	ldd	r19, Y+20	; 0x14
    5b3c:	ae 01       	movw	r20, r28
    5b3e:	43 5e       	subi	r20, 0xE3	; 227
    5b40:	5f 4f       	sbci	r21, 0xFF	; 255
    5b42:	b9 01       	movw	r22, r18
    5b44:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <Signal_Time>

	/* Scale the Signal to Fit the Screen Oscilloscope "Y AXIS" Grid */
	for(u16_Index = INITIAL ; u16_Index < NUM_SAMPLE  ; u16_Index++)
    5b48:	1a 8a       	std	Y+18, r1	; 0x12
    5b4a:	19 8a       	std	Y+17, r1	; 0x11
    5b4c:	4b c0       	rjmp	.+150    	; 0x5be4 <Osc_Main+0x388>
	{
		gau16_Volt[u16_Index] = ReScale(gau16_Volt[u16_Index], INITIAL, 5000U, 260U, 60U);
    5b4e:	89 88       	ldd	r8, Y+17	; 0x11
    5b50:	9a 88       	ldd	r9, Y+18	; 0x12
    5b52:	89 89       	ldd	r24, Y+17	; 0x11
    5b54:	9a 89       	ldd	r25, Y+18	; 0x12
    5b56:	88 0f       	add	r24, r24
    5b58:	99 1f       	adc	r25, r25
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	eb 53       	subi	r30, 0x3B	; 59
    5b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b60:	80 81       	ld	r24, Z
    5b62:	91 81       	ldd	r25, Z+1	; 0x01
    5b64:	9c 01       	movw	r18, r24
    5b66:	40 e0       	ldi	r20, 0x00	; 0
    5b68:	50 e0       	ldi	r21, 0x00	; 0
    5b6a:	00 d0       	rcall	.+0      	; 0x5b6c <Osc_Main+0x310>
    5b6c:	00 d0       	rcall	.+0      	; 0x5b6e <Osc_Main+0x312>
    5b6e:	ed b7       	in	r30, 0x3d	; 61
    5b70:	fe b7       	in	r31, 0x3e	; 62
    5b72:	31 96       	adiw	r30, 0x01	; 1
    5b74:	8c e3       	ldi	r24, 0x3C	; 60
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	a0 e0       	ldi	r26, 0x00	; 0
    5b7a:	b0 e0       	ldi	r27, 0x00	; 0
    5b7c:	80 83       	st	Z, r24
    5b7e:	91 83       	std	Z+1, r25	; 0x01
    5b80:	a2 83       	std	Z+2, r26	; 0x02
    5b82:	b3 83       	std	Z+3, r27	; 0x03
    5b84:	ca 01       	movw	r24, r20
    5b86:	b9 01       	movw	r22, r18
    5b88:	20 e0       	ldi	r18, 0x00	; 0
    5b8a:	30 e0       	ldi	r19, 0x00	; 0
    5b8c:	40 e0       	ldi	r20, 0x00	; 0
    5b8e:	50 e0       	ldi	r21, 0x00	; 0
    5b90:	0f 2e       	mov	r0, r31
    5b92:	f8 e8       	ldi	r31, 0x88	; 136
    5b94:	ef 2e       	mov	r14, r31
    5b96:	f3 e1       	ldi	r31, 0x13	; 19
    5b98:	ff 2e       	mov	r15, r31
    5b9a:	f0 e0       	ldi	r31, 0x00	; 0
    5b9c:	0f 2f       	mov	r16, r31
    5b9e:	f0 e0       	ldi	r31, 0x00	; 0
    5ba0:	1f 2f       	mov	r17, r31
    5ba2:	f0 2d       	mov	r31, r0
    5ba4:	0f 2e       	mov	r0, r31
    5ba6:	f4 e0       	ldi	r31, 0x04	; 4
    5ba8:	af 2e       	mov	r10, r31
    5baa:	f1 e0       	ldi	r31, 0x01	; 1
    5bac:	bf 2e       	mov	r11, r31
    5bae:	f0 e0       	ldi	r31, 0x00	; 0
    5bb0:	cf 2e       	mov	r12, r31
    5bb2:	f0 e0       	ldi	r31, 0x00	; 0
    5bb4:	df 2e       	mov	r13, r31
    5bb6:	f0 2d       	mov	r31, r0
    5bb8:	0e 94 66 2a 	call	0x54cc	; 0x54cc <ReScale>
    5bbc:	0f 90       	pop	r0
    5bbe:	0f 90       	pop	r0
    5bc0:	0f 90       	pop	r0
    5bc2:	0f 90       	pop	r0
    5bc4:	dc 01       	movw	r26, r24
    5bc6:	cb 01       	movw	r24, r22
    5bc8:	9c 01       	movw	r18, r24
    5bca:	c4 01       	movw	r24, r8
    5bcc:	88 0f       	add	r24, r24
    5bce:	99 1f       	adc	r25, r25
    5bd0:	fc 01       	movw	r30, r24
    5bd2:	eb 53       	subi	r30, 0x3B	; 59
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	31 83       	std	Z+1, r19	; 0x01
    5bd8:	20 83       	st	Z, r18
	Min_V(gau16_Volt, &u16_Min_V, &u16_Min_V_Loc);		/* Calculate Minimum volt */
	u16_Avg_V = (u16_Max_V + u16_Min_V) / 2U ; 			/* Calculate Average Volt */
	Signal_Time(gau16_Volt, u16_Avg_V, &u32_PerTime);	/* Calculate periodic Time */

	/* Scale the Signal to Fit the Screen Oscilloscope "Y AXIS" Grid */
	for(u16_Index = INITIAL ; u16_Index < NUM_SAMPLE  ; u16_Index++)
    5bda:	89 89       	ldd	r24, Y+17	; 0x11
    5bdc:	9a 89       	ldd	r25, Y+18	; 0x12
    5bde:	01 96       	adiw	r24, 0x01	; 1
    5be0:	9a 8b       	std	Y+18, r25	; 0x12
    5be2:	89 8b       	std	Y+17, r24	; 0x11
    5be4:	89 89       	ldd	r24, Y+17	; 0x11
    5be6:	9a 89       	ldd	r25, Y+18	; 0x12
    5be8:	53 e0       	ldi	r21, 0x03	; 3
    5bea:	80 32       	cpi	r24, 0x20	; 32
    5bec:	95 07       	cpc	r25, r21
    5bee:	08 f4       	brcc	.+2      	; 0x5bf2 <Osc_Main+0x396>
    5bf0:	ae cf       	rjmp	.-164    	; 0x5b4e <Osc_Main+0x2f2>
		gau16_Volt[u16_Index] = ReScale(gau16_Volt[u16_Index], INITIAL, 5000U, 260U, 60U);
	}


	/* Scale the Signal to Fit the Screen Oscilloscope "X AXIS" Grid and Draw the Signal */
	for(u16_Index = 1U ; u16_Index < NUM_SAMPLE ; u16_Index++)
    5bf2:	81 e0       	ldi	r24, 0x01	; 1
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	9a 8b       	std	Y+18, r25	; 0x12
    5bf8:	89 8b       	std	Y+17, r24	; 0x11
    5bfa:	f1 c0       	rjmp	.+482    	; 0x5dde <Osc_Main+0x582>
	{
		u16_X = ReScale(u16_Index, INITIAL, 799U, 22U, 390U);
    5bfc:	89 89       	ldd	r24, Y+17	; 0x11
    5bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    5c00:	9c 01       	movw	r18, r24
    5c02:	40 e0       	ldi	r20, 0x00	; 0
    5c04:	50 e0       	ldi	r21, 0x00	; 0
    5c06:	00 d0       	rcall	.+0      	; 0x5c08 <Osc_Main+0x3ac>
    5c08:	00 d0       	rcall	.+0      	; 0x5c0a <Osc_Main+0x3ae>
    5c0a:	ed b7       	in	r30, 0x3d	; 61
    5c0c:	fe b7       	in	r31, 0x3e	; 62
    5c0e:	31 96       	adiw	r30, 0x01	; 1
    5c10:	86 e8       	ldi	r24, 0x86	; 134
    5c12:	91 e0       	ldi	r25, 0x01	; 1
    5c14:	a0 e0       	ldi	r26, 0x00	; 0
    5c16:	b0 e0       	ldi	r27, 0x00	; 0
    5c18:	80 83       	st	Z, r24
    5c1a:	91 83       	std	Z+1, r25	; 0x01
    5c1c:	a2 83       	std	Z+2, r26	; 0x02
    5c1e:	b3 83       	std	Z+3, r27	; 0x03
    5c20:	ca 01       	movw	r24, r20
    5c22:	b9 01       	movw	r22, r18
    5c24:	20 e0       	ldi	r18, 0x00	; 0
    5c26:	30 e0       	ldi	r19, 0x00	; 0
    5c28:	40 e0       	ldi	r20, 0x00	; 0
    5c2a:	50 e0       	ldi	r21, 0x00	; 0
    5c2c:	0f 2e       	mov	r0, r31
    5c2e:	ff e1       	ldi	r31, 0x1F	; 31
    5c30:	ef 2e       	mov	r14, r31
    5c32:	f3 e0       	ldi	r31, 0x03	; 3
    5c34:	ff 2e       	mov	r15, r31
    5c36:	f0 e0       	ldi	r31, 0x00	; 0
    5c38:	0f 2f       	mov	r16, r31
    5c3a:	f0 e0       	ldi	r31, 0x00	; 0
    5c3c:	1f 2f       	mov	r17, r31
    5c3e:	f0 2d       	mov	r31, r0
    5c40:	0f 2e       	mov	r0, r31
    5c42:	f6 e1       	ldi	r31, 0x16	; 22
    5c44:	af 2e       	mov	r10, r31
    5c46:	f0 e0       	ldi	r31, 0x00	; 0
    5c48:	bf 2e       	mov	r11, r31
    5c4a:	f0 e0       	ldi	r31, 0x00	; 0
    5c4c:	cf 2e       	mov	r12, r31
    5c4e:	f0 e0       	ldi	r31, 0x00	; 0
    5c50:	df 2e       	mov	r13, r31
    5c52:	f0 2d       	mov	r31, r0
    5c54:	0e 94 66 2a 	call	0x54cc	; 0x54cc <ReScale>
    5c58:	0f 90       	pop	r0
    5c5a:	0f 90       	pop	r0
    5c5c:	0f 90       	pop	r0
    5c5e:	0f 90       	pop	r0
    5c60:	dc 01       	movw	r26, r24
    5c62:	cb 01       	movw	r24, r22
    5c64:	98 8b       	std	Y+16, r25	; 0x10
    5c66:	8f 87       	std	Y+15, r24	; 0x0f

		if(u16_X * u16_TimeDiv > 379U)
    5c68:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5c6a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c6e:	98 89       	ldd	r25, Y+16	; 0x10
    5c70:	ac 01       	movw	r20, r24
    5c72:	24 9f       	mul	r18, r20
    5c74:	c0 01       	movw	r24, r0
    5c76:	25 9f       	mul	r18, r21
    5c78:	90 0d       	add	r25, r0
    5c7a:	34 9f       	mul	r19, r20
    5c7c:	90 0d       	add	r25, r0
    5c7e:	11 24       	eor	r1, r1
    5c80:	51 e0       	ldi	r21, 0x01	; 1
    5c82:	8c 37       	cpi	r24, 0x7C	; 124
    5c84:	95 07       	cpc	r25, r21
    5c86:	08 f0       	brcs	.+2      	; 0x5c8a <Osc_Main+0x42e>
    5c88:	b1 c0       	rjmp	.+354    	; 0x5dec <Osc_Main+0x590>
		{
			break;
		}
		/* Draw the signal on the Screen */
		TFT_Draw_CLine(((u16_X -1U)*u16_TimeDiv), gau16_Volt[u16_Index -1U], (u16_X*u16_TimeDiv), gau16_Volt[u16_Index], ILI9486_RED);
    5c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c8c:	98 89       	ldd	r25, Y+16	; 0x10
    5c8e:	9c 01       	movw	r18, r24
    5c90:	21 50       	subi	r18, 0x01	; 1
    5c92:	30 40       	sbci	r19, 0x00	; 0
    5c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c98:	28 9f       	mul	r18, r24
    5c9a:	b0 01       	movw	r22, r0
    5c9c:	29 9f       	mul	r18, r25
    5c9e:	70 0d       	add	r23, r0
    5ca0:	38 9f       	mul	r19, r24
    5ca2:	70 0d       	add	r23, r0
    5ca4:	11 24       	eor	r1, r1
    5ca6:	89 89       	ldd	r24, Y+17	; 0x11
    5ca8:	9a 89       	ldd	r25, Y+18	; 0x12
    5caa:	01 97       	sbiw	r24, 0x01	; 1
    5cac:	88 0f       	add	r24, r24
    5cae:	99 1f       	adc	r25, r25
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	eb 53       	subi	r30, 0x3B	; 59
    5cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb6:	40 81       	ld	r20, Z
    5cb8:	51 81       	ldd	r21, Z+1	; 0x01
    5cba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5cbc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cc0:	98 89       	ldd	r25, Y+16	; 0x10
    5cc2:	28 9f       	mul	r18, r24
    5cc4:	d0 01       	movw	r26, r0
    5cc6:	29 9f       	mul	r18, r25
    5cc8:	b0 0d       	add	r27, r0
    5cca:	38 9f       	mul	r19, r24
    5ccc:	b0 0d       	add	r27, r0
    5cce:	11 24       	eor	r1, r1
    5cd0:	89 89       	ldd	r24, Y+17	; 0x11
    5cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    5cd4:	88 0f       	add	r24, r24
    5cd6:	99 1f       	adc	r25, r25
    5cd8:	fc 01       	movw	r30, r24
    5cda:	eb 53       	subi	r30, 0x3B	; 59
    5cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cde:	20 81       	ld	r18, Z
    5ce0:	31 81       	ldd	r19, Z+1	; 0x01
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	ba 01       	movw	r22, r20
    5ce6:	ad 01       	movw	r20, r26
    5ce8:	00 e0       	ldi	r16, 0x00	; 0
    5cea:	18 ef       	ldi	r17, 0xF8	; 248
    5cec:	0e 94 1a 22 	call	0x4434	; 0x4434 <TFT_Draw_CLine>
    5cf0:	80 e0       	ldi	r24, 0x00	; 0
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    5cf4:	a0 ea       	ldi	r26, 0xA0	; 160
    5cf6:	b0 e4       	ldi	r27, 0x40	; 64
    5cf8:	8b 87       	std	Y+11, r24	; 0x0b
    5cfa:	9c 87       	std	Y+12, r25	; 0x0c
    5cfc:	ad 87       	std	Y+13, r26	; 0x0d
    5cfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d08:	20 e0       	ldi	r18, 0x00	; 0
    5d0a:	30 e0       	ldi	r19, 0x00	; 0
    5d0c:	4a ef       	ldi	r20, 0xFA	; 250
    5d0e:	54 e4       	ldi	r21, 0x44	; 68
    5d10:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    5d14:	dc 01       	movw	r26, r24
    5d16:	cb 01       	movw	r24, r22
    5d18:	8f 83       	std	Y+7, r24	; 0x07
    5d1a:	98 87       	std	Y+8, r25	; 0x08
    5d1c:	a9 87       	std	Y+9, r26	; 0x09
    5d1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d20:	6f 81       	ldd	r22, Y+7	; 0x07
    5d22:	78 85       	ldd	r23, Y+8	; 0x08
    5d24:	89 85       	ldd	r24, Y+9	; 0x09
    5d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d28:	20 e0       	ldi	r18, 0x00	; 0
    5d2a:	30 e0       	ldi	r19, 0x00	; 0
    5d2c:	40 e8       	ldi	r20, 0x80	; 128
    5d2e:	5f e3       	ldi	r21, 0x3F	; 63
    5d30:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__ltsf2>
    5d34:	88 23       	and	r24, r24
    5d36:	2c f4       	brge	.+10     	; 0x5d42 <Osc_Main+0x4e6>
		__ticks = 1;
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	9e 83       	std	Y+6, r25	; 0x06
    5d3e:	8d 83       	std	Y+5, r24	; 0x05
    5d40:	3f c0       	rjmp	.+126    	; 0x5dc0 <Osc_Main+0x564>
	else if (__tmp > 65535)
    5d42:	6f 81       	ldd	r22, Y+7	; 0x07
    5d44:	78 85       	ldd	r23, Y+8	; 0x08
    5d46:	89 85       	ldd	r24, Y+9	; 0x09
    5d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d4a:	20 e0       	ldi	r18, 0x00	; 0
    5d4c:	3f ef       	ldi	r19, 0xFF	; 255
    5d4e:	4f e7       	ldi	r20, 0x7F	; 127
    5d50:	57 e4       	ldi	r21, 0x47	; 71
    5d52:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__gtsf2>
    5d56:	18 16       	cp	r1, r24
    5d58:	4c f5       	brge	.+82     	; 0x5dac <Osc_Main+0x550>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d62:	20 e0       	ldi	r18, 0x00	; 0
    5d64:	30 e0       	ldi	r19, 0x00	; 0
    5d66:	40 e2       	ldi	r20, 0x20	; 32
    5d68:	51 e4       	ldi	r21, 0x41	; 65
    5d6a:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
    5d6e:	dc 01       	movw	r26, r24
    5d70:	cb 01       	movw	r24, r22
    5d72:	bc 01       	movw	r22, r24
    5d74:	cd 01       	movw	r24, r26
    5d76:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    5d7a:	dc 01       	movw	r26, r24
    5d7c:	cb 01       	movw	r24, r22
    5d7e:	9e 83       	std	Y+6, r25	; 0x06
    5d80:	8d 83       	std	Y+5, r24	; 0x05
    5d82:	0f c0       	rjmp	.+30     	; 0x5da2 <Osc_Main+0x546>
    5d84:	88 ec       	ldi	r24, 0xC8	; 200
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	9c 83       	std	Y+4, r25	; 0x04
    5d8a:	8b 83       	std	Y+3, r24	; 0x03
    5d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d90:	01 97       	sbiw	r24, 0x01	; 1
    5d92:	f1 f7       	brne	.-4      	; 0x5d90 <Osc_Main+0x534>
    5d94:	9c 83       	std	Y+4, r25	; 0x04
    5d96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d98:	8d 81       	ldd	r24, Y+5	; 0x05
    5d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d9c:	01 97       	sbiw	r24, 0x01	; 1
    5d9e:	9e 83       	std	Y+6, r25	; 0x06
    5da0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5da2:	8d 81       	ldd	r24, Y+5	; 0x05
    5da4:	9e 81       	ldd	r25, Y+6	; 0x06
    5da6:	00 97       	sbiw	r24, 0x00	; 0
    5da8:	69 f7       	brne	.-38     	; 0x5d84 <Osc_Main+0x528>
    5daa:	14 c0       	rjmp	.+40     	; 0x5dd4 <Osc_Main+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dac:	6f 81       	ldd	r22, Y+7	; 0x07
    5dae:	78 85       	ldd	r23, Y+8	; 0x08
    5db0:	89 85       	ldd	r24, Y+9	; 0x09
    5db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5db4:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixunssfsi>
    5db8:	dc 01       	movw	r26, r24
    5dba:	cb 01       	movw	r24, r22
    5dbc:	9e 83       	std	Y+6, r25	; 0x06
    5dbe:	8d 83       	std	Y+5, r24	; 0x05
    5dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    5dc4:	9a 83       	std	Y+2, r25	; 0x02
    5dc6:	89 83       	std	Y+1, r24	; 0x01
    5dc8:	89 81       	ldd	r24, Y+1	; 0x01
    5dca:	9a 81       	ldd	r25, Y+2	; 0x02
    5dcc:	01 97       	sbiw	r24, 0x01	; 1
    5dce:	f1 f7       	brne	.-4      	; 0x5dcc <Osc_Main+0x570>
    5dd0:	9a 83       	std	Y+2, r25	; 0x02
    5dd2:	89 83       	std	Y+1, r24	; 0x01
		gau16_Volt[u16_Index] = ReScale(gau16_Volt[u16_Index], INITIAL, 5000U, 260U, 60U);
	}


	/* Scale the Signal to Fit the Screen Oscilloscope "X AXIS" Grid and Draw the Signal */
	for(u16_Index = 1U ; u16_Index < NUM_SAMPLE ; u16_Index++)
    5dd4:	89 89       	ldd	r24, Y+17	; 0x11
    5dd6:	9a 89       	ldd	r25, Y+18	; 0x12
    5dd8:	01 96       	adiw	r24, 0x01	; 1
    5dda:	9a 8b       	std	Y+18, r25	; 0x12
    5ddc:	89 8b       	std	Y+17, r24	; 0x11
    5dde:	89 89       	ldd	r24, Y+17	; 0x11
    5de0:	9a 89       	ldd	r25, Y+18	; 0x12
    5de2:	23 e0       	ldi	r18, 0x03	; 3
    5de4:	80 32       	cpi	r24, 0x20	; 32
    5de6:	92 07       	cpc	r25, r18
    5de8:	08 f4       	brcc	.+2      	; 0x5dec <Osc_Main+0x590>
    5dea:	08 cf       	rjmp	.-496    	; 0x5bfc <Osc_Main+0x3a0>
		TFT_Draw_CLine(((u16_X -1U)*u8_TimeDiv), gau16_Volt[u16_Index -1U], (u16_X*u8_TimeDiv), gau16_Volt[u16_Index], ILI9486_BLACK);
	}
*/

	/* Display Signal Frequency */
	TFT_SetCursor(95U, 285U);
    5dec:	8f e5       	ldi	r24, 0x5F	; 95
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	6d e1       	ldi	r22, 0x1D	; 29
    5df2:	71 e0       	ldi	r23, 0x01	; 1
    5df4:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Fill_Rect(95U, 285U, 100U, 20U, ILI9486_BLACK);
    5df8:	8f e5       	ldi	r24, 0x5F	; 95
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	6d e1       	ldi	r22, 0x1D	; 29
    5dfe:	71 e0       	ldi	r23, 0x01	; 1
    5e00:	44 e6       	ldi	r20, 0x64	; 100
    5e02:	50 e0       	ldi	r21, 0x00	; 0
    5e04:	24 e1       	ldi	r18, 0x14	; 20
    5e06:	30 e0       	ldi	r19, 0x00	; 0
    5e08:	00 e0       	ldi	r16, 0x00	; 0
    5e0a:	10 e0       	ldi	r17, 0x00	; 0
    5e0c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
	TFT_SetTextColor(ILI9486_BLUE, ILI9486_BLACK);
    5e10:	8f e1       	ldi	r24, 0x1F	; 31
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	60 e0       	ldi	r22, 0x00	; 0
    5e16:	70 e0       	ldi	r23, 0x00	; 0
    5e18:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	if(INITIAL != u32_PerTime)
    5e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e20:	af 8d       	ldd	r26, Y+31	; 0x1f
    5e22:	b8 a1       	ldd	r27, Y+32	; 0x20
    5e24:	00 97       	sbiw	r24, 0x00	; 0
    5e26:	a1 05       	cpc	r26, r1
    5e28:	b1 05       	cpc	r27, r1
    5e2a:	a9 f0       	breq	.+42     	; 0x5e56 <Osc_Main+0x5fa>
	{
		TFT_Print_Number((1000U/u32_PerTime), TFT_CHAR_14_24, 1U);
    5e2c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5e2e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5e30:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5e32:	58 a1       	ldd	r21, Y+32	; 0x20
    5e34:	88 ee       	ldi	r24, 0xE8	; 232
    5e36:	93 e0       	ldi	r25, 0x03	; 3
    5e38:	a0 e0       	ldi	r26, 0x00	; 0
    5e3a:	b0 e0       	ldi	r27, 0x00	; 0
    5e3c:	bc 01       	movw	r22, r24
    5e3e:	cd 01       	movw	r24, r26
    5e40:	0e 94 37 30 	call	0x606e	; 0x606e <__udivmodsi4>
    5e44:	da 01       	movw	r26, r20
    5e46:	c9 01       	movw	r24, r18
    5e48:	bc 01       	movw	r22, r24
    5e4a:	cd 01       	movw	r24, r26
    5e4c:	41 e0       	ldi	r20, 0x01	; 1
    5e4e:	21 e0       	ldi	r18, 0x01	; 1
    5e50:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>
    5e54:	08 c0       	rjmp	.+16     	; 0x5e66 <Osc_Main+0x60a>
	}
	else
	{
		TFT_Print_Number(INITIAL, TFT_CHAR_14_24, 1U);
    5e56:	60 e0       	ldi	r22, 0x00	; 0
    5e58:	70 e0       	ldi	r23, 0x00	; 0
    5e5a:	80 e0       	ldi	r24, 0x00	; 0
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	41 e0       	ldi	r20, 0x01	; 1
    5e60:	21 e0       	ldi	r18, 0x01	; 1
    5e62:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>
	}
	TFT_SetTextColor(ILI9486_PURPLE, ILI9486_BLACK);
    5e66:	8f e0       	ldi	r24, 0x0F	; 15
    5e68:	98 e7       	ldi	r25, 0x78	; 120
    5e6a:	60 e0       	ldi	r22, 0x00	; 0
    5e6c:	70 e0       	ldi	r23, 0x00	; 0
    5e6e:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)" HZ", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5e72:	85 ea       	ldi	r24, 0xA5	; 165
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	61 e0       	ldi	r22, 0x01	; 1
    5e78:	41 e0       	ldi	r20, 0x01	; 1
    5e7a:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display Periodic Time */
	TFT_SetCursor(250U, 285U);
    5e7e:	8a ef       	ldi	r24, 0xFA	; 250
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	6d e1       	ldi	r22, 0x1D	; 29
    5e84:	71 e0       	ldi	r23, 0x01	; 1
    5e86:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Fill_Rect(250U, 285U, 100U, 20U, ILI9486_BLACK);
    5e8a:	8a ef       	ldi	r24, 0xFA	; 250
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	6d e1       	ldi	r22, 0x1D	; 29
    5e90:	71 e0       	ldi	r23, 0x01	; 1
    5e92:	44 e6       	ldi	r20, 0x64	; 100
    5e94:	50 e0       	ldi	r21, 0x00	; 0
    5e96:	24 e1       	ldi	r18, 0x14	; 20
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	00 e0       	ldi	r16, 0x00	; 0
    5e9c:	10 e0       	ldi	r17, 0x00	; 0
    5e9e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
	TFT_SetTextColor(ILI9486_BLUE, ILI9486_BLACK);
    5ea2:	8f e1       	ldi	r24, 0x1F	; 31
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	60 e0       	ldi	r22, 0x00	; 0
    5ea8:	70 e0       	ldi	r23, 0x00	; 0
    5eaa:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_Number(u32_PerTime, TFT_CHAR_14_24, 1U);
    5eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5eb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5eb2:	af 8d       	ldd	r26, Y+31	; 0x1f
    5eb4:	b8 a1       	ldd	r27, Y+32	; 0x20
    5eb6:	bc 01       	movw	r22, r24
    5eb8:	cd 01       	movw	r24, r26
    5eba:	41 e0       	ldi	r20, 0x01	; 1
    5ebc:	21 e0       	ldi	r18, 0x01	; 1
    5ebe:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>
	TFT_SetTextColor(ILI9486_PURPLE, ILI9486_BLACK);
    5ec2:	8f e0       	ldi	r24, 0x0F	; 15
    5ec4:	98 e7       	ldi	r25, 0x78	; 120
    5ec6:	60 e0       	ldi	r22, 0x00	; 0
    5ec8:	70 e0       	ldi	r23, 0x00	; 0
    5eca:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)(uint8_t *)" ms", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5ece:	81 ea       	ldi	r24, 0xA1	; 161
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	61 e0       	ldi	r22, 0x01	; 1
    5ed4:	41 e0       	ldi	r20, 0x01	; 1
    5ed6:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display Average Volt */
	TFT_SetCursor(388U, 115U);
    5eda:	84 e8       	ldi	r24, 0x84	; 132
    5edc:	91 e0       	ldi	r25, 0x01	; 1
    5ede:	63 e7       	ldi	r22, 0x73	; 115
    5ee0:	70 e0       	ldi	r23, 0x00	; 0
    5ee2:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Fill_Rect(388U, 115U, 100U, 20U, ILI9486_BLACK);
    5ee6:	84 e8       	ldi	r24, 0x84	; 132
    5ee8:	91 e0       	ldi	r25, 0x01	; 1
    5eea:	63 e7       	ldi	r22, 0x73	; 115
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	44 e6       	ldi	r20, 0x64	; 100
    5ef0:	50 e0       	ldi	r21, 0x00	; 0
    5ef2:	24 e1       	ldi	r18, 0x14	; 20
    5ef4:	30 e0       	ldi	r19, 0x00	; 0
    5ef6:	00 e0       	ldi	r16, 0x00	; 0
    5ef8:	10 e0       	ldi	r17, 0x00	; 0
    5efa:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
	TFT_SetTextColor(ILI9486_BLUE, ILI9486_BLACK);
    5efe:	8f e1       	ldi	r24, 0x1F	; 31
    5f00:	90 e0       	ldi	r25, 0x00	; 0
    5f02:	60 e0       	ldi	r22, 0x00	; 0
    5f04:	70 e0       	ldi	r23, 0x00	; 0
    5f06:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_Number(u16_Avg_V, TFT_CHAR_14_24, 1U);
    5f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    5f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    5f0e:	cc 01       	movw	r24, r24
    5f10:	a0 e0       	ldi	r26, 0x00	; 0
    5f12:	b0 e0       	ldi	r27, 0x00	; 0
    5f14:	bc 01       	movw	r22, r24
    5f16:	cd 01       	movw	r24, r26
    5f18:	41 e0       	ldi	r20, 0x01	; 1
    5f1a:	21 e0       	ldi	r18, 0x01	; 1
    5f1c:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>
	TFT_SetTextColor(ILI9486_PURPLE,ILI9486_BLACK);
    5f20:	8f e0       	ldi	r24, 0x0F	; 15
    5f22:	98 e7       	ldi	r25, 0x78	; 120
    5f24:	60 e0       	ldi	r22, 0x00	; 0
    5f26:	70 e0       	ldi	r23, 0x00	; 0
    5f28:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"mV", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5f2c:	89 ea       	ldi	r24, 0xA9	; 169
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	61 e0       	ldi	r22, 0x01	; 1
    5f32:	41 e0       	ldi	r20, 0x01	; 1
    5f34:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display Maximum Volt */
	TFT_SetCursor(388U, 195U);
    5f38:	84 e8       	ldi	r24, 0x84	; 132
    5f3a:	91 e0       	ldi	r25, 0x01	; 1
    5f3c:	63 ec       	ldi	r22, 0xC3	; 195
    5f3e:	70 e0       	ldi	r23, 0x00	; 0
    5f40:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Fill_Rect(388U, 195U, 100U, 20U, ILI9486_BLACK);
    5f44:	84 e8       	ldi	r24, 0x84	; 132
    5f46:	91 e0       	ldi	r25, 0x01	; 1
    5f48:	63 ec       	ldi	r22, 0xC3	; 195
    5f4a:	70 e0       	ldi	r23, 0x00	; 0
    5f4c:	44 e6       	ldi	r20, 0x64	; 100
    5f4e:	50 e0       	ldi	r21, 0x00	; 0
    5f50:	24 e1       	ldi	r18, 0x14	; 20
    5f52:	30 e0       	ldi	r19, 0x00	; 0
    5f54:	00 e0       	ldi	r16, 0x00	; 0
    5f56:	10 e0       	ldi	r17, 0x00	; 0
    5f58:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
	TFT_SetTextColor(ILI9486_BLUE, ILI9486_BLACK);
    5f5c:	8f e1       	ldi	r24, 0x1F	; 31
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	60 e0       	ldi	r22, 0x00	; 0
    5f62:	70 e0       	ldi	r23, 0x00	; 0
    5f64:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_Number(u16_Max_V, TFT_CHAR_14_24, 1U);
    5f68:	8f 89       	ldd	r24, Y+23	; 0x17
    5f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    5f6c:	cc 01       	movw	r24, r24
    5f6e:	a0 e0       	ldi	r26, 0x00	; 0
    5f70:	b0 e0       	ldi	r27, 0x00	; 0
    5f72:	bc 01       	movw	r22, r24
    5f74:	cd 01       	movw	r24, r26
    5f76:	41 e0       	ldi	r20, 0x01	; 1
    5f78:	21 e0       	ldi	r18, 0x01	; 1
    5f7a:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>
	TFT_SetTextColor(ILI9486_PURPLE, ILI9486_BLACK);
    5f7e:	8f e0       	ldi	r24, 0x0F	; 15
    5f80:	98 e7       	ldi	r25, 0x78	; 120
    5f82:	60 e0       	ldi	r22, 0x00	; 0
    5f84:	70 e0       	ldi	r23, 0x00	; 0
    5f86:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"mV", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5f8a:	89 ea       	ldi	r24, 0xA9	; 169
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	61 e0       	ldi	r22, 0x01	; 1
    5f90:	41 e0       	ldi	r20, 0x01	; 1
    5f92:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display Minimum Volt */
	TFT_SetCursor(388U, 275U);
    5f96:	84 e8       	ldi	r24, 0x84	; 132
    5f98:	91 e0       	ldi	r25, 0x01	; 1
    5f9a:	63 e1       	ldi	r22, 0x13	; 19
    5f9c:	71 e0       	ldi	r23, 0x01	; 1
    5f9e:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <TFT_SetCursor>
	TFT_Fill_Rect(388U, 275U, 100U, 20U, ILI9486_BLACK);
    5fa2:	84 e8       	ldi	r24, 0x84	; 132
    5fa4:	91 e0       	ldi	r25, 0x01	; 1
    5fa6:	63 e1       	ldi	r22, 0x13	; 19
    5fa8:	71 e0       	ldi	r23, 0x01	; 1
    5faa:	44 e6       	ldi	r20, 0x64	; 100
    5fac:	50 e0       	ldi	r21, 0x00	; 0
    5fae:	24 e1       	ldi	r18, 0x14	; 20
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	00 e0       	ldi	r16, 0x00	; 0
    5fb4:	10 e0       	ldi	r17, 0x00	; 0
    5fb6:	0e 94 62 20 	call	0x40c4	; 0x40c4 <TFT_Fill_Rect>
	TFT_SetTextColor(ILI9486_BLUE, ILI9486_BLACK);
    5fba:	8f e1       	ldi	r24, 0x1F	; 31
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	60 e0       	ldi	r22, 0x00	; 0
    5fc0:	70 e0       	ldi	r23, 0x00	; 0
    5fc2:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_Number(u16_Min_V, TFT_CHAR_14_24, 1U);
    5fc6:	89 8d       	ldd	r24, Y+25	; 0x19
    5fc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5fca:	cc 01       	movw	r24, r24
    5fcc:	a0 e0       	ldi	r26, 0x00	; 0
    5fce:	b0 e0       	ldi	r27, 0x00	; 0
    5fd0:	bc 01       	movw	r22, r24
    5fd2:	cd 01       	movw	r24, r26
    5fd4:	41 e0       	ldi	r20, 0x01	; 1
    5fd6:	21 e0       	ldi	r18, 0x01	; 1
    5fd8:	0e 94 94 27 	call	0x4f28	; 0x4f28 <TFT_Print_Number>
	TFT_SetTextColor(ILI9486_PURPLE, ILI9486_BLACK);
    5fdc:	8f e0       	ldi	r24, 0x0F	; 15
    5fde:	98 e7       	ldi	r25, 0x78	; 120
    5fe0:	60 e0       	ldi	r22, 0x00	; 0
    5fe2:	70 e0       	ldi	r23, 0x00	; 0
    5fe4:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <TFT_SetTextColor>
	TFT_Print_String((uint8_t *)"mV", TFT_CHAR_14_24, TFT_STRING_MODE_NO_BACKGROUND);
    5fe8:	89 ea       	ldi	r24, 0xA9	; 169
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	61 e0       	ldi	r22, 0x01	; 1
    5fee:	41 e0       	ldi	r20, 0x01	; 1
    5ff0:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <TFT_Print_String>

	/* Display Oscilloscope Grid */
	Osc_Display_Grid();
    5ff4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <Osc_Display_Grid>
}
    5ff8:	a4 96       	adiw	r28, 0x24	; 36
    5ffa:	0f b6       	in	r0, 0x3f	; 63
    5ffc:	f8 94       	cli
    5ffe:	de bf       	out	0x3e, r29	; 62
    6000:	0f be       	out	0x3f, r0	; 63
    6002:	cd bf       	out	0x3d, r28	; 61
    6004:	cf 91       	pop	r28
    6006:	df 91       	pop	r29
    6008:	1f 91       	pop	r17
    600a:	0f 91       	pop	r16
    600c:	ff 90       	pop	r15
    600e:	ef 90       	pop	r14
    6010:	df 90       	pop	r13
    6012:	cf 90       	pop	r12
    6014:	bf 90       	pop	r11
    6016:	af 90       	pop	r10
    6018:	9f 90       	pop	r9
    601a:	8f 90       	pop	r8
    601c:	08 95       	ret

0000601e <main>:
 *      Author: MO._.Hamdy "Wazeer"
 */
#include "Osc.h"

int main(void)
{
    601e:	df 93       	push	r29
    6020:	cf 93       	push	r28
    6022:	cd b7       	in	r28, 0x3d	; 61
    6024:	de b7       	in	r29, 0x3e	; 62

	Osc_Display_Init();
    6026:	0e 94 2d 2b 	call	0x565a	; 0x565a <Osc_Display_Init>

	while(1)
	{
		Osc_Main();
    602a:	0e 94 2e 2c 	call	0x585c	; 0x585c <Osc_Main>
    602e:	fd cf       	rjmp	.-6      	; 0x602a <main+0xc>

00006030 <__mulsi3>:
    6030:	62 9f       	mul	r22, r18
    6032:	d0 01       	movw	r26, r0
    6034:	73 9f       	mul	r23, r19
    6036:	f0 01       	movw	r30, r0
    6038:	82 9f       	mul	r24, r18
    603a:	e0 0d       	add	r30, r0
    603c:	f1 1d       	adc	r31, r1
    603e:	64 9f       	mul	r22, r20
    6040:	e0 0d       	add	r30, r0
    6042:	f1 1d       	adc	r31, r1
    6044:	92 9f       	mul	r25, r18
    6046:	f0 0d       	add	r31, r0
    6048:	83 9f       	mul	r24, r19
    604a:	f0 0d       	add	r31, r0
    604c:	74 9f       	mul	r23, r20
    604e:	f0 0d       	add	r31, r0
    6050:	65 9f       	mul	r22, r21
    6052:	f0 0d       	add	r31, r0
    6054:	99 27       	eor	r25, r25
    6056:	72 9f       	mul	r23, r18
    6058:	b0 0d       	add	r27, r0
    605a:	e1 1d       	adc	r30, r1
    605c:	f9 1f       	adc	r31, r25
    605e:	63 9f       	mul	r22, r19
    6060:	b0 0d       	add	r27, r0
    6062:	e1 1d       	adc	r30, r1
    6064:	f9 1f       	adc	r31, r25
    6066:	bd 01       	movw	r22, r26
    6068:	cf 01       	movw	r24, r30
    606a:	11 24       	eor	r1, r1
    606c:	08 95       	ret

0000606e <__udivmodsi4>:
    606e:	a1 e2       	ldi	r26, 0x21	; 33
    6070:	1a 2e       	mov	r1, r26
    6072:	aa 1b       	sub	r26, r26
    6074:	bb 1b       	sub	r27, r27
    6076:	fd 01       	movw	r30, r26
    6078:	0d c0       	rjmp	.+26     	; 0x6094 <__udivmodsi4_ep>

0000607a <__udivmodsi4_loop>:
    607a:	aa 1f       	adc	r26, r26
    607c:	bb 1f       	adc	r27, r27
    607e:	ee 1f       	adc	r30, r30
    6080:	ff 1f       	adc	r31, r31
    6082:	a2 17       	cp	r26, r18
    6084:	b3 07       	cpc	r27, r19
    6086:	e4 07       	cpc	r30, r20
    6088:	f5 07       	cpc	r31, r21
    608a:	20 f0       	brcs	.+8      	; 0x6094 <__udivmodsi4_ep>
    608c:	a2 1b       	sub	r26, r18
    608e:	b3 0b       	sbc	r27, r19
    6090:	e4 0b       	sbc	r30, r20
    6092:	f5 0b       	sbc	r31, r21

00006094 <__udivmodsi4_ep>:
    6094:	66 1f       	adc	r22, r22
    6096:	77 1f       	adc	r23, r23
    6098:	88 1f       	adc	r24, r24
    609a:	99 1f       	adc	r25, r25
    609c:	1a 94       	dec	r1
    609e:	69 f7       	brne	.-38     	; 0x607a <__udivmodsi4_loop>
    60a0:	60 95       	com	r22
    60a2:	70 95       	com	r23
    60a4:	80 95       	com	r24
    60a6:	90 95       	com	r25
    60a8:	9b 01       	movw	r18, r22
    60aa:	ac 01       	movw	r20, r24
    60ac:	bd 01       	movw	r22, r26
    60ae:	cf 01       	movw	r24, r30
    60b0:	08 95       	ret

000060b2 <__divmodsi4>:
    60b2:	97 fb       	bst	r25, 7
    60b4:	09 2e       	mov	r0, r25
    60b6:	05 26       	eor	r0, r21
    60b8:	0e d0       	rcall	.+28     	; 0x60d6 <__divmodsi4_neg1>
    60ba:	57 fd       	sbrc	r21, 7
    60bc:	04 d0       	rcall	.+8      	; 0x60c6 <__divmodsi4_neg2>
    60be:	d7 df       	rcall	.-82     	; 0x606e <__udivmodsi4>
    60c0:	0a d0       	rcall	.+20     	; 0x60d6 <__divmodsi4_neg1>
    60c2:	00 1c       	adc	r0, r0
    60c4:	38 f4       	brcc	.+14     	; 0x60d4 <__divmodsi4_exit>

000060c6 <__divmodsi4_neg2>:
    60c6:	50 95       	com	r21
    60c8:	40 95       	com	r20
    60ca:	30 95       	com	r19
    60cc:	21 95       	neg	r18
    60ce:	3f 4f       	sbci	r19, 0xFF	; 255
    60d0:	4f 4f       	sbci	r20, 0xFF	; 255
    60d2:	5f 4f       	sbci	r21, 0xFF	; 255

000060d4 <__divmodsi4_exit>:
    60d4:	08 95       	ret

000060d6 <__divmodsi4_neg1>:
    60d6:	f6 f7       	brtc	.-4      	; 0x60d4 <__divmodsi4_exit>
    60d8:	90 95       	com	r25
    60da:	80 95       	com	r24
    60dc:	70 95       	com	r23
    60de:	61 95       	neg	r22
    60e0:	7f 4f       	sbci	r23, 0xFF	; 255
    60e2:	8f 4f       	sbci	r24, 0xFF	; 255
    60e4:	9f 4f       	sbci	r25, 0xFF	; 255
    60e6:	08 95       	ret

000060e8 <__prologue_saves__>:
    60e8:	2f 92       	push	r2
    60ea:	3f 92       	push	r3
    60ec:	4f 92       	push	r4
    60ee:	5f 92       	push	r5
    60f0:	6f 92       	push	r6
    60f2:	7f 92       	push	r7
    60f4:	8f 92       	push	r8
    60f6:	9f 92       	push	r9
    60f8:	af 92       	push	r10
    60fa:	bf 92       	push	r11
    60fc:	cf 92       	push	r12
    60fe:	df 92       	push	r13
    6100:	ef 92       	push	r14
    6102:	ff 92       	push	r15
    6104:	0f 93       	push	r16
    6106:	1f 93       	push	r17
    6108:	cf 93       	push	r28
    610a:	df 93       	push	r29
    610c:	cd b7       	in	r28, 0x3d	; 61
    610e:	de b7       	in	r29, 0x3e	; 62
    6110:	ca 1b       	sub	r28, r26
    6112:	db 0b       	sbc	r29, r27
    6114:	0f b6       	in	r0, 0x3f	; 63
    6116:	f8 94       	cli
    6118:	de bf       	out	0x3e, r29	; 62
    611a:	0f be       	out	0x3f, r0	; 63
    611c:	cd bf       	out	0x3d, r28	; 61
    611e:	09 94       	ijmp

00006120 <__epilogue_restores__>:
    6120:	2a 88       	ldd	r2, Y+18	; 0x12
    6122:	39 88       	ldd	r3, Y+17	; 0x11
    6124:	48 88       	ldd	r4, Y+16	; 0x10
    6126:	5f 84       	ldd	r5, Y+15	; 0x0f
    6128:	6e 84       	ldd	r6, Y+14	; 0x0e
    612a:	7d 84       	ldd	r7, Y+13	; 0x0d
    612c:	8c 84       	ldd	r8, Y+12	; 0x0c
    612e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6130:	aa 84       	ldd	r10, Y+10	; 0x0a
    6132:	b9 84       	ldd	r11, Y+9	; 0x09
    6134:	c8 84       	ldd	r12, Y+8	; 0x08
    6136:	df 80       	ldd	r13, Y+7	; 0x07
    6138:	ee 80       	ldd	r14, Y+6	; 0x06
    613a:	fd 80       	ldd	r15, Y+5	; 0x05
    613c:	0c 81       	ldd	r16, Y+4	; 0x04
    613e:	1b 81       	ldd	r17, Y+3	; 0x03
    6140:	aa 81       	ldd	r26, Y+2	; 0x02
    6142:	b9 81       	ldd	r27, Y+1	; 0x01
    6144:	ce 0f       	add	r28, r30
    6146:	d1 1d       	adc	r29, r1
    6148:	0f b6       	in	r0, 0x3f	; 63
    614a:	f8 94       	cli
    614c:	de bf       	out	0x3e, r29	; 62
    614e:	0f be       	out	0x3f, r0	; 63
    6150:	cd bf       	out	0x3d, r28	; 61
    6152:	ed 01       	movw	r28, r26
    6154:	08 95       	ret

00006156 <_exit>:
    6156:	f8 94       	cli

00006158 <__stop_program>:
    6158:	ff cf       	rjmp	.-2      	; 0x6158 <__stop_program>
