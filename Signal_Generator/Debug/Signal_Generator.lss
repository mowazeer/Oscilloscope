
Signal_Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000037d4  00003868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002ce  0080006e  0080006e  00003876  2**0
                  ALLOC
  3 .stab         000049f8  00000000  00000000  00003878  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ec5  00000000  00000000  00008270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_1>
       8:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__vector_2>
       c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_3>
      10:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 09 04 	jmp	0x812	; 0x812 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_10>
      2c:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 1b 	call	0x373c	; 0x373c <main>
      8a:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer_Init>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <Timer_Init+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	9b 83       	std	Y+3, r25	; 0x03
      a0:	8a 83       	std	Y+2, r24	; 0x02
      a2:	19 82       	std	Y+1, r1	; 0x01
      a4:	8a 81       	ldd	r24, Y+2	; 0x02
      a6:	9b 81       	ldd	r25, Y+3	; 0x03
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	09 f4       	brne	.+2      	; 0xae <Timer_Init+0x1c>
      ac:	fa c1       	rjmp	.+1012   	; 0x4a2 <Timer_Init+0x410>
      ae:	ea 81       	ldd	r30, Y+2	; 0x02
      b0:	fb 81       	ldd	r31, Y+3	; 0x03
      b2:	80 81       	ld	r24, Z
      b4:	88 23       	and	r24, r24
      b6:	09 f0       	breq	.+2      	; 0xba <Timer_Init+0x28>
      b8:	96 c0       	rjmp	.+300    	; 0x1e6 <Timer_Init+0x154>
      ba:	ea 81       	ldd	r30, Y+2	; 0x02
      bc:	fb 81       	ldd	r31, Y+3	; 0x03
      be:	81 81       	ldd	r24, Z+1	; 0x01
      c0:	81 30       	cpi	r24, 0x01	; 1
      c2:	69 f4       	brne	.+26     	; 0xde <Timer_Init+0x4c>
      c4:	8d e7       	ldi	r24, 0x7D	; 125
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	80 93 78 00 	sts	0x0078, r24
      d0:	90 93 79 00 	sts	0x0079, r25
      d4:	a0 93 7a 00 	sts	0x007A, r26
      d8:	b0 93 7b 00 	sts	0x007B, r27
      dc:	4a c0       	rjmp	.+148    	; 0x172 <Timer_Init+0xe0>
      de:	ea 81       	ldd	r30, Y+2	; 0x02
      e0:	fb 81       	ldd	r31, Y+3	; 0x03
      e2:	81 81       	ldd	r24, Z+1	; 0x01
      e4:	82 30       	cpi	r24, 0x02	; 2
      e6:	69 f4       	brne	.+26     	; 0x102 <Timer_Init+0x70>
      e8:	88 ee       	ldi	r24, 0xE8	; 232
      ea:	93 e0       	ldi	r25, 0x03	; 3
      ec:	a0 e0       	ldi	r26, 0x00	; 0
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	80 93 78 00 	sts	0x0078, r24
      f4:	90 93 79 00 	sts	0x0079, r25
      f8:	a0 93 7a 00 	sts	0x007A, r26
      fc:	b0 93 7b 00 	sts	0x007B, r27
     100:	38 c0       	rjmp	.+112    	; 0x172 <Timer_Init+0xe0>
     102:	ea 81       	ldd	r30, Y+2	; 0x02
     104:	fb 81       	ldd	r31, Y+3	; 0x03
     106:	81 81       	ldd	r24, Z+1	; 0x01
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	69 f4       	brne	.+26     	; 0x126 <Timer_Init+0x94>
     10c:	80 e4       	ldi	r24, 0x40	; 64
     10e:	9f e1       	ldi	r25, 0x1F	; 31
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	80 93 78 00 	sts	0x0078, r24
     118:	90 93 79 00 	sts	0x0079, r25
     11c:	a0 93 7a 00 	sts	0x007A, r26
     120:	b0 93 7b 00 	sts	0x007B, r27
     124:	26 c0       	rjmp	.+76     	; 0x172 <Timer_Init+0xe0>
     126:	ea 81       	ldd	r30, Y+2	; 0x02
     128:	fb 81       	ldd	r31, Y+3	; 0x03
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	69 f4       	brne	.+26     	; 0x14a <Timer_Init+0xb8>
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	9d e7       	ldi	r25, 0x7D	; 125
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b0 e0       	ldi	r27, 0x00	; 0
     138:	80 93 78 00 	sts	0x0078, r24
     13c:	90 93 79 00 	sts	0x0079, r25
     140:	a0 93 7a 00 	sts	0x007A, r26
     144:	b0 93 7b 00 	sts	0x007B, r27
     148:	14 c0       	rjmp	.+40     	; 0x172 <Timer_Init+0xe0>
     14a:	ea 81       	ldd	r30, Y+2	; 0x02
     14c:	fb 81       	ldd	r31, Y+3	; 0x03
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	85 30       	cpi	r24, 0x05	; 5
     152:	69 f4       	brne	.+26     	; 0x16e <Timer_Init+0xdc>
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	94 ef       	ldi	r25, 0xF4	; 244
     158:	a1 e0       	ldi	r26, 0x01	; 1
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	80 93 78 00 	sts	0x0078, r24
     160:	90 93 79 00 	sts	0x0079, r25
     164:	a0 93 7a 00 	sts	0x007A, r26
     168:	b0 93 7b 00 	sts	0x007B, r27
     16c:	02 c0       	rjmp	.+4      	; 0x172 <Timer_Init+0xe0>
     16e:	86 e1       	ldi	r24, 0x16	; 22
     170:	89 83       	std	Y+1, r24	; 0x01
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	86 31       	cpi	r24, 0x16	; 22
     176:	29 f0       	breq	.+10     	; 0x182 <Timer_Init+0xf0>
     178:	ea 81       	ldd	r30, Y+2	; 0x02
     17a:	fb 81       	ldd	r31, Y+3	; 0x03
     17c:	81 81       	ldd	r24, Z+1	; 0x01
     17e:	80 93 72 00 	sts	0x0072, r24
     182:	ea 81       	ldd	r30, Y+2	; 0x02
     184:	fb 81       	ldd	r31, Y+3	; 0x03
     186:	83 81       	ldd	r24, Z+3	; 0x03
     188:	88 23       	and	r24, r24
     18a:	61 f4       	brne	.+24     	; 0x1a4 <Timer_Init+0x112>
     18c:	0e 94 22 05 	call	0xa44	; 0xa44 <Enable_GlobalInterrupt>
     190:	10 92 75 00 	sts	0x0075, r1
     194:	a9 e5       	ldi	r26, 0x59	; 89
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e9 e5       	ldi	r30, 0x59	; 89
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	8c 93       	st	X, r24
     1a2:	12 c0       	rjmp	.+36     	; 0x1c8 <Timer_Init+0x136>
     1a4:	ea 81       	ldd	r30, Y+2	; 0x02
     1a6:	fb 81       	ldd	r31, Y+3	; 0x03
     1a8:	83 81       	ldd	r24, Z+3	; 0x03
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	59 f4       	brne	.+22     	; 0x1c4 <Timer_Init+0x132>
     1ae:	a9 e5       	ldi	r26, 0x59	; 89
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e9 e5       	ldi	r30, 0x59	; 89
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	8d 7f       	andi	r24, 0xFD	; 253
     1ba:	8c 93       	st	X, r24
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	80 93 75 00 	sts	0x0075, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Timer_Init+0x136>
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	a3 e5       	ldi	r26, 0x53	; 83
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e3 e5       	ldi	r30, 0x53	; 83
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	88 60       	ori	r24, 0x08	; 8
     1d4:	8c 93       	st	X, r24
     1d6:	a3 e5       	ldi	r26, 0x53	; 83
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	e3 e5       	ldi	r30, 0x53	; 83
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	8f 7b       	andi	r24, 0xBF	; 191
     1e2:	8c 93       	st	X, r24
     1e4:	60 c1       	rjmp	.+704    	; 0x4a6 <Timer_Init+0x414>
     1e6:	ea 81       	ldd	r30, Y+2	; 0x02
     1e8:	fb 81       	ldd	r31, Y+3	; 0x03
     1ea:	80 81       	ld	r24, Z
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	09 f0       	breq	.+2      	; 0x1f2 <Timer_Init+0x160>
     1f0:	95 c0       	rjmp	.+298    	; 0x31c <Timer_Init+0x28a>
     1f2:	ea 81       	ldd	r30, Y+2	; 0x02
     1f4:	fb 81       	ldd	r31, Y+3	; 0x03
     1f6:	81 81       	ldd	r24, Z+1	; 0x01
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	69 f4       	brne	.+26     	; 0x216 <Timer_Init+0x184>
     1fc:	8d e7       	ldi	r24, 0x7D	; 125
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	80 93 7c 00 	sts	0x007C, r24
     208:	90 93 7d 00 	sts	0x007D, r25
     20c:	a0 93 7e 00 	sts	0x007E, r26
     210:	b0 93 7f 00 	sts	0x007F, r27
     214:	4a c0       	rjmp	.+148    	; 0x2aa <Timer_Init+0x218>
     216:	ea 81       	ldd	r30, Y+2	; 0x02
     218:	fb 81       	ldd	r31, Y+3	; 0x03
     21a:	81 81       	ldd	r24, Z+1	; 0x01
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	69 f4       	brne	.+26     	; 0x23a <Timer_Init+0x1a8>
     220:	88 ee       	ldi	r24, 0xE8	; 232
     222:	93 e0       	ldi	r25, 0x03	; 3
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	80 93 7c 00 	sts	0x007C, r24
     22c:	90 93 7d 00 	sts	0x007D, r25
     230:	a0 93 7e 00 	sts	0x007E, r26
     234:	b0 93 7f 00 	sts	0x007F, r27
     238:	38 c0       	rjmp	.+112    	; 0x2aa <Timer_Init+0x218>
     23a:	ea 81       	ldd	r30, Y+2	; 0x02
     23c:	fb 81       	ldd	r31, Y+3	; 0x03
     23e:	81 81       	ldd	r24, Z+1	; 0x01
     240:	83 30       	cpi	r24, 0x03	; 3
     242:	69 f4       	brne	.+26     	; 0x25e <Timer_Init+0x1cc>
     244:	80 e4       	ldi	r24, 0x40	; 64
     246:	9f e1       	ldi	r25, 0x1F	; 31
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	80 93 7c 00 	sts	0x007C, r24
     250:	90 93 7d 00 	sts	0x007D, r25
     254:	a0 93 7e 00 	sts	0x007E, r26
     258:	b0 93 7f 00 	sts	0x007F, r27
     25c:	26 c0       	rjmp	.+76     	; 0x2aa <Timer_Init+0x218>
     25e:	ea 81       	ldd	r30, Y+2	; 0x02
     260:	fb 81       	ldd	r31, Y+3	; 0x03
     262:	81 81       	ldd	r24, Z+1	; 0x01
     264:	84 30       	cpi	r24, 0x04	; 4
     266:	69 f4       	brne	.+26     	; 0x282 <Timer_Init+0x1f0>
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	9d e7       	ldi	r25, 0x7D	; 125
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	80 93 7c 00 	sts	0x007C, r24
     274:	90 93 7d 00 	sts	0x007D, r25
     278:	a0 93 7e 00 	sts	0x007E, r26
     27c:	b0 93 7f 00 	sts	0x007F, r27
     280:	14 c0       	rjmp	.+40     	; 0x2aa <Timer_Init+0x218>
     282:	ea 81       	ldd	r30, Y+2	; 0x02
     284:	fb 81       	ldd	r31, Y+3	; 0x03
     286:	81 81       	ldd	r24, Z+1	; 0x01
     288:	85 30       	cpi	r24, 0x05	; 5
     28a:	69 f4       	brne	.+26     	; 0x2a6 <Timer_Init+0x214>
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	94 ef       	ldi	r25, 0xF4	; 244
     290:	a1 e0       	ldi	r26, 0x01	; 1
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	80 93 7c 00 	sts	0x007C, r24
     298:	90 93 7d 00 	sts	0x007D, r25
     29c:	a0 93 7e 00 	sts	0x007E, r26
     2a0:	b0 93 7f 00 	sts	0x007F, r27
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <Timer_Init+0x218>
     2a6:	86 e1       	ldi	r24, 0x16	; 22
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	86 31       	cpi	r24, 0x16	; 22
     2ae:	29 f0       	breq	.+10     	; 0x2ba <Timer_Init+0x228>
     2b0:	ea 81       	ldd	r30, Y+2	; 0x02
     2b2:	fb 81       	ldd	r31, Y+3	; 0x03
     2b4:	81 81       	ldd	r24, Z+1	; 0x01
     2b6:	80 93 73 00 	sts	0x0073, r24
     2ba:	ea 81       	ldd	r30, Y+2	; 0x02
     2bc:	fb 81       	ldd	r31, Y+3	; 0x03
     2be:	83 81       	ldd	r24, Z+3	; 0x03
     2c0:	88 23       	and	r24, r24
     2c2:	91 f4       	brne	.+36     	; 0x2e8 <Timer_Init+0x256>
     2c4:	ea e4       	ldi	r30, 0x4A	; 74
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	9f ef       	ldi	r25, 0xFF	; 255
     2cc:	91 83       	std	Z+1, r25	; 0x01
     2ce:	80 83       	st	Z, r24
     2d0:	0e 94 22 05 	call	0xa44	; 0xa44 <Enable_GlobalInterrupt>
     2d4:	10 92 76 00 	sts	0x0076, r1
     2d8:	a9 e5       	ldi	r26, 0x59	; 89
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	e9 e5       	ldi	r30, 0x59	; 89
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	80 61       	ori	r24, 0x10	; 16
     2e4:	8c 93       	st	X, r24
     2e6:	12 c0       	rjmp	.+36     	; 0x30c <Timer_Init+0x27a>
     2e8:	ea 81       	ldd	r30, Y+2	; 0x02
     2ea:	fb 81       	ldd	r31, Y+3	; 0x03
     2ec:	83 81       	ldd	r24, Z+3	; 0x03
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	59 f4       	brne	.+22     	; 0x308 <Timer_Init+0x276>
     2f2:	a9 e5       	ldi	r26, 0x59	; 89
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	e9 e5       	ldi	r30, 0x59	; 89
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	8f 7e       	andi	r24, 0xEF	; 239
     2fe:	8c 93       	st	X, r24
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 76 00 	sts	0x0076, r24
     306:	02 c0       	rjmp	.+4      	; 0x30c <Timer_Init+0x27a>
     308:	88 e1       	ldi	r24, 0x18	; 24
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	ae e4       	ldi	r26, 0x4E	; 78
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	ee e4       	ldi	r30, 0x4E	; 78
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 81       	ld	r24, Z
     316:	88 60       	ori	r24, 0x08	; 8
     318:	8c 93       	st	X, r24
     31a:	c5 c0       	rjmp	.+394    	; 0x4a6 <Timer_Init+0x414>
     31c:	ea 81       	ldd	r30, Y+2	; 0x02
     31e:	fb 81       	ldd	r31, Y+3	; 0x03
     320:	80 81       	ld	r24, Z
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	09 f0       	breq	.+2      	; 0x328 <Timer_Init+0x296>
     326:	ba c0       	rjmp	.+372    	; 0x49c <Timer_Init+0x40a>
     328:	ea 81       	ldd	r30, Y+2	; 0x02
     32a:	fb 81       	ldd	r31, Y+3	; 0x03
     32c:	81 81       	ldd	r24, Z+1	; 0x01
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	69 f4       	brne	.+26     	; 0x34c <Timer_Init+0x2ba>
     332:	8d e7       	ldi	r24, 0x7D	; 125
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	b0 e0       	ldi	r27, 0x00	; 0
     33a:	80 93 80 00 	sts	0x0080, r24
     33e:	90 93 81 00 	sts	0x0081, r25
     342:	a0 93 82 00 	sts	0x0082, r26
     346:	b0 93 83 00 	sts	0x0083, r27
     34a:	6e c0       	rjmp	.+220    	; 0x428 <Timer_Init+0x396>
     34c:	ea 81       	ldd	r30, Y+2	; 0x02
     34e:	fb 81       	ldd	r31, Y+3	; 0x03
     350:	81 81       	ldd	r24, Z+1	; 0x01
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	69 f4       	brne	.+26     	; 0x370 <Timer_Init+0x2de>
     356:	88 ee       	ldi	r24, 0xE8	; 232
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	80 93 80 00 	sts	0x0080, r24
     362:	90 93 81 00 	sts	0x0081, r25
     366:	a0 93 82 00 	sts	0x0082, r26
     36a:	b0 93 83 00 	sts	0x0083, r27
     36e:	5c c0       	rjmp	.+184    	; 0x428 <Timer_Init+0x396>
     370:	ea 81       	ldd	r30, Y+2	; 0x02
     372:	fb 81       	ldd	r31, Y+3	; 0x03
     374:	81 81       	ldd	r24, Z+1	; 0x01
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	69 f4       	brne	.+26     	; 0x394 <Timer_Init+0x302>
     37a:	80 ea       	ldi	r24, 0xA0	; 160
     37c:	9f e0       	ldi	r25, 0x0F	; 15
     37e:	a0 e0       	ldi	r26, 0x00	; 0
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	80 93 80 00 	sts	0x0080, r24
     386:	90 93 81 00 	sts	0x0081, r25
     38a:	a0 93 82 00 	sts	0x0082, r26
     38e:	b0 93 83 00 	sts	0x0083, r27
     392:	4a c0       	rjmp	.+148    	; 0x428 <Timer_Init+0x396>
     394:	ea 81       	ldd	r30, Y+2	; 0x02
     396:	fb 81       	ldd	r31, Y+3	; 0x03
     398:	81 81       	ldd	r24, Z+1	; 0x01
     39a:	84 30       	cpi	r24, 0x04	; 4
     39c:	69 f4       	brne	.+26     	; 0x3b8 <Timer_Init+0x326>
     39e:	80 e4       	ldi	r24, 0x40	; 64
     3a0:	9f e1       	ldi	r25, 0x1F	; 31
     3a2:	a0 e0       	ldi	r26, 0x00	; 0
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	80 93 80 00 	sts	0x0080, r24
     3aa:	90 93 81 00 	sts	0x0081, r25
     3ae:	a0 93 82 00 	sts	0x0082, r26
     3b2:	b0 93 83 00 	sts	0x0083, r27
     3b6:	38 c0       	rjmp	.+112    	; 0x428 <Timer_Init+0x396>
     3b8:	ea 81       	ldd	r30, Y+2	; 0x02
     3ba:	fb 81       	ldd	r31, Y+3	; 0x03
     3bc:	81 81       	ldd	r24, Z+1	; 0x01
     3be:	85 30       	cpi	r24, 0x05	; 5
     3c0:	69 f4       	brne	.+26     	; 0x3dc <Timer_Init+0x34a>
     3c2:	80 e8       	ldi	r24, 0x80	; 128
     3c4:	9e e3       	ldi	r25, 0x3E	; 62
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	80 93 80 00 	sts	0x0080, r24
     3ce:	90 93 81 00 	sts	0x0081, r25
     3d2:	a0 93 82 00 	sts	0x0082, r26
     3d6:	b0 93 83 00 	sts	0x0083, r27
     3da:	26 c0       	rjmp	.+76     	; 0x428 <Timer_Init+0x396>
     3dc:	ea 81       	ldd	r30, Y+2	; 0x02
     3de:	fb 81       	ldd	r31, Y+3	; 0x03
     3e0:	81 81       	ldd	r24, Z+1	; 0x01
     3e2:	86 30       	cpi	r24, 0x06	; 6
     3e4:	69 f4       	brne	.+26     	; 0x400 <Timer_Init+0x36e>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	9d e7       	ldi	r25, 0x7D	; 125
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	80 93 80 00 	sts	0x0080, r24
     3f2:	90 93 81 00 	sts	0x0081, r25
     3f6:	a0 93 82 00 	sts	0x0082, r26
     3fa:	b0 93 83 00 	sts	0x0083, r27
     3fe:	14 c0       	rjmp	.+40     	; 0x428 <Timer_Init+0x396>
     400:	ea 81       	ldd	r30, Y+2	; 0x02
     402:	fb 81       	ldd	r31, Y+3	; 0x03
     404:	81 81       	ldd	r24, Z+1	; 0x01
     406:	87 30       	cpi	r24, 0x07	; 7
     408:	69 f4       	brne	.+26     	; 0x424 <Timer_Init+0x392>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	94 ef       	ldi	r25, 0xF4	; 244
     40e:	a1 e0       	ldi	r26, 0x01	; 1
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	80 93 80 00 	sts	0x0080, r24
     416:	90 93 81 00 	sts	0x0081, r25
     41a:	a0 93 82 00 	sts	0x0082, r26
     41e:	b0 93 83 00 	sts	0x0083, r27
     422:	02 c0       	rjmp	.+4      	; 0x428 <Timer_Init+0x396>
     424:	86 e1       	ldi	r24, 0x16	; 22
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	86 31       	cpi	r24, 0x16	; 22
     42c:	29 f0       	breq	.+10     	; 0x438 <Timer_Init+0x3a6>
     42e:	ea 81       	ldd	r30, Y+2	; 0x02
     430:	fb 81       	ldd	r31, Y+3	; 0x03
     432:	81 81       	ldd	r24, Z+1	; 0x01
     434:	80 93 74 00 	sts	0x0074, r24
     438:	ea 81       	ldd	r30, Y+2	; 0x02
     43a:	fb 81       	ldd	r31, Y+3	; 0x03
     43c:	83 81       	ldd	r24, Z+3	; 0x03
     43e:	88 23       	and	r24, r24
     440:	61 f4       	brne	.+24     	; 0x45a <Timer_Init+0x3c8>
     442:	0e 94 22 05 	call	0xa44	; 0xa44 <Enable_GlobalInterrupt>
     446:	10 92 77 00 	sts	0x0077, r1
     44a:	a9 e5       	ldi	r26, 0x59	; 89
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	e9 e5       	ldi	r30, 0x59	; 89
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	80 68       	ori	r24, 0x80	; 128
     456:	8c 93       	st	X, r24
     458:	12 c0       	rjmp	.+36     	; 0x47e <Timer_Init+0x3ec>
     45a:	ea 81       	ldd	r30, Y+2	; 0x02
     45c:	fb 81       	ldd	r31, Y+3	; 0x03
     45e:	83 81       	ldd	r24, Z+3	; 0x03
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	59 f4       	brne	.+22     	; 0x47a <Timer_Init+0x3e8>
     464:	a9 e5       	ldi	r26, 0x59	; 89
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e9 e5       	ldi	r30, 0x59	; 89
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8f 77       	andi	r24, 0x7F	; 127
     470:	8c 93       	st	X, r24
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 77 00 	sts	0x0077, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <Timer_Init+0x3ec>
     47a:	88 e1       	ldi	r24, 0x18	; 24
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	a5 e4       	ldi	r26, 0x45	; 69
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	e5 e4       	ldi	r30, 0x45	; 69
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	88 60       	ori	r24, 0x08	; 8
     48a:	8c 93       	st	X, r24
     48c:	a5 e4       	ldi	r26, 0x45	; 69
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	e5 e4       	ldi	r30, 0x45	; 69
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	8f 7b       	andi	r24, 0xBF	; 191
     498:	8c 93       	st	X, r24
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <Timer_Init+0x414>
     49c:	85 e1       	ldi	r24, 0x15	; 21
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <Timer_Init+0x414>
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	cf 91       	pop	r28
     4b0:	df 91       	pop	r29
     4b2:	08 95       	ret

000004b4 <Timer_Start>:
/* param!  (I/P) u8 Timer channel "The desired timer to be started"                    */
/* param!  (I/P) u8 The desired ticks to be counted                                    */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Timer_Start(uint8_t u8_Channel, uint16_t u16_Ticks)
{
     4b4:	df 93       	push	r29
     4b6:	cf 93       	push	r28
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <Timer_Start+0x6>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <Timer_Start+0x8>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	8a 83       	std	Y+2, r24	; 0x02
     4c2:	7c 83       	std	Y+4, r23	; 0x04
     4c4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
     4c6:	19 82       	std	Y+1, r1	; 0x01

	if (TIMER0 == u8_Channel)
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	88 23       	and	r24, r24
     4cc:	f1 f4       	brne	.+60     	; 0x50a <Timer_Start+0x56>
	{
		if (u16_Ticks <= TIMER0_MAX_VALUE)
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	9c 81       	ldd	r25, Y+4	; 0x04
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f0       	breq	.+2      	; 0x4da <Timer_Start+0x26>
     4d8:	a8 f4       	brcc	.+42     	; 0x504 <Timer_Start+0x50>
		{
			/*
			 *	Restarting the desired timer with the predefined prescale
			 */
			CLEAR_MASK(TCCR0, T0_PSC_MASK);
     4da:	a3 e5       	ldi	r26, 0x53	; 83
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e3 e5       	ldi	r30, 0x53	; 83
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	88 7f       	andi	r24, 0xF8	; 248
     4e6:	8c 93       	st	X, r24
			SET_MASK(TCCR0, su8_Timer_PSC[TIMER0]);
     4e8:	a3 e5       	ldi	r26, 0x53	; 83
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	e3 e5       	ldi	r30, 0x53	; 83
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	90 81       	ld	r25, Z
     4f2:	80 91 72 00 	lds	r24, 0x0072
     4f6:	89 2b       	or	r24, r25
     4f8:	8c 93       	st	X, r24

			/*
			 *	Load the desired number of ticks to TCNT register
			 */
			OCR0 = (uint8_t) u16_Ticks ;
     4fa:	ec e5       	ldi	r30, 0x5C	; 92
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	80 83       	st	Z, r24
     502:	44 c0       	rjmp	.+136    	; 0x58c <Timer_Start+0xd8>

		}
		else
		{
			/*Handling of entering tick number more than the maximum allowed*/
			au8_DET = E_TICKS ;
     504:	8a e1       	ldi	r24, 0x1A	; 26
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	41 c0       	rjmp	.+130    	; 0x58c <Timer_Start+0xd8>
		}
	}
	else if(TIMER1 == u8_Channel)
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	d9 f4       	brne	.+54     	; 0x546 <Timer_Start+0x92>
	{
		if (u16_Ticks <= TIMER1_MAX_VALUE)
		{
			TCNT1 = NULL ;
     510:	ec e4       	ldi	r30, 0x4C	; 76
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	11 82       	std	Z+1, r1	; 0x01
     516:	10 82       	st	Z, r1

			/*
			 *	Restarting the desired timer with the predefined prescale
			 */
			CLEAR_MASK(TCCR1B, T1_PSC_MASK);
     518:	ae e4       	ldi	r26, 0x4E	; 78
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	ee e4       	ldi	r30, 0x4E	; 78
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	88 7f       	andi	r24, 0xF8	; 248
     524:	8c 93       	st	X, r24
			SET_MASK(TCCR1B, su8_Timer_PSC[TIMER1]);
     526:	ae e4       	ldi	r26, 0x4E	; 78
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ee e4       	ldi	r30, 0x4E	; 78
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	90 81       	ld	r25, Z
     530:	80 91 73 00 	lds	r24, 0x0073
     534:	89 2b       	or	r24, r25
     536:	8c 93       	st	X, r24

			/*
			 *	Load the desired number of ticks to TCNT register
			 */
			OCR1A = u16_Ticks ;
     538:	ea e4       	ldi	r30, 0x4A	; 74
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	9c 81       	ldd	r25, Y+4	; 0x04
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	80 83       	st	Z, r24
     544:	23 c0       	rjmp	.+70     	; 0x58c <Timer_Start+0xd8>
		{
			/*Handling of entering tick number more than the maximum allowed*/
			au8_DET = E_TICKS ;
		}
	}
	else if(TIMER2 == u8_Channel)
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	f1 f4       	brne	.+60     	; 0x588 <Timer_Start+0xd4>
	{
		if (u16_Ticks <= TIMER2_MAX_VALUE)
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	91 05       	cpc	r25, r1
     554:	09 f0       	breq	.+2      	; 0x558 <Timer_Start+0xa4>
     556:	a8 f4       	brcc	.+42     	; 0x582 <Timer_Start+0xce>
		{
			/*
			*	Restarting the desired timer with the predefined prescale
			*/
			CLEAR_MASK(TCCR2, T2_PSC_MASK);
     558:	a5 e4       	ldi	r26, 0x45	; 69
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	e5 e4       	ldi	r30, 0x45	; 69
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	88 7f       	andi	r24, 0xF8	; 248
     564:	8c 93       	st	X, r24
			SET_MASK(TCCR2, su8_Timer_PSC[TIMER2]);
     566:	a5 e4       	ldi	r26, 0x45	; 69
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	e5 e4       	ldi	r30, 0x45	; 69
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	90 81       	ld	r25, Z
     570:	80 91 74 00 	lds	r24, 0x0074
     574:	89 2b       	or	r24, r25
     576:	8c 93       	st	X, r24

			/*
			 *	Load the desired number of ticks to TCNT register
			 */
			OCR2 = (uint8_t) u16_Ticks ;
     578:	e3 e4       	ldi	r30, 0x43	; 67
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	80 83       	st	Z, r24
     580:	05 c0       	rjmp	.+10     	; 0x58c <Timer_Start+0xd8>
		}
		else
		{
			/*Handling of entering tick number more than the maximum allowed*/
			au8_DET = E_TICKS ;
     582:	8a e1       	ldi	r24, 0x1A	; 26
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	02 c0       	rjmp	.+4      	; 0x58c <Timer_Start+0xd8>
		}
	}
	else
	{
		/*Handling of entering the wrong channel*/
		au8_DET = E_CHANNEL ;
     588:	85 e1       	ldi	r24, 0x15	; 21
     58a:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Return the Development Error Tracer if it's ok or not */
	return au8_DET ;
     58c:	89 81       	ldd	r24, Y+1	; 0x01
}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <Timer_Stop>:
/* brief!  Function that stop a chosen timer                                           */
/* param!  (I/P) u8 Timer channel                                                      */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Timer_Stop(uint8_t u8_Channel)
{
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <Timer_Stop+0x6>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	8a 83       	std	Y+2, r24	; 0x02
	error_t au8_DET = ERROR_OK ;
     5a8:	19 82       	std	Y+1, r1	; 0x01

	if (TIMER0 == u8_Channel)
     5aa:	8a 81       	ldd	r24, Y+2	; 0x02
     5ac:	88 23       	and	r24, r24
     5ae:	79 f4       	brne	.+30     	; 0x5ce <Timer_Stop+0x32>
	{
		CLEAR_MASK(TCCR0, su8_Timer_PSC[TIMER0]);
     5b0:	a3 e5       	ldi	r26, 0x53	; 83
     5b2:	b0 e0       	ldi	r27, 0x00	; 0
     5b4:	e3 e5       	ldi	r30, 0x53	; 83
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	98 2f       	mov	r25, r24
     5bc:	80 91 72 00 	lds	r24, 0x0072
     5c0:	80 95       	com	r24
     5c2:	89 23       	and	r24, r25
     5c4:	8c 93       	st	X, r24

		TCNT0 = NULL ;
     5c6:	e2 e5       	ldi	r30, 0x52	; 82
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	10 82       	st	Z, r1
     5cc:	29 c0       	rjmp	.+82     	; 0x620 <Timer_Stop+0x84>
	}
	else if(TIMER1 == u8_Channel)
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 f4       	brne	.+36     	; 0x5f8 <Timer_Stop+0x5c>
	{
		CLEAR_MASK(TCCR1B, su8_Timer_PSC[TIMER1]);
     5d4:	ae e4       	ldi	r26, 0x4E	; 78
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	ee e4       	ldi	r30, 0x4E	; 78
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	98 2f       	mov	r25, r24
     5e0:	80 91 73 00 	lds	r24, 0x0073
     5e4:	80 95       	com	r24
     5e6:	89 23       	and	r24, r25
     5e8:	8c 93       	st	X, r24

		TCNT1L = NULL ;
     5ea:	ec e4       	ldi	r30, 0x4C	; 76
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	10 82       	st	Z, r1
		TCNT1H = NULL ;
     5f0:	ed e4       	ldi	r30, 0x4D	; 77
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	10 82       	st	Z, r1
     5f6:	14 c0       	rjmp	.+40     	; 0x620 <Timer_Stop+0x84>
	}
	else if(TIMER2 == u8_Channel)
     5f8:	8a 81       	ldd	r24, Y+2	; 0x02
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	79 f4       	brne	.+30     	; 0x61c <Timer_Stop+0x80>
	{
		CLEAR_MASK(TCCR2, su8_Timer_PSC[TIMER0]);
     5fe:	a5 e4       	ldi	r26, 0x45	; 69
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	e5 e4       	ldi	r30, 0x45	; 69
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	98 2f       	mov	r25, r24
     60a:	80 91 72 00 	lds	r24, 0x0072
     60e:	80 95       	com	r24
     610:	89 23       	and	r24, r25
     612:	8c 93       	st	X, r24

		TCNT2 = NULL ;
     614:	e4 e4       	ldi	r30, 0x44	; 68
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	10 82       	st	Z, r1
     61a:	02 c0       	rjmp	.+4      	; 0x620 <Timer_Stop+0x84>
	}
	else
	{
		/*Handling of entering a wrong channel*/
		au8_DET = E_CHANNEL ;
     61c:	85 e1       	ldi	r24, 0x15	; 21
     61e:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Return the Development Error Tracer if it's ok or not */
	return au8_DET ;
     620:	89 81       	ldd	r24, Y+1	; 0x01
}
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <Timer_Reset>:
/* brief!  Function that reset a chosen timer                                          */
/* param!  (I/P) u8 Timer channel                                                      */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Timer_Reset(uint8_t u8_Channel)
{
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	00 d0       	rcall	.+0      	; 0x632 <Timer_Reset+0x6>
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
     638:	19 82       	std	Y+1, r1	; 0x01

	if (TIMER0 == u8_Channel)
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	88 23       	and	r24, r24
     63e:	21 f4       	brne	.+8      	; 0x648 <Timer_Reset+0x1c>
	{
		TCNT0 = NULL ;
     640:	e2 e5       	ldi	r30, 0x52	; 82
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	10 82       	st	Z, r1
     646:	15 c0       	rjmp	.+42     	; 0x672 <Timer_Reset+0x46>
	}
	else if(TIMER1 == u8_Channel)
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	49 f4       	brne	.+18     	; 0x660 <Timer_Reset+0x34>
	{
		TCNT1 = NULL ;
     64e:	ec e4       	ldi	r30, 0x4C	; 76
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	11 82       	std	Z+1, r1	; 0x01
     654:	10 82       	st	Z, r1
		OCR1A = NULL ;
     656:	ea e4       	ldi	r30, 0x4A	; 74
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	11 82       	std	Z+1, r1	; 0x01
     65c:	10 82       	st	Z, r1
     65e:	09 c0       	rjmp	.+18     	; 0x672 <Timer_Reset+0x46>
	}
	else if(TIMER2 == u8_Channel)
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	21 f4       	brne	.+8      	; 0x66e <Timer_Reset+0x42>
	{
		TCNT2 = NULL ;
     666:	e4 e4       	ldi	r30, 0x44	; 68
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	10 82       	st	Z, r1
     66c:	02 c0       	rjmp	.+4      	; 0x672 <Timer_Reset+0x46>
	}
	else
	{
		/*Handling of entering a wrong channel*/
		au8_DET = E_CHANNEL ;
     66e:	85 e1       	ldi	r24, 0x15	; 21
     670:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Return the Development Error Tracer if it's ok or not */
	return au8_DET ;
     672:	89 81       	ldd	r24, Y+1	; 0x01
}
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	cf 91       	pop	r28
     67a:	df 91       	pop	r29
     67c:	08 95       	ret

0000067e <Timer_Get_Tick_Time>:
/* param!  (I/P) u8 Timer channel                                                      */
/* param!  (O/P) u32* The value of the time per tick                                   */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Timer_Get_Tick_Time(uint8_t u8_Channel, uint32_t *pu32_Timer_Time_ns)
{
     67e:	df 93       	push	r29
     680:	cf 93       	push	r28
     682:	00 d0       	rcall	.+0      	; 0x684 <Timer_Get_Tick_Time+0x6>
     684:	00 d0       	rcall	.+0      	; 0x686 <Timer_Get_Tick_Time+0x8>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	8a 83       	std	Y+2, r24	; 0x02
     68c:	7c 83       	std	Y+4, r23	; 0x04
     68e:	6b 83       	std	Y+3, r22	; 0x03
	error_t au8_DET = ERROR_OK ;
     690:	19 82       	std	Y+1, r1	; 0x01

	/* Checking that the passed pointer is not a null one */
	if ( NULL != pu32_Timer_Time_ns )
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	c9 f1       	breq	.+114    	; 0x70c <Timer_Get_Tick_Time+0x8e>
	{
		if (TIMER0 == u8_Channel)
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	88 23       	and	r24, r24
     69e:	79 f4       	brne	.+30     	; 0x6be <Timer_Get_Tick_Time+0x40>
		{
			*pu32_Timer_Time_ns = su32_Tick_Time[TIMER0] ;
     6a0:	80 91 78 00 	lds	r24, 0x0078
     6a4:	90 91 79 00 	lds	r25, 0x0079
     6a8:	a0 91 7a 00 	lds	r26, 0x007A
     6ac:	b0 91 7b 00 	lds	r27, 0x007B
     6b0:	eb 81       	ldd	r30, Y+3	; 0x03
     6b2:	fc 81       	ldd	r31, Y+4	; 0x04
     6b4:	80 83       	st	Z, r24
     6b6:	91 83       	std	Z+1, r25	; 0x01
     6b8:	a2 83       	std	Z+2, r26	; 0x02
     6ba:	b3 83       	std	Z+3, r27	; 0x03
     6bc:	29 c0       	rjmp	.+82     	; 0x710 <Timer_Get_Tick_Time+0x92>
		}
		else if(TIMER1 == u8_Channel)
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	79 f4       	brne	.+30     	; 0x6e2 <Timer_Get_Tick_Time+0x64>
		{
			*pu32_Timer_Time_ns = su32_Tick_Time[TIMER1] ;
     6c4:	80 91 7c 00 	lds	r24, 0x007C
     6c8:	90 91 7d 00 	lds	r25, 0x007D
     6cc:	a0 91 7e 00 	lds	r26, 0x007E
     6d0:	b0 91 7f 00 	lds	r27, 0x007F
     6d4:	eb 81       	ldd	r30, Y+3	; 0x03
     6d6:	fc 81       	ldd	r31, Y+4	; 0x04
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
     6dc:	a2 83       	std	Z+2, r26	; 0x02
     6de:	b3 83       	std	Z+3, r27	; 0x03
     6e0:	17 c0       	rjmp	.+46     	; 0x710 <Timer_Get_Tick_Time+0x92>
		}
		else if(TIMER2 == u8_Channel)
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	82 30       	cpi	r24, 0x02	; 2
     6e6:	79 f4       	brne	.+30     	; 0x706 <Timer_Get_Tick_Time+0x88>
		{
			*pu32_Timer_Time_ns = su32_Tick_Time[TIMER2] ;
     6e8:	80 91 80 00 	lds	r24, 0x0080
     6ec:	90 91 81 00 	lds	r25, 0x0081
     6f0:	a0 91 82 00 	lds	r26, 0x0082
     6f4:	b0 91 83 00 	lds	r27, 0x0083
     6f8:	eb 81       	ldd	r30, Y+3	; 0x03
     6fa:	fc 81       	ldd	r31, Y+4	; 0x04
     6fc:	80 83       	st	Z, r24
     6fe:	91 83       	std	Z+1, r25	; 0x01
     700:	a2 83       	std	Z+2, r26	; 0x02
     702:	b3 83       	std	Z+3, r27	; 0x03
     704:	05 c0       	rjmp	.+10     	; 0x710 <Timer_Get_Tick_Time+0x92>
		}
		else
		{
			/*Handling of entering a wrong channel*/
			au8_DET = E_CHANNEL ;
     706:	85 e1       	ldi	r24, 0x15	; 21
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	02 c0       	rjmp	.+4      	; 0x710 <Timer_Get_Tick_Time+0x92>
		}
	}
	else
	{
		/*Handling of using null pointer*/
		au8_DET = E_NULL_PTR ;
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Return the Development Error Tracer if it's ok or not */
	return au8_DET ;
     710:	89 81       	ldd	r24, Y+1	; 0x01
}
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	cf 91       	pop	r28
     71c:	df 91       	pop	r29
     71e:	08 95       	ret

00000720 <TIMER_SetCallBack>:
/* param!  pointer to function that will execute in the ISR                            */
/* param!  u8 (i/p) Timer channel Number                                               */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t TIMER_SetCallBack(pfunc_t pfun_Timer_App, uint8_t au8_Channel_Num)
{
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	00 d0       	rcall	.+0      	; 0x726 <TIMER_SetCallBack+0x6>
     726:	00 d0       	rcall	.+0      	; 0x728 <TIMER_SetCallBack+0x8>
     728:	00 d0       	rcall	.+0      	; 0x72a <TIMER_SetCallBack+0xa>
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	9b 83       	std	Y+3, r25	; 0x03
     730:	8a 83       	std	Y+2, r24	; 0x02
     732:	6c 83       	std	Y+4, r22	; 0x04
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
     734:	19 82       	std	Y+1, r1	; 0x01

	if (NULL != pfun_Timer_App)
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	9b 81       	ldd	r25, Y+3	; 0x03
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	59 f1       	breq	.+86     	; 0x794 <TIMER_SetCallBack+0x74>
	{
		switch(au8_Channel_Num)
     73e:	8c 81       	ldd	r24, Y+4	; 0x04
     740:	28 2f       	mov	r18, r24
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	3e 83       	std	Y+6, r19	; 0x06
     746:	2d 83       	std	Y+5, r18	; 0x05
     748:	8d 81       	ldd	r24, Y+5	; 0x05
     74a:	9e 81       	ldd	r25, Y+6	; 0x06
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	91 05       	cpc	r25, r1
     750:	81 f0       	breq	.+32     	; 0x772 <TIMER_SetCallBack+0x52>
     752:	2d 81       	ldd	r18, Y+5	; 0x05
     754:	3e 81       	ldd	r19, Y+6	; 0x06
     756:	22 30       	cpi	r18, 0x02	; 2
     758:	31 05       	cpc	r19, r1
     75a:	91 f0       	breq	.+36     	; 0x780 <TIMER_SetCallBack+0x60>
     75c:	8d 81       	ldd	r24, Y+5	; 0x05
     75e:	9e 81       	ldd	r25, Y+6	; 0x06
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	a9 f4       	brne	.+42     	; 0x78e <TIMER_SetCallBack+0x6e>
		{
			/* Timer_0 scenario */
			case TIMER0:
				pfun_Timer_CallBack[TIMER0] = pfun_Timer_App;
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	9b 81       	ldd	r25, Y+3	; 0x03
     768:	90 93 85 00 	sts	0x0085, r25
     76c:	80 93 84 00 	sts	0x0084, r24
     770:	13 c0       	rjmp	.+38     	; 0x798 <TIMER_SetCallBack+0x78>
			break;

			/* Timer_1 scenario */
			case TIMER1:
				pfun_Timer_CallBack[TIMER1] = pfun_Timer_App;
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	9b 81       	ldd	r25, Y+3	; 0x03
     776:	90 93 87 00 	sts	0x0087, r25
     77a:	80 93 86 00 	sts	0x0086, r24
     77e:	0c c0       	rjmp	.+24     	; 0x798 <TIMER_SetCallBack+0x78>
			break;

			/* Timer_2 scenario */
			case TIMER2:
				pfun_Timer_CallBack[TIMER2] = pfun_Timer_App;
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	9b 81       	ldd	r25, Y+3	; 0x03
     784:	90 93 89 00 	sts	0x0089, r25
     788:	80 93 88 00 	sts	0x0088, r24
     78c:	05 c0       	rjmp	.+10     	; 0x798 <TIMER_SetCallBack+0x78>
			break;

			/* Handling of passing wrong E_INTERRUPT REQUEST */
			default:
				u8_Det = E_CHANNEL ;
     78e:	85 e1       	ldi	r24, 0x15	; 21
     790:	89 83       	std	Y+1, r24	; 0x01
     792:	02 c0       	rjmp	.+4      	; 0x798 <TIMER_SetCallBack+0x78>
		}
	}
	else
	{
		/* Handling of passing null pointer */
		u8_Det = E_NULL_PTR ;
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Det;
     798:	89 81       	ldd	r24, Y+1	; 0x01
}
     79a:	26 96       	adiw	r28, 0x06	; 6
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	08 95       	ret

000007ac <__vector_10>:
/* brief!  Timer_0 Output Compare Match interrupt handling                             */
/* param!  void                                                                        */
/* return! void                                                                        */
/***************************************************************************************/
ISR(TIMER0_COMP_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	2f 93       	push	r18
     7b8:	3f 93       	push	r19
     7ba:	4f 93       	push	r20
     7bc:	5f 93       	push	r21
     7be:	6f 93       	push	r22
     7c0:	7f 93       	push	r23
     7c2:	8f 93       	push	r24
     7c4:	9f 93       	push	r25
     7c6:	af 93       	push	r26
     7c8:	bf 93       	push	r27
     7ca:	ef 93       	push	r30
     7cc:	ff 93       	push	r31
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
	if (NULL != pfun_Timer_CallBack[TIMER0])
     7d6:	80 91 84 00 	lds	r24, 0x0084
     7da:	90 91 85 00 	lds	r25, 0x0085
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	29 f0       	breq	.+10     	; 0x7ec <__vector_10+0x40>
	{
		pfun_Timer_CallBack[TIMER0]();
     7e2:	e0 91 84 00 	lds	r30, 0x0084
     7e6:	f0 91 85 00 	lds	r31, 0x0085
     7ea:	09 95       	icall
	}
}
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <__vector_7>:
/* brief!  Timer_1 Output Compare A Match interrupt handling                           */
/* param!  void                                                                        */
/* return! void                                                                        */
/***************************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
	if (NULL != pfun_Timer_CallBack[TIMER1])
     83c:	80 91 86 00 	lds	r24, 0x0086
     840:	90 91 87 00 	lds	r25, 0x0087
     844:	00 97       	sbiw	r24, 0x00	; 0
     846:	29 f0       	breq	.+10     	; 0x852 <__vector_7+0x40>
	{
		pfun_Timer_CallBack[TIMER1]();
     848:	e0 91 86 00 	lds	r30, 0x0086
     84c:	f0 91 87 00 	lds	r31, 0x0087
     850:	09 95       	icall
	}
}
     852:	cf 91       	pop	r28
     854:	df 91       	pop	r29
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	0f 90       	pop	r0
     870:	0f be       	out	0x3f, r0	; 63
     872:	0f 90       	pop	r0
     874:	1f 90       	pop	r1
     876:	18 95       	reti

00000878 <__vector_4>:
/* brief!  Timer_2 Output Compare Match interrupt handling                             */
/* param!  void                                                                        */
/* return! void                                                                        */
/***************************************************************************************/
ISR(TIMER2_COMP_vect)
{
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	3f 93       	push	r19
     886:	4f 93       	push	r20
     888:	5f 93       	push	r21
     88a:	6f 93       	push	r22
     88c:	7f 93       	push	r23
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	af 93       	push	r26
     894:	bf 93       	push	r27
     896:	ef 93       	push	r30
     898:	ff 93       	push	r31
     89a:	df 93       	push	r29
     89c:	cf 93       	push	r28
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
	if (NULL != pfun_Timer_CallBack[TIMER2])
     8a2:	80 91 88 00 	lds	r24, 0x0088
     8a6:	90 91 89 00 	lds	r25, 0x0089
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	29 f0       	breq	.+10     	; 0x8b8 <__vector_4+0x40>
	{
		pfun_Timer_CallBack[TIMER2]();
     8ae:	e0 91 88 00 	lds	r30, 0x0088
     8b2:	f0 91 89 00 	lds	r31, 0x0089
     8b6:	09 95       	icall
	}
}
     8b8:	cf 91       	pop	r28
     8ba:	df 91       	pop	r29
     8bc:	ff 91       	pop	r31
     8be:	ef 91       	pop	r30
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	7f 91       	pop	r23
     8ca:	6f 91       	pop	r22
     8cc:	5f 91       	pop	r21
     8ce:	4f 91       	pop	r20
     8d0:	3f 91       	pop	r19
     8d2:	2f 91       	pop	r18
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <TIMER0_OVF>:

/**************************************************************************************************/
/* I use it in soft ICU todo */
void TIMER0_OVF(void)
{
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0,7);///////
     8e6:	a3 e5       	ldi	r26, 0x53	; 83
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e3 e5       	ldi	r30, 0x53	; 83
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	8f 77       	andi	r24, 0x7F	; 127
     8f2:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,6); // normal mode
     8f4:	a3 e5       	ldi	r26, 0x53	; 83
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e3 e5       	ldi	r30, 0x53	; 83
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	8f 7b       	andi	r24, 0xBF	; 191
     900:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,3);
     902:	a3 e5       	ldi	r26, 0x53	; 83
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	e3 e5       	ldi	r30, 0x53	; 83
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	87 7f       	andi	r24, 0xF7	; 247
     90e:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,5); //Normal port operation, OC0 disconnected.
     910:	a3 e5       	ldi	r26, 0x53	; 83
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e3 e5       	ldi	r30, 0x53	; 83
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	8f 7d       	andi	r24, 0xDF	; 223
     91c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,4);
     91e:	a3 e5       	ldi	r26, 0x53	; 83
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e3 e5       	ldi	r30, 0x53	; 83
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8f 7e       	andi	r24, 0xEF	; 239
     92a:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,2); //clk I/O (No prescaling)
     92c:	a3 e5       	ldi	r26, 0x53	; 83
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	e3 e5       	ldi	r30, 0x53	; 83
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8b 7f       	andi	r24, 0xFB	; 251
     938:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
     93a:	a3 e5       	ldi	r26, 0x53	; 83
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	e3 e5       	ldi	r30, 0x53	; 83
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	8d 7f       	andi	r24, 0xFD	; 253
     946:	8c 93       	st	X, r24
	SET_BIT  (TCCR0,0);
     948:	a3 e5       	ldi	r26, 0x53	; 83
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	e3 e5       	ldi	r30, 0x53	; 83
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	81 60       	ori	r24, 0x01	; 1
     954:	8c 93       	st	X, r24

	TCNT0=0;
     956:	e2 e5       	ldi	r30, 0x52	; 82
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	10 82       	st	Z, r1

	SET_BIT(TIMSK,0);
     95c:	a9 e5       	ldi	r26, 0x59	; 89
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	e9 e5       	ldi	r30, 0x59	; 89
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	81 60       	ori	r24, 0x01	; 1
     968:	8c 93       	st	X, r24

	SET_BIT(SREG,7);
     96a:	af e5       	ldi	r26, 0x5F	; 95
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	ef e5       	ldi	r30, 0x5F	; 95
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	80 68       	ori	r24, 0x80	; 128
     976:	8c 93       	st	X, r24

}
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	8f 93       	push	r24
     98a:	9f 93       	push	r25
     98c:	af 93       	push	r26
     98e:	bf 93       	push	r27
     990:	df 93       	push	r29
     992:	cf 93       	push	r28
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
	//cli();
	gu32_T0_OVF_Count++;
     998:	80 91 6e 00 	lds	r24, 0x006E
     99c:	90 91 6f 00 	lds	r25, 0x006F
     9a0:	a0 91 70 00 	lds	r26, 0x0070
     9a4:	b0 91 71 00 	lds	r27, 0x0071
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	a1 1d       	adc	r26, r1
     9ac:	b1 1d       	adc	r27, r1
     9ae:	80 93 6e 00 	sts	0x006E, r24
     9b2:	90 93 6f 00 	sts	0x006F, r25
     9b6:	a0 93 70 00 	sts	0x0070, r26
     9ba:	b0 93 71 00 	sts	0x0071, r27
	//sei();
}
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <Enable_CPU_Sleep>:
/* brief!  function that Enable MCU sleep mode    								       */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Enable_CPU_Sleep(void)
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
	/* Enable the sleep mode */
	SET_BIT(MCUCR, SE);
     9dc:	a5 e5       	ldi	r26, 0x55	; 85
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e5 e5       	ldi	r30, 0x55	; 85
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	80 68       	ori	r24, 0x80	; 128
     9e8:	8c 93       	st	X, r24
}
     9ea:	cf 91       	pop	r28
     9ec:	df 91       	pop	r29
     9ee:	08 95       	ret

000009f0 <Disable_CPU_Sleep>:
/* brief!  function that Disable MCU sleep mode                    					   */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Disable_CPU_Sleep(void)
{
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
	/* Disable the sleep mode */
	CLEAR_BIT(MCUCR, SE);
     9f8:	a5 e5       	ldi	r26, 0x55	; 85
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	e5 e5       	ldi	r30, 0x55	; 85
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8f 77       	andi	r24, 0x7F	; 127
     a04:	8c 93       	st	X, r24
}
     a06:	cf 91       	pop	r28
     a08:	df 91       	pop	r29
     a0a:	08 95       	ret

00000a0c <CPU_Sleep>:
/* brief!  function that make the MCU enter the chosen sleep mode 					   */
/* param!  u8 (i/p)chosen sleep mode                                                   */
/* return! void                                                                        */
/***************************************************************************************/
void CPU_Sleep(uint8_t au8_Sleep_Mode)
{
     a0c:	df 93       	push	r29
     a0e:	cf 93       	push	r28
     a10:	0f 92       	push	r0
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	89 83       	std	Y+1, r24	; 0x01
	if((CPU_IDLE <= au8_Sleep_Mode) && (CPU_EXTENDED_STANDBY >= au8_Sleep_Mode))
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	81 37       	cpi	r24, 0x71	; 113
     a1c:	78 f4       	brcc	.+30     	; 0xa3c <CPU_Sleep+0x30>
	{
		CLEAR_MASK(MCUCR, CPU_SLEEP_MASK);
     a1e:	a5 e5       	ldi	r26, 0x55	; 85
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e5 e5       	ldi	r30, 0x55	; 85
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8f 78       	andi	r24, 0x8F	; 143
     a2a:	8c 93       	st	X, r24
		SET_MASK(MCUCR, au8_Sleep_Mode);
     a2c:	a5 e5       	ldi	r26, 0x55	; 85
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e5 e5       	ldi	r30, 0x55	; 85
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	90 81       	ld	r25, Z
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	89 2b       	or	r24, r25
     a3a:	8c 93       	st	X, r24
	}
}
     a3c:	0f 90       	pop	r0
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	08 95       	ret

00000a44 <Enable_GlobalInterrupt>:
/* brief!  function that enable the global interrupt                                   */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Enable_GlobalInterrupt(void)
{
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Enable global interrupt
	*/
	SET_BIT(SREG, GI);
     a4c:	af e5       	ldi	r26, 0x5F	; 95
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ef e5       	ldi	r30, 0x5F	; 95
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	80 68       	ori	r24, 0x80	; 128
     a58:	8c 93       	st	X, r24
}
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <Disable_GlobalInterrupt>:
/* brief!  function that disable the global interrupt                                  */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Disable_GlobalInterrupt(void)
{
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Disable global interrupt
	*/
	CLEAR_BIT(SREG, GI);
     a68:	af e5       	ldi	r26, 0x5F	; 95
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ef e5       	ldi	r30, 0x5F	; 95
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	8f 77       	andi	r24, 0x7F	; 127
     a74:	8c 93       	st	X, r24
}
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <Ext_Inte_Init>:
/* param!  u8 (i/p) Interrupt request number                                           */
/* param!  u8 (i/p) Interrupt Sense Control                                            */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Ext_Inte_Init(uint8_t au8_Inte_RequestNum, uint8_t au8_InteSense_Control)
{
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	2b 97       	sbiw	r28, 0x0b	; 11
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	8a 83       	std	Y+2, r24	; 0x02
     a92:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
     a94:	19 82       	std	Y+1, r1	; 0x01
	switch(au8_Inte_RequestNum)
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	28 2f       	mov	r18, r24
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	3b 87       	std	Y+11, r19	; 0x0b
     a9e:	2a 87       	std	Y+10, r18	; 0x0a
     aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
     aa2:	9b 85       	ldd	r25, Y+11	; 0x0b
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	91 05       	cpc	r25, r1
     aa8:	09 f4       	brne	.+2      	; 0xaac <Ext_Inte_Init+0x30>
     aaa:	85 c0       	rjmp	.+266    	; 0xbb6 <Ext_Inte_Init+0x13a>
     aac:	2a 85       	ldd	r18, Y+10	; 0x0a
     aae:	3b 85       	ldd	r19, Y+11	; 0x0b
     ab0:	22 30       	cpi	r18, 0x02	; 2
     ab2:	31 05       	cpc	r19, r1
     ab4:	09 f4       	brne	.+2      	; 0xab8 <Ext_Inte_Init+0x3c>
     ab6:	f9 c0       	rjmp	.+498    	; 0xcaa <Ext_Inte_Init+0x22e>
     ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
     aba:	9b 85       	ldd	r25, Y+11	; 0x0b
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	09 f0       	breq	.+2      	; 0xac2 <Ext_Inte_Init+0x46>
     ac0:	31 c1       	rjmp	.+610    	; 0xd24 <Ext_Inte_Init+0x2a8>
	{
		case INTE_0:
			switch(au8_InteSense_Control)
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	28 2f       	mov	r18, r24
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	39 87       	std	Y+9, r19	; 0x09
     aca:	28 87       	std	Y+8, r18	; 0x08
     acc:	88 85       	ldd	r24, Y+8	; 0x08
     ace:	99 85       	ldd	r25, Y+9	; 0x09
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	91 05       	cpc	r25, r1
     ad4:	59 f1       	breq	.+86     	; 0xb2c <Ext_Inte_Init+0xb0>
     ad6:	28 85       	ldd	r18, Y+8	; 0x08
     ad8:	39 85       	ldd	r19, Y+9	; 0x09
     ada:	22 30       	cpi	r18, 0x02	; 2
     adc:	31 05       	cpc	r19, r1
     ade:	2c f4       	brge	.+10     	; 0xaea <Ext_Inte_Init+0x6e>
     ae0:	88 85       	ldd	r24, Y+8	; 0x08
     ae2:	99 85       	ldd	r25, Y+9	; 0x09
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	69 f0       	breq	.+26     	; 0xb02 <Ext_Inte_Init+0x86>
     ae8:	63 c0       	rjmp	.+198    	; 0xbb0 <Ext_Inte_Init+0x134>
     aea:	28 85       	ldd	r18, Y+8	; 0x08
     aec:	39 85       	ldd	r19, Y+9	; 0x09
     aee:	22 30       	cpi	r18, 0x02	; 2
     af0:	31 05       	cpc	r19, r1
     af2:	91 f1       	breq	.+100    	; 0xb58 <Ext_Inte_Init+0xdc>
     af4:	88 85       	ldd	r24, Y+8	; 0x08
     af6:	99 85       	ldd	r25, Y+9	; 0x09
     af8:	83 30       	cpi	r24, 0x03	; 3
     afa:	91 05       	cpc	r25, r1
     afc:	09 f4       	brne	.+2      	; 0xb00 <Ext_Inte_Init+0x84>
     afe:	42 c0       	rjmp	.+132    	; 0xb84 <Ext_Inte_Init+0x108>
     b00:	57 c0       	rjmp	.+174    	; 0xbb0 <Ext_Inte_Init+0x134>
			{
				case INTE0_LOW_LEVEL:

					CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     b02:	a5 e5       	ldi	r26, 0x55	; 85
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e5 e5       	ldi	r30, 0x55	; 85
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8c 7f       	andi	r24, 0xFC	; 252
     b0e:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE0_LOW_LEVEL);
     b10:	a5 e5       	ldi	r26, 0x55	; 85
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	e5 e5       	ldi	r30, 0x55	; 85
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	8c 93       	st	X, r24
					/* Enable External Interrupt_0 Request */
					SET_BIT(GICR, INT0);
     b1c:	ab e5       	ldi	r26, 0x5B	; 91
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	eb e5       	ldi	r30, 0x5B	; 91
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	80 64       	ori	r24, 0x40	; 64
     b28:	8c 93       	st	X, r24
     b2a:	fe c0       	rjmp	.+508    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				case INTE0_LOGICAL_CHANGE:

					CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     b2c:	a5 e5       	ldi	r26, 0x55	; 85
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e5 e5       	ldi	r30, 0x55	; 85
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8c 7f       	andi	r24, 0xFC	; 252
     b38:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE0_LOGICAL_CHANGE);
     b3a:	a5 e5       	ldi	r26, 0x55	; 85
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e5 e5       	ldi	r30, 0x55	; 85
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	8c 93       	st	X, r24
					/* Enable External Interrupt_0 Request */
					SET_BIT(GICR, INT0);
     b48:	ab e5       	ldi	r26, 0x5B	; 91
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	eb e5       	ldi	r30, 0x5B	; 91
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	80 64       	ori	r24, 0x40	; 64
     b54:	8c 93       	st	X, r24
     b56:	e8 c0       	rjmp	.+464    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				case INTE0_FALLING_EDGE:

					CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     b58:	a5 e5       	ldi	r26, 0x55	; 85
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e5 e5       	ldi	r30, 0x55	; 85
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8c 7f       	andi	r24, 0xFC	; 252
     b64:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE0_FALLING_EDGE);
     b66:	a5 e5       	ldi	r26, 0x55	; 85
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e5 e5       	ldi	r30, 0x55	; 85
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	8c 93       	st	X, r24
					/* Enable External Interrupt_0 Request */
					SET_BIT(GICR, INT0);
     b74:	ab e5       	ldi	r26, 0x5B	; 91
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	eb e5       	ldi	r30, 0x5B	; 91
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 64       	ori	r24, 0x40	; 64
     b80:	8c 93       	st	X, r24
     b82:	d2 c0       	rjmp	.+420    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				case INTE0_RISING_EDGE:

					CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     b84:	a5 e5       	ldi	r26, 0x55	; 85
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e5 e5       	ldi	r30, 0x55	; 85
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8c 7f       	andi	r24, 0xFC	; 252
     b90:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE0_RISING_EDGE);
     b92:	a5 e5       	ldi	r26, 0x55	; 85
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e5 e5       	ldi	r30, 0x55	; 85
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	83 60       	ori	r24, 0x03	; 3
     b9e:	8c 93       	st	X, r24
					/* Enable External Interrupt_0 Request */
					SET_BIT(GICR, INT0);
     ba0:	ab e5       	ldi	r26, 0x5B	; 91
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	eb e5       	ldi	r30, 0x5B	; 91
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	8c 93       	st	X, r24
     bae:	bc c0       	rjmp	.+376    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				default:
					/* Handling enter wrong interrupt sense control */
					au8_Det = E_INTE0_SENSE_CONTROL;
     bb0:	8a e2       	ldi	r24, 0x2A	; 42
     bb2:	89 83       	std	Y+1, r24	; 0x01
     bb4:	b9 c0       	rjmp	.+370    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;
			}
		break;

		case INTE_1:
			switch(au8_InteSense_Control)
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3f 83       	std	Y+7, r19	; 0x07
     bbe:	2e 83       	std	Y+6, r18	; 0x06
     bc0:	8e 81       	ldd	r24, Y+6	; 0x06
     bc2:	9f 81       	ldd	r25, Y+7	; 0x07
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	91 05       	cpc	r25, r1
     bc8:	59 f1       	breq	.+86     	; 0xc20 <Ext_Inte_Init+0x1a4>
     bca:	2e 81       	ldd	r18, Y+6	; 0x06
     bcc:	3f 81       	ldd	r19, Y+7	; 0x07
     bce:	25 30       	cpi	r18, 0x05	; 5
     bd0:	31 05       	cpc	r19, r1
     bd2:	2c f4       	brge	.+10     	; 0xbde <Ext_Inte_Init+0x162>
     bd4:	8e 81       	ldd	r24, Y+6	; 0x06
     bd6:	9f 81       	ldd	r25, Y+7	; 0x07
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	69 f0       	breq	.+26     	; 0xbf6 <Ext_Inte_Init+0x17a>
     bdc:	63 c0       	rjmp	.+198    	; 0xca4 <Ext_Inte_Init+0x228>
     bde:	2e 81       	ldd	r18, Y+6	; 0x06
     be0:	3f 81       	ldd	r19, Y+7	; 0x07
     be2:	28 30       	cpi	r18, 0x08	; 8
     be4:	31 05       	cpc	r19, r1
     be6:	91 f1       	breq	.+100    	; 0xc4c <Ext_Inte_Init+0x1d0>
     be8:	8e 81       	ldd	r24, Y+6	; 0x06
     bea:	9f 81       	ldd	r25, Y+7	; 0x07
     bec:	8c 30       	cpi	r24, 0x0C	; 12
     bee:	91 05       	cpc	r25, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <Ext_Inte_Init+0x178>
     bf2:	42 c0       	rjmp	.+132    	; 0xc78 <Ext_Inte_Init+0x1fc>
     bf4:	57 c0       	rjmp	.+174    	; 0xca4 <Ext_Inte_Init+0x228>
			{
				case INTE1_LOW_LEVEL:

					CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     bf6:	a5 e5       	ldi	r26, 0x55	; 85
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e5       	ldi	r30, 0x55	; 85
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	83 7f       	andi	r24, 0xF3	; 243
     c02:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE1_LOW_LEVEL);
     c04:	a5 e5       	ldi	r26, 0x55	; 85
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e5 e5       	ldi	r30, 0x55	; 85
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8c 93       	st	X, r24
					/* Enable External Interrupt_1 Request */
					SET_BIT(GICR, INT1);
     c10:	ab e5       	ldi	r26, 0x5B	; 91
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	eb e5       	ldi	r30, 0x5B	; 91
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 68       	ori	r24, 0x80	; 128
     c1c:	8c 93       	st	X, r24
     c1e:	84 c0       	rjmp	.+264    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				case INTE1_LOGICAL_CHANGE:

					CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     c20:	a5 e5       	ldi	r26, 0x55	; 85
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e5 e5       	ldi	r30, 0x55	; 85
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	83 7f       	andi	r24, 0xF3	; 243
     c2c:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE1_LOGICAL_CHANGE);
     c2e:	a5 e5       	ldi	r26, 0x55	; 85
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e5 e5       	ldi	r30, 0x55	; 85
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	84 60       	ori	r24, 0x04	; 4
     c3a:	8c 93       	st	X, r24
					/* Enable External Interrupt_1 Request */
					SET_BIT(GICR, INT1);
     c3c:	ab e5       	ldi	r26, 0x5B	; 91
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	eb e5       	ldi	r30, 0x5B	; 91
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 68       	ori	r24, 0x80	; 128
     c48:	8c 93       	st	X, r24
     c4a:	6e c0       	rjmp	.+220    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				case INTE1_FALLING_EDGE:

					CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     c4c:	a5 e5       	ldi	r26, 0x55	; 85
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e5 e5       	ldi	r30, 0x55	; 85
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	83 7f       	andi	r24, 0xF3	; 243
     c58:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE1_FALLING_EDGE);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 60       	ori	r24, 0x08	; 8
     c66:	8c 93       	st	X, r24
					/* Enable External Interrupt_1 Request */
					SET_BIT(GICR, INT1);
     c68:	ab e5       	ldi	r26, 0x5B	; 91
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	eb e5       	ldi	r30, 0x5B	; 91
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 68       	ori	r24, 0x80	; 128
     c74:	8c 93       	st	X, r24
     c76:	58 c0       	rjmp	.+176    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				case INTE1_RISING_EDGE:

					CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     c78:	a5 e5       	ldi	r26, 0x55	; 85
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e5 e5       	ldi	r30, 0x55	; 85
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	83 7f       	andi	r24, 0xF3	; 243
     c84:	8c 93       	st	X, r24
					SET_MASK(MCUCR, INTE1_RISING_EDGE);
     c86:	a5 e5       	ldi	r26, 0x55	; 85
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e5 e5       	ldi	r30, 0x55	; 85
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8c 60       	ori	r24, 0x0C	; 12
     c92:	8c 93       	st	X, r24
					/* Enable External Interrupt_1 Request */
					SET_BIT(GICR, INT1);
     c94:	ab e5       	ldi	r26, 0x5B	; 91
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	eb e5       	ldi	r30, 0x5B	; 91
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	8c 93       	st	X, r24
     ca2:	42 c0       	rjmp	.+132    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				default:
					/* Handling enter wrong interrupt sense control */
					au8_Det = E_INTE1_SENSE_CONTROL;
     ca4:	8b e2       	ldi	r24, 0x2B	; 43
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	3f c0       	rjmp	.+126    	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;
			}
		break;

		case INTE_2:
			switch(au8_InteSense_Control)
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	3d 83       	std	Y+5, r19	; 0x05
     cb2:	2c 83       	std	Y+4, r18	; 0x04
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	9d 81       	ldd	r25, Y+5	; 0x05
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	31 f0       	breq	.+12     	; 0xcc8 <Ext_Inte_Init+0x24c>
     cbc:	2c 81       	ldd	r18, Y+4	; 0x04
     cbe:	3d 81       	ldd	r19, Y+5	; 0x05
     cc0:	20 34       	cpi	r18, 0x40	; 64
     cc2:	31 05       	cpc	r19, r1
     cc4:	b1 f0       	breq	.+44     	; 0xcf2 <Ext_Inte_Init+0x276>
     cc6:	2b c0       	rjmp	.+86     	; 0xd1e <Ext_Inte_Init+0x2a2>
			{
				case INTE2_FALLING_EDGE:

					CLEAR_MASK(MCUCSR, INTE2_SENCE_MASK);
     cc8:	a4 e5       	ldi	r26, 0x54	; 84
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e4 e5       	ldi	r30, 0x54	; 84
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7b       	andi	r24, 0xBF	; 191
     cd4:	8c 93       	st	X, r24
					SET_MASK(MCUCSR, INTE2_FALLING_EDGE);
     cd6:	a4 e5       	ldi	r26, 0x54	; 84
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e4 e5       	ldi	r30, 0x54	; 84
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8c 93       	st	X, r24
					/* Enable External Interrupt_2 Request */
					SET_BIT(GICR, INT2);
     ce2:	ab e5       	ldi	r26, 0x5B	; 91
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	eb e5       	ldi	r30, 0x5B	; 91
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 62       	ori	r24, 0x20	; 32
     cee:	8c 93       	st	X, r24
     cf0:	1b c0       	rjmp	.+54     	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				case INTE2_RISING_EDGE:

					CLEAR_MASK(MCUCSR, INTE2_SENCE_MASK);
     cf2:	a4 e5       	ldi	r26, 0x54	; 84
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e5       	ldi	r30, 0x54	; 84
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 7b       	andi	r24, 0xBF	; 191
     cfe:	8c 93       	st	X, r24
					SET_MASK(MCUCSR, INTE2_RISING_EDGE);
     d00:	a4 e5       	ldi	r26, 0x54	; 84
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e4 e5       	ldi	r30, 0x54	; 84
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 64       	ori	r24, 0x40	; 64
     d0c:	8c 93       	st	X, r24
					/* Enable External Interrupt_2 Request */
					SET_BIT(GICR, INT2);
     d0e:	ab e5       	ldi	r26, 0x5B	; 91
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	eb e5       	ldi	r30, 0x5B	; 91
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 62       	ori	r24, 0x20	; 32
     d1a:	8c 93       	st	X, r24
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <Ext_Inte_Init+0x2ac>
				break;

				default:
					/* Handling enter wrong interrupt sense control */
					au8_Det = E_INTE2_SENSE_CONTROL;
     d1e:	8c e2       	ldi	r24, 0x2C	; 44
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <Ext_Inte_Init+0x2ac>
			}
		break;

		default:
			/* Handling enter wrong interrupt request */
			au8_Det = E_INTE_REQUEST;
     d24:	89 e2       	ldi	r24, 0x29	; 41
     d26:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	if(ERROR_OK == au8_Det)
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	88 23       	and	r24, r24
     d2c:	51 f4       	brne	.+20     	; 0xd42 <Ext_Inte_Init+0x2c6>
	{
		/*
		 *	Raise chosen Interrupt Init. Flag
		 */
		gau8_INTE_InitFlag[au8_Inte_RequestNum] = INTE_IS_INTIALIZED;
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	fc 01       	movw	r30, r24
     d36:	e0 57       	subi	r30, 0x70	; 112
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 83       	st	Z, r24
		/*
		 *	Enable global interrupt
		 */
		Enable_GlobalInterrupt();
     d3e:	0e 94 22 05 	call	0xa44	; 0xa44 <Enable_GlobalInterrupt>
	else
	{
		/* Do Nothing */
	}

	return au8_Det;
     d42:	89 81       	ldd	r24, Y+1	; 0x01
}
     d44:	2b 96       	adiw	r28, 0x0b	; 11
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <Ext_Inte_Deinit>:
/* brief!  function that deinitialize and the interrupt request                        */
/* param!  u8 (i/p) Interrupt request number                                           */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Ext_Inte_Deinit(uint8_t au8_Inte_RequestNum)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <Ext_Inte_Deinit+0x6>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <Ext_Inte_Deinit+0x8>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
     d64:	19 82       	std	Y+1, r1	; 0x01

	/* Making sure that the needed interrupt is Initialized */
	if( INTE_IS_INTIALIZED == gau8_INTE_InitFlag[au8_Inte_RequestNum])
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	fc 01       	movw	r30, r24
     d6e:	e0 57       	subi	r30, 0x70	; 112
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	80 81       	ld	r24, Z
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	a9 f5       	brne	.+106    	; 0xde2 <Ext_Inte_Deinit+0x8c>
	{
		switch(au8_Inte_RequestNum)
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3c 83       	std	Y+4, r19	; 0x04
     d80:	2b 83       	std	Y+3, r18	; 0x03
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	89 f0       	breq	.+34     	; 0xdae <Ext_Inte_Deinit+0x58>
     d8c:	2b 81       	ldd	r18, Y+3	; 0x03
     d8e:	3c 81       	ldd	r19, Y+4	; 0x04
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	31 05       	cpc	r19, r1
     d94:	a1 f0       	breq	.+40     	; 0xdbe <Ext_Inte_Deinit+0x68>
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	c1 f4       	brne	.+48     	; 0xdce <Ext_Inte_Deinit+0x78>
		{
			case INTE_0:
				/* Disable External Interrupt_0 Request */
				CLEAR_BIT(GICR, INT0);
     d9e:	ab e5       	ldi	r26, 0x5B	; 91
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	eb e5       	ldi	r30, 0x5B	; 91
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8f 7b       	andi	r24, 0xBF	; 191
     daa:	8c 93       	st	X, r24
     dac:	12 c0       	rjmp	.+36     	; 0xdd2 <Ext_Inte_Deinit+0x7c>
			break;

			case INTE_1:
				/* Disable External Interrupt_1 Request */
				CLEAR_BIT(GICR, INT1);
     dae:	ab e5       	ldi	r26, 0x5B	; 91
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	eb e5       	ldi	r30, 0x5B	; 91
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8f 77       	andi	r24, 0x7F	; 127
     dba:	8c 93       	st	X, r24
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <Ext_Inte_Deinit+0x7c>
			break;

			case INTE_2:
				/* Disable External Interrupt_2 Request */
				CLEAR_BIT(GICR, INT2);
     dbe:	ab e5       	ldi	r26, 0x5B	; 91
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	eb e5       	ldi	r30, 0x5B	; 91
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	8c 93       	st	X, r24
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <Ext_Inte_Deinit+0x7c>
			break;

			default:
				/* Handling enter wrong interrupt request */
				au8_Det = E_INTE_REQUEST;
     dce:	89 e2       	ldi	r24, 0x29	; 41
     dd0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		gau8_INTE_InitFlag[au8_Inte_RequestNum] = INTE_NOT_INTIALIZED;
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	e0 57       	subi	r30, 0x70	; 112
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	10 82       	st	Z, r1
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <Ext_Inte_Deinit+0x90>
	}
	else
	{
		au8_Det = E_INTE_NOT_INTIALIZED;
     de2:	8d e2       	ldi	r24, 0x2D	; 45
     de4:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Det;
     de6:	89 81       	ldd	r24, Y+1	; 0x01
}
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <Ext_Inte_ChangeSense_Control>:
/* param!  u8 (i/p) Interrupt request number                                           */
/* param!  u8 (i/p) Interrupt Sense Control                                            */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Ext_Inte_ChangeSense_Control(uint8_t au8_Inte_RequestNum, uint8_t au8_InteSense_Control)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	2b 97       	sbiw	r28, 0x0b	; 11
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	8a 83       	std	Y+2, r24	; 0x02
     e0c:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
     e0e:	19 82       	std	Y+1, r1	; 0x01

	/* Making sure that the needed interrupt is Initialized */
	if( INTE_IS_INTIALIZED == gau8_INTE_InitFlag[au8_Inte_RequestNum])
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	fc 01       	movw	r30, r24
     e18:	e0 57       	subi	r30, 0x70	; 112
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 81       	ld	r24, Z
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	09 f0       	breq	.+2      	; 0xe24 <Ext_Inte_ChangeSense_Control+0x2e>
     e22:	2c c1       	rjmp	.+600    	; 0x107c <Ext_Inte_ChangeSense_Control+0x286>
	{
		switch(au8_Inte_RequestNum)
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	3b 87       	std	Y+11, r19	; 0x0b
     e2c:	2a 87       	std	Y+10, r18	; 0x0a
     e2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e30:	9b 85       	ldd	r25, Y+11	; 0x0b
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	91 05       	cpc	r25, r1
     e36:	09 f4       	brne	.+2      	; 0xe3a <Ext_Inte_ChangeSense_Control+0x44>
     e38:	68 c0       	rjmp	.+208    	; 0xf0a <Ext_Inte_ChangeSense_Control+0x114>
     e3a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e3c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	09 f4       	brne	.+2      	; 0xe46 <Ext_Inte_ChangeSense_Control+0x50>
     e44:	bf c0       	rjmp	.+382    	; 0xfc4 <Ext_Inte_ChangeSense_Control+0x1ce>
     e46:	8a 85       	ldd	r24, Y+10	; 0x0a
     e48:	9b 85       	ldd	r25, Y+11	; 0x0b
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	09 f0       	breq	.+2      	; 0xe50 <Ext_Inte_ChangeSense_Control+0x5a>
     e4e:	13 c1       	rjmp	.+550    	; 0x1076 <Ext_Inte_ChangeSense_Control+0x280>
		{
			case INTE_0:
				/* choice the needed interrupt_0 Sense Control */
				switch(au8_InteSense_Control)
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	39 87       	std	Y+9, r19	; 0x09
     e58:	28 87       	std	Y+8, r18	; 0x08
     e5a:	88 85       	ldd	r24, Y+8	; 0x08
     e5c:	99 85       	ldd	r25, Y+9	; 0x09
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	19 f1       	breq	.+70     	; 0xeaa <Ext_Inte_ChangeSense_Control+0xb4>
     e64:	28 85       	ldd	r18, Y+8	; 0x08
     e66:	39 85       	ldd	r19, Y+9	; 0x09
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <Ext_Inte_ChangeSense_Control+0x82>
     e6e:	88 85       	ldd	r24, Y+8	; 0x08
     e70:	99 85       	ldd	r25, Y+9	; 0x09
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	61 f0       	breq	.+24     	; 0xe8e <Ext_Inte_ChangeSense_Control+0x98>
     e76:	46 c0       	rjmp	.+140    	; 0xf04 <Ext_Inte_ChangeSense_Control+0x10e>
     e78:	28 85       	ldd	r18, Y+8	; 0x08
     e7a:	39 85       	ldd	r19, Y+9	; 0x09
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	19 f1       	breq	.+70     	; 0xec8 <Ext_Inte_ChangeSense_Control+0xd2>
     e82:	88 85       	ldd	r24, Y+8	; 0x08
     e84:	99 85       	ldd	r25, Y+9	; 0x09
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	69 f1       	breq	.+90     	; 0xee6 <Ext_Inte_ChangeSense_Control+0xf0>
     e8c:	3b c0       	rjmp	.+118    	; 0xf04 <Ext_Inte_ChangeSense_Control+0x10e>
				{
					case INTE0_LOW_LEVEL:

						CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     e8e:	a5 e5       	ldi	r26, 0x55	; 85
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e5 e5       	ldi	r30, 0x55	; 85
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8c 7f       	andi	r24, 0xFC	; 252
     e9a:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE0_LOW_LEVEL);
     e9c:	a5 e5       	ldi	r26, 0x55	; 85
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e5 e5       	ldi	r30, 0x55	; 85
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8c 93       	st	X, r24
     ea8:	eb c0       	rjmp	.+470    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					case INTE0_LOGICAL_CHANGE:

						CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8c 7f       	andi	r24, 0xFC	; 252
     eb6:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE0_LOGICAL_CHANGE);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	8c 93       	st	X, r24
     ec6:	dc c0       	rjmp	.+440    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					case INTE0_FALLING_EDGE:

						CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     ec8:	a5 e5       	ldi	r26, 0x55	; 85
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e5 e5       	ldi	r30, 0x55	; 85
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8c 7f       	andi	r24, 0xFC	; 252
     ed4:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE0_FALLING_EDGE);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	8c 93       	st	X, r24
     ee4:	cd c0       	rjmp	.+410    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					case INTE0_RISING_EDGE:

						CLEAR_MASK(MCUCR, INTE0_SENCE_MASK);
     ee6:	a5 e5       	ldi	r26, 0x55	; 85
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e5       	ldi	r30, 0x55	; 85
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8c 7f       	andi	r24, 0xFC	; 252
     ef2:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE0_RISING_EDGE);
     ef4:	a5 e5       	ldi	r26, 0x55	; 85
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e5 e5       	ldi	r30, 0x55	; 85
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	83 60       	ori	r24, 0x03	; 3
     f00:	8c 93       	st	X, r24
     f02:	be c0       	rjmp	.+380    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					default:
						/* Handling enter wrong interrupt sense control */
						au8_Det = E_INTE0_SENSE_CONTROL;
     f04:	8a e2       	ldi	r24, 0x2A	; 42
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	bb c0       	rjmp	.+374    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
				}
			break;

			case INTE_1:
				/* choice the needed interrupt_1 Sense Control */
				switch(au8_InteSense_Control)
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	3f 83       	std	Y+7, r19	; 0x07
     f12:	2e 83       	std	Y+6, r18	; 0x06
     f14:	8e 81       	ldd	r24, Y+6	; 0x06
     f16:	9f 81       	ldd	r25, Y+7	; 0x07
     f18:	84 30       	cpi	r24, 0x04	; 4
     f1a:	91 05       	cpc	r25, r1
     f1c:	19 f1       	breq	.+70     	; 0xf64 <Ext_Inte_ChangeSense_Control+0x16e>
     f1e:	2e 81       	ldd	r18, Y+6	; 0x06
     f20:	3f 81       	ldd	r19, Y+7	; 0x07
     f22:	25 30       	cpi	r18, 0x05	; 5
     f24:	31 05       	cpc	r19, r1
     f26:	2c f4       	brge	.+10     	; 0xf32 <Ext_Inte_ChangeSense_Control+0x13c>
     f28:	8e 81       	ldd	r24, Y+6	; 0x06
     f2a:	9f 81       	ldd	r25, Y+7	; 0x07
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	61 f0       	breq	.+24     	; 0xf48 <Ext_Inte_ChangeSense_Control+0x152>
     f30:	46 c0       	rjmp	.+140    	; 0xfbe <Ext_Inte_ChangeSense_Control+0x1c8>
     f32:	2e 81       	ldd	r18, Y+6	; 0x06
     f34:	3f 81       	ldd	r19, Y+7	; 0x07
     f36:	28 30       	cpi	r18, 0x08	; 8
     f38:	31 05       	cpc	r19, r1
     f3a:	19 f1       	breq	.+70     	; 0xf82 <Ext_Inte_ChangeSense_Control+0x18c>
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	8c 30       	cpi	r24, 0x0C	; 12
     f42:	91 05       	cpc	r25, r1
     f44:	69 f1       	breq	.+90     	; 0xfa0 <Ext_Inte_ChangeSense_Control+0x1aa>
     f46:	3b c0       	rjmp	.+118    	; 0xfbe <Ext_Inte_ChangeSense_Control+0x1c8>
				{
					case INTE1_LOW_LEVEL:

						CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     f48:	a5 e5       	ldi	r26, 0x55	; 85
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e5       	ldi	r30, 0x55	; 85
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	83 7f       	andi	r24, 0xF3	; 243
     f54:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE1_LOW_LEVEL);
     f56:	a5 e5       	ldi	r26, 0x55	; 85
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e5       	ldi	r30, 0x55	; 85
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8c 93       	st	X, r24
     f62:	8e c0       	rjmp	.+284    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					case INTE1_LOGICAL_CHANGE:

						CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	83 7f       	andi	r24, 0xF3	; 243
     f70:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE1_LOGICAL_CHANGE);
     f72:	a5 e5       	ldi	r26, 0x55	; 85
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e5       	ldi	r30, 0x55	; 85
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	8c 93       	st	X, r24
     f80:	7f c0       	rjmp	.+254    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					case INTE1_FALLING_EDGE:

						CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     f82:	a5 e5       	ldi	r26, 0x55	; 85
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e5       	ldi	r30, 0x55	; 85
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	83 7f       	andi	r24, 0xF3	; 243
     f8e:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE1_FALLING_EDGE);
     f90:	a5 e5       	ldi	r26, 0x55	; 85
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e5       	ldi	r30, 0x55	; 85
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 60       	ori	r24, 0x08	; 8
     f9c:	8c 93       	st	X, r24
     f9e:	70 c0       	rjmp	.+224    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					case INTE1_RISING_EDGE:

						CLEAR_MASK(MCUCR, INTE1_SENCE_MASK);
     fa0:	a5 e5       	ldi	r26, 0x55	; 85
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e5       	ldi	r30, 0x55	; 85
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	83 7f       	andi	r24, 0xF3	; 243
     fac:	8c 93       	st	X, r24
						SET_MASK(MCUCR, INTE1_RISING_EDGE);
     fae:	a5 e5       	ldi	r26, 0x55	; 85
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e5       	ldi	r30, 0x55	; 85
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8c 60       	ori	r24, 0x0C	; 12
     fba:	8c 93       	st	X, r24
     fbc:	61 c0       	rjmp	.+194    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					default:
						/* Handling enter wrong interrupt sense control */
						au8_Det = E_INTE1_SENSE_CONTROL;
     fbe:	8b e2       	ldi	r24, 0x2B	; 43
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	5e c0       	rjmp	.+188    	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
				}
			break;

			case INTE_2:
				/* choice the needed interrupt_2 Sense Control */
				switch(au8_InteSense_Control)
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	3d 83       	std	Y+5, r19	; 0x05
     fcc:	2c 83       	std	Y+4, r18	; 0x04
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <Ext_Inte_ChangeSense_Control+0x1ec>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	20 34       	cpi	r18, 0x40	; 64
     fdc:	31 05       	cpc	r19, r1
     fde:	21 f1       	breq	.+72     	; 0x1028 <Ext_Inte_ChangeSense_Control+0x232>
     fe0:	47 c0       	rjmp	.+142    	; 0x1070 <Ext_Inte_ChangeSense_Control+0x27a>
				{
					case INTE2_FALLING_EDGE:

						/* Disable External Interrupt_2 Request */
						CLEAR_BIT(GICR, INT2);
     fe2:	ab e5       	ldi	r26, 0x5B	; 91
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb e5       	ldi	r30, 0x5B	; 91
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8f 7d       	andi	r24, 0xDF	; 223
     fee:	8c 93       	st	X, r24
						/*Clear INTE_1 Flag 1*/
						SET_BIT(GIFR, INTF2);
     ff0:	aa e5       	ldi	r26, 0x5A	; 90
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ea e5       	ldi	r30, 0x5A	; 90
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 62       	ori	r24, 0x20	; 32
     ffc:	8c 93       	st	X, r24

						CLEAR_MASK(MCUCSR, INTE2_SENCE_MASK);
     ffe:	a4 e5       	ldi	r26, 0x54	; 84
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e4 e5       	ldi	r30, 0x54	; 84
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 7b       	andi	r24, 0xBF	; 191
    100a:	8c 93       	st	X, r24
						SET_MASK(MCUCSR, INTE2_FALLING_EDGE);
    100c:	a4 e5       	ldi	r26, 0x54	; 84
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e4 e5       	ldi	r30, 0x54	; 84
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8c 93       	st	X, r24

						/* Enable External Interrupt_2 Request */
						SET_BIT(GICR, INT2);
    1018:	ab e5       	ldi	r26, 0x5B	; 91
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e5       	ldi	r30, 0x5B	; 91
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 62       	ori	r24, 0x20	; 32
    1024:	8c 93       	st	X, r24
    1026:	2c c0       	rjmp	.+88     	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					case INTE2_RISING_EDGE:

						/* Disable External Interrupt_2 Request */
						CLEAR_BIT(GICR, INT2);
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8c 93       	st	X, r24
						/*Clear INTE_1 Flag 1*/
						SET_BIT(GIFR, INTF2);
    1036:	aa e5       	ldi	r26, 0x5A	; 90
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ea e5       	ldi	r30, 0x5A	; 90
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	80 62       	ori	r24, 0x20	; 32
    1042:	8c 93       	st	X, r24

						CLEAR_MASK(MCUCSR, INTE2_SENCE_MASK);
    1044:	a4 e5       	ldi	r26, 0x54	; 84
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e4 e5       	ldi	r30, 0x54	; 84
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8f 7b       	andi	r24, 0xBF	; 191
    1050:	8c 93       	st	X, r24
						SET_MASK(MCUCSR, INTE2_RISING_EDGE);
    1052:	a4 e5       	ldi	r26, 0x54	; 84
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e4 e5       	ldi	r30, 0x54	; 84
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 64       	ori	r24, 0x40	; 64
    105e:	8c 93       	st	X, r24

						/* Enable External Interrupt_2 Request */
						SET_BIT(GICR, INT2);
    1060:	ab e5       	ldi	r26, 0x5B	; 91
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e5       	ldi	r30, 0x5B	; 91
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 62       	ori	r24, 0x20	; 32
    106c:	8c 93       	st	X, r24
    106e:	08 c0       	rjmp	.+16     	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
					break;

					default:
						/* Handling enter wrong interrupt sense control */
						au8_Det = E_INTE2_SENSE_CONTROL;
    1070:	8c e2       	ldi	r24, 0x2C	; 44
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
				}
			break;

			default:
				/* Handling enter wrong interrupt request */
				au8_Det = E_INTE_REQUEST;
    1076:	89 e2       	ldi	r24, 0x29	; 41
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <Ext_Inte_ChangeSense_Control+0x28a>
			break;
		}
	}
	else
	{
		au8_Det = E_INTE_NOT_INTIALIZED;
    107c:	8d e2       	ldi	r24, 0x2D	; 45
    107e:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Det;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
}
    1082:	2b 96       	adiw	r28, 0x0b	; 11
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <Int_SetCallBack>:
/* param!  pointer to function that will execute in the ISR                            */
/* param!  u8 (i/p) Interrupt Request Number                                           */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t Int_SetCallBack(pfunc_t pfun_Int_App, uint8_t au8_Inte_RequestNum)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <Int_SetCallBack+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <Int_SetCallBack+0x8>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9b 83       	std	Y+3, r25	; 0x03
    10a2:	8a 83       	std	Y+2, r24	; 0x02
    10a4:	6c 83       	std	Y+4, r22	; 0x04
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    10a6:	19 82       	std	Y+1, r1	; 0x01

	/* Making sure that the passed pointer is not a null pointer */
	if (NULL != pfun_Int_App)
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	99 f0       	breq	.+38     	; 0x10d6 <Int_SetCallBack+0x42>
	{
		if( (INTE_0 <= au8_Inte_RequestNum)&&(INTE_2 >= au8_Inte_RequestNum))
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	68 f4       	brcc	.+26     	; 0x10d0 <Int_SetCallBack+0x3c>
		{
			/* Interrupt scenario */
			pfun_Int_CallBack[au8_Inte_RequestNum] = pfun_Int_App;
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	fc 01       	movw	r30, r24
    10c2:	e6 57       	subi	r30, 0x76	; 118
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <Int_SetCallBack+0x46>
		}
		else
		{
			/* Handling of passing wrong E_INTERRUPT REQUEST */
			u8_Det = E_INTE_REQUEST ;
    10d0:	89 e2       	ldi	r24, 0x29	; 41
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <Int_SetCallBack+0x46>
		}
	}
	else
	{
		/* Handling of passing null pointer */
		u8_Det = E_NULL_PTR ;
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Det;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <__vector_1>:
/* brief!  Interrup_0  handler                                                         */
/* param!  void                                                                        */
/* return! void                                                                        */
/***************************************************************************************/
ISR(INT0_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	/* Making sure that the passed pointer is not a null pointer */
	if (NULL != pfun_Int_CallBack[INTE_0])
    1114:	80 91 8a 00 	lds	r24, 0x008A
    1118:	90 91 8b 00 	lds	r25, 0x008B
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	29 f0       	breq	.+10     	; 0x112a <__vector_1+0x40>
	{
		pfun_Int_CallBack[INTE_0]();
    1120:	e0 91 8a 00 	lds	r30, 0x008A
    1124:	f0 91 8b 00 	lds	r31, 0x008B
    1128:	09 95       	icall
	}
}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	0f 90       	pop	r0
    114c:	1f 90       	pop	r1
    114e:	18 95       	reti

00001150 <__vector_2>:
/* brief!  Interrup_1  handler                                                         */
/* param!  void                                                                        */
/* return! void                                                                        */
/***************************************************************************************/
ISR(INT1_vect)
{
    1150:	1f 92       	push	r1
    1152:	0f 92       	push	r0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	0f 92       	push	r0
    1158:	11 24       	eor	r1, r1
    115a:	2f 93       	push	r18
    115c:	3f 93       	push	r19
    115e:	4f 93       	push	r20
    1160:	5f 93       	push	r21
    1162:	6f 93       	push	r22
    1164:	7f 93       	push	r23
    1166:	8f 93       	push	r24
    1168:	9f 93       	push	r25
    116a:	af 93       	push	r26
    116c:	bf 93       	push	r27
    116e:	ef 93       	push	r30
    1170:	ff 93       	push	r31
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	/* Making sure that the passed pointer is not a null pointer */
	if (NULL != pfun_Int_CallBack[INTE_1])
    117a:	80 91 8c 00 	lds	r24, 0x008C
    117e:	90 91 8d 00 	lds	r25, 0x008D
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	29 f0       	breq	.+10     	; 0x1190 <__vector_2+0x40>
	{
		pfun_Int_CallBack[INTE_1]();
    1186:	e0 91 8c 00 	lds	r30, 0x008C
    118a:	f0 91 8d 00 	lds	r31, 0x008D
    118e:	09 95       	icall
	}
}
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_3>:
/* brief!  Interrup_2  handler                                                         */
/* param!  void                                                                        */
/* return! void                                                                        */
/***************************************************************************************/
ISR(INT2_vect)
{
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
	/* Making sure that the passed pointer is not a null pointer */
	if (NULL != pfun_Int_CallBack[INTE_2])
    11e0:	80 91 8e 00 	lds	r24, 0x008E
    11e4:	90 91 8f 00 	lds	r25, 0x008F
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	29 f0       	breq	.+10     	; 0x11f6 <__vector_3+0x40>
	{
		pfun_Int_CallBack[INTE_2]();
    11ec:	e0 91 8e 00 	lds	r30, 0x008E
    11f0:	f0 91 8f 00 	lds	r31, 0x008F
    11f4:	09 95       	icall
	}
}
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <DIO_INIT_Pin>:
/* Description! Interface to Set the direction of PIN                                  */
/* Input      ! Pin number, Desired Direction                            			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_INIT_Pin(uint8_t au8_PinNumberCpy, uint8_t au8_DirectionCpy)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_INIT_Pin+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_INIT_Pin+0x8>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <DIO_INIT_Pin+0xa>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Error = ERROR_NOK;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7)&&(au8_DirectionCpy >= INPUT_PIN)&&(au8_DirectionCpy <= OUTPUT_PIN) )
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	80 32       	cpi	r24, 0x20	; 32
    1236:	08 f0       	brcs	.+2      	; 0x123a <DIO_INIT_Pin+0x1e>
    1238:	d6 c0       	rjmp	.+428    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	08 f0       	brcs	.+2      	; 0x1242 <DIO_INIT_Pin+0x26>
    1240:	d2 c0       	rjmp	.+420    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
	{
		Error = ERROR_OK;
    1242:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	86 95       	lsr	r24
    1248:	86 95       	lsr	r24
    124a:	86 95       	lsr	r24
    124c:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	87 70       	andi	r24, 0x07	; 7
    1252:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3e 83       	std	Y+6, r19	; 0x06
    125c:	2d 83       	std	Y+5, r18	; 0x05
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <DIO_INIT_Pin+0x4e>
    1268:	41 c0       	rjmp	.+130    	; 0x12ec <DIO_INIT_Pin+0xd0>
    126a:	2d 81       	ldd	r18, Y+5	; 0x05
    126c:	3e 81       	ldd	r19, Y+6	; 0x06
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	2c f4       	brge	.+10     	; 0x127e <DIO_INIT_Pin+0x62>
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	71 f0       	breq	.+28     	; 0x1298 <DIO_INIT_Pin+0x7c>
    127c:	b4 c0       	rjmp	.+360    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
    127e:	2d 81       	ldd	r18, Y+5	; 0x05
    1280:	3e 81       	ldd	r19, Y+6	; 0x06
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <DIO_INIT_Pin+0x6e>
    1288:	5b c0       	rjmp	.+182    	; 0x1340 <DIO_INIT_Pin+0x124>
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	91 05       	cpc	r25, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <DIO_INIT_Pin+0x7a>
    1294:	7f c0       	rjmp	.+254    	; 0x1394 <DIO_INIT_Pin+0x178>
    1296:	a7 c0       	rjmp	.+334    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
		{
			case DIO_PORTA:
				if(au8_DirectionCpy==OUTPUT_PIN)
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	99 f4       	brne	.+38     	; 0x12c4 <DIO_INIT_Pin+0xa8>
				{
					SET_BIT(DDRA,au8_PinNumberCpy);
    129e:	aa e3       	ldi	r26, 0x3A	; 58
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ea e3       	ldi	r30, 0x3A	; 58
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	40 81       	ld	r20, Z
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_INIT_Pin+0x9e>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_INIT_Pin+0x9a>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	91 c0       	rjmp	.+290    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRA,au8_PinNumberCpy);
    12c4:	aa e3       	ldi	r26, 0x3A	; 58
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	ea e3       	ldi	r30, 0x3A	; 58
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	40 81       	ld	r20, Z
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_INIT_Pin+0xc4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_INIT_Pin+0xc0>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	7d c0       	rjmp	.+250    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTB:
				if(au8_DirectionCpy==OUTPUT_PIN)
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	99 f4       	brne	.+38     	; 0x1318 <DIO_INIT_Pin+0xfc>
				{
					SET_BIT(DDRB,au8_PinNumberCpy);
    12f2:	a7 e3       	ldi	r26, 0x37	; 55
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e7 e3       	ldi	r30, 0x37	; 55
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	40 81       	ld	r20, Z
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_INIT_Pin+0xf2>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_INIT_Pin+0xee>
    1312:	84 2b       	or	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	67 c0       	rjmp	.+206    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRB,au8_PinNumberCpy);
    1318:	a7 e3       	ldi	r26, 0x37	; 55
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e7 e3       	ldi	r30, 0x37	; 55
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	40 81       	ld	r20, Z
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_INIT_Pin+0x118>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_INIT_Pin+0x114>
    1338:	80 95       	com	r24
    133a:	84 23       	and	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	53 c0       	rjmp	.+166    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTC:
				if(au8_DirectionCpy==OUTPUT_PIN)
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	99 f4       	brne	.+38     	; 0x136c <DIO_INIT_Pin+0x150>
				{
					SET_BIT(DDRC,au8_PinNumberCpy);
    1346:	a4 e3       	ldi	r26, 0x34	; 52
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e4 e3       	ldi	r30, 0x34	; 52
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	40 81       	ld	r20, Z
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_INIT_Pin+0x146>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_INIT_Pin+0x142>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	3d c0       	rjmp	.+122    	; 0x13e6 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRC,au8_PinNumberCpy);
    136c:	a4 e3       	ldi	r26, 0x34	; 52
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	40 81       	ld	r20, Z
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_INIT_Pin+0x16c>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_INIT_Pin+0x168>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	29 c0       	rjmp	.+82     	; 0x13e6 <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTD:
				if(au8_DirectionCpy==OUTPUT_PIN)
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	99 f4       	brne	.+38     	; 0x13c0 <DIO_INIT_Pin+0x1a4>
				{
					SET_BIT(DDRD,au8_PinNumberCpy);
    139a:	a1 e3       	ldi	r26, 0x31	; 49
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e1 e3       	ldi	r30, 0x31	; 49
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	40 81       	ld	r20, Z
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_INIT_Pin+0x19a>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_INIT_Pin+0x196>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	13 c0       	rjmp	.+38     	; 0x13e6 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRD,au8_PinNumberCpy);
    13c0:	a1 e3       	ldi	r26, 0x31	; 49
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e1 e3       	ldi	r30, 0x31	; 49
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	40 81       	ld	r20, Z
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_INIT_Pin+0x1c0>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_INIT_Pin+0x1bc>
    13e0:	80 95       	com	r24
    13e2:	84 23       	and	r24, r20
    13e4:	8c 93       	st	X, r24
				}
			break;
		}
	}
	return Error;
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13e8:	26 96       	adiw	r28, 0x06	; 6
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <DIO_INIT_Port>:
/* Description! Interface to set port direction                                        */
/* Input      ! Port number , Desired Direction                                        */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_INIT_Port(uint8_t au8_PortNumberCpy,uint8_t au8_ValueCpy)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_INIT_Port+0x6>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <DIO_INIT_Port+0x8>
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA)&&(au8_PortNumberCpy <= DIO_PORTD)&&(au8_ValueCpy >= INPUT_PORT)&&(au8_ValueCpy <= OUTPUT_PORT) )
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	84 30       	cpi	r24, 0x04	; 4
    1414:	98 f5       	brcc	.+102    	; 0x147c <DIO_INIT_Port+0x82>
	{
		Error = ERROR_OK;
    1416:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	3d 83       	std	Y+5, r19	; 0x05
    1420:	2c 83       	std	Y+4, r18	; 0x04
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	d1 f0       	breq	.+52     	; 0x1460 <DIO_INIT_Port+0x66>
    142c:	2c 81       	ldd	r18, Y+4	; 0x04
    142e:	3d 81       	ldd	r19, Y+5	; 0x05
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	2c f4       	brge	.+10     	; 0x1440 <DIO_INIT_Port+0x46>
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	61 f0       	breq	.+24     	; 0x1456 <DIO_INIT_Port+0x5c>
    143e:	1e c0       	rjmp	.+60     	; 0x147c <DIO_INIT_Port+0x82>
    1440:	2c 81       	ldd	r18, Y+4	; 0x04
    1442:	3d 81       	ldd	r19, Y+5	; 0x05
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	81 f0       	breq	.+32     	; 0x146a <DIO_INIT_Port+0x70>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	81 f0       	breq	.+32     	; 0x1474 <DIO_INIT_Port+0x7a>
    1454:	13 c0       	rjmp	.+38     	; 0x147c <DIO_INIT_Port+0x82>
		{
			case DIO_PORTA:

				DDRA = au8_ValueCpy;
    1456:	ea e3       	ldi	r30, 0x3A	; 58
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	80 83       	st	Z, r24
    145e:	0e c0       	rjmp	.+28     	; 0x147c <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTB:

				DDRB = au8_ValueCpy;
    1460:	e7 e3       	ldi	r30, 0x37	; 55
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	80 83       	st	Z, r24
    1468:	09 c0       	rjmp	.+18     	; 0x147c <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTC:

				DDRC = au8_ValueCpy;
    146a:	e4 e3       	ldi	r30, 0x34	; 52
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	80 83       	st	Z, r24
    1472:	04 c0       	rjmp	.+8      	; 0x147c <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTD:

				DDRD = au8_ValueCpy;
    1474:	e1 e3       	ldi	r30, 0x31	; 49
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	80 83       	st	Z, r24
			break;
		}
	}
	return Error;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <DIO_Write_Pin>:
/* Description! Interface to set the Output value of the pin                           */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Write_Pin(uint8_t au8_PinNumberCpy,uint8_t au8_ValueCpy)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_Write_Pin+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_Write_Pin+0x8>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <DIO_Write_Pin+0xa>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	8b 83       	std	Y+3, r24	; 0x03
    149e:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Error = ERROR_NOK;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7)&&(au8_ValueCpy >= LOW_PIN)&&(au8_ValueCpy <= HIGH_PIN) )
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	80 32       	cpi	r24, 0x20	; 32
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <DIO_Write_Pin+0x1e>
    14aa:	d6 c0       	rjmp	.+428    	; 0x1658 <DIO_Write_Pin+0x1ca>
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <DIO_Write_Pin+0x26>
    14b2:	d2 c0       	rjmp	.+420    	; 0x1658 <DIO_Write_Pin+0x1ca>
	{
		Error = ERROR_OK;
    14b4:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	86 95       	lsr	r24
    14be:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	87 70       	andi	r24, 0x07	; 7
    14c4:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3e 83       	std	Y+6, r19	; 0x06
    14ce:	2d 83       	std	Y+5, r18	; 0x05
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <DIO_Write_Pin+0x4e>
    14da:	41 c0       	rjmp	.+130    	; 0x155e <DIO_Write_Pin+0xd0>
    14dc:	2d 81       	ldd	r18, Y+5	; 0x05
    14de:	3e 81       	ldd	r19, Y+6	; 0x06
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <DIO_Write_Pin+0x62>
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	71 f0       	breq	.+28     	; 0x150a <DIO_Write_Pin+0x7c>
    14ee:	b4 c0       	rjmp	.+360    	; 0x1658 <DIO_Write_Pin+0x1ca>
    14f0:	2d 81       	ldd	r18, Y+5	; 0x05
    14f2:	3e 81       	ldd	r19, Y+6	; 0x06
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <DIO_Write_Pin+0x6e>
    14fa:	5b c0       	rjmp	.+182    	; 0x15b2 <DIO_Write_Pin+0x124>
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <DIO_Write_Pin+0x7a>
    1506:	7f c0       	rjmp	.+254    	; 0x1606 <DIO_Write_Pin+0x178>
    1508:	a7 c0       	rjmp	.+334    	; 0x1658 <DIO_Write_Pin+0x1ca>
		{
			case DIO_PORTA:
				if(au8_ValueCpy==HIGH_PIN)
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	99 f4       	brne	.+38     	; 0x1536 <DIO_Write_Pin+0xa8>
				{
					SET_BIT(PORTA,au8_PinNumberCpy);
    1510:	ab e3       	ldi	r26, 0x3B	; 59
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e3       	ldi	r30, 0x3B	; 59
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	40 81       	ld	r20, Z
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_Write_Pin+0x9e>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_Write_Pin+0x9a>
    1530:	84 2b       	or	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	91 c0       	rjmp	.+290    	; 0x1658 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTA,au8_PinNumberCpy);
    1536:	ab e3       	ldi	r26, 0x3B	; 59
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e3       	ldi	r30, 0x3B	; 59
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	40 81       	ld	r20, Z
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_Write_Pin+0xc4>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_Write_Pin+0xc0>
    1556:	80 95       	com	r24
    1558:	84 23       	and	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	7d c0       	rjmp	.+250    	; 0x1658 <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTB:
				if(au8_ValueCpy==HIGH_PIN)
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	99 f4       	brne	.+38     	; 0x158a <DIO_Write_Pin+0xfc>
				{
					SET_BIT(PORTB,au8_PinNumberCpy);
    1564:	a8 e3       	ldi	r26, 0x38	; 56
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e8 e3       	ldi	r30, 0x38	; 56
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	40 81       	ld	r20, Z
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_Write_Pin+0xf2>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_Write_Pin+0xee>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	67 c0       	rjmp	.+206    	; 0x1658 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTB,au8_PinNumberCpy);
    158a:	a8 e3       	ldi	r26, 0x38	; 56
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	40 81       	ld	r20, Z
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_Write_Pin+0x118>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_Write_Pin+0x114>
    15aa:	80 95       	com	r24
    15ac:	84 23       	and	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	53 c0       	rjmp	.+166    	; 0x1658 <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTC:
				if(au8_ValueCpy==HIGH_PIN)
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	99 f4       	brne	.+38     	; 0x15de <DIO_Write_Pin+0x150>
				{
					SET_BIT(PORTC,au8_PinNumberCpy);
    15b8:	a5 e3       	ldi	r26, 0x35	; 53
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e5 e3       	ldi	r30, 0x35	; 53
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	40 81       	ld	r20, Z
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_Write_Pin+0x146>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_Write_Pin+0x142>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	3d c0       	rjmp	.+122    	; 0x1658 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTC,au8_PinNumberCpy);
    15de:	a5 e3       	ldi	r26, 0x35	; 53
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e3       	ldi	r30, 0x35	; 53
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	40 81       	ld	r20, Z
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_Write_Pin+0x16c>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_Write_Pin+0x168>
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	29 c0       	rjmp	.+82     	; 0x1658 <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTD:
				if(au8_ValueCpy==HIGH_PIN)
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	99 f4       	brne	.+38     	; 0x1632 <DIO_Write_Pin+0x1a4>
				{
					SET_BIT(PORTD,au8_PinNumberCpy);
    160c:	a2 e3       	ldi	r26, 0x32	; 50
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e2 e3       	ldi	r30, 0x32	; 50
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	40 81       	ld	r20, Z
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_Write_Pin+0x19a>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_Write_Pin+0x196>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	13 c0       	rjmp	.+38     	; 0x1658 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTD,au8_PinNumberCpy);
    1632:	a2 e3       	ldi	r26, 0x32	; 50
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e2 e3       	ldi	r30, 0x32	; 50
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	40 81       	ld	r20, Z
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_Write_Pin+0x1c0>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_Write_Pin+0x1bc>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
				}
				break;
		}
	}
	return Error;
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
}
    165a:	26 96       	adiw	r28, 0x06	; 6
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <DIO_Write_Port>:
/* Description! Interface to set the output value of port                              */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Write_Port(uint8_t au8_PortNumberCpy,uint8_t au8_ValueCpy)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <DIO_Write_Port+0x6>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <DIO_Write_Port+0x8>
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD)&&(au8_ValueCpy >= LOW_PORT)&&(au8_ValueCpy <= HIGH_PORT) )
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	98 f5       	brcc	.+102    	; 0x16ee <DIO_Write_Port+0x82>
	{
		Error = ERROR_OK;
    1688:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3d 83       	std	Y+5, r19	; 0x05
    1692:	2c 83       	std	Y+4, r18	; 0x04
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	d1 f0       	breq	.+52     	; 0x16d2 <DIO_Write_Port+0x66>
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <DIO_Write_Port+0x46>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <DIO_Write_Port+0x5c>
    16b0:	1e c0       	rjmp	.+60     	; 0x16ee <DIO_Write_Port+0x82>
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	81 f0       	breq	.+32     	; 0x16dc <DIO_Write_Port+0x70>
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	9d 81       	ldd	r25, Y+5	; 0x05
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	81 f0       	breq	.+32     	; 0x16e6 <DIO_Write_Port+0x7a>
    16c6:	13 c0       	rjmp	.+38     	; 0x16ee <DIO_Write_Port+0x82>
		{
			case DIO_PORTA:

				PORTA = au8_ValueCpy; // 3shan ana bn2l data msh bs 0 aw 1
    16c8:	eb e3       	ldi	r30, 0x3B	; 59
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	80 83       	st	Z, r24
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <DIO_Write_Port+0x82>
				break;

			case DIO_PORTB:

				PORTB = au8_ValueCpy;
    16d2:	e8 e3       	ldi	r30, 0x38	; 56
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	80 83       	st	Z, r24
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <DIO_Write_Port+0x82>
				break;

			case DIO_PORTC:

				PORTC = au8_ValueCpy;
    16dc:	e5 e3       	ldi	r30, 0x35	; 53
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	80 83       	st	Z, r24
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <DIO_Write_Port+0x82>
				break;

			case DIO_PORTD:

				PORTD = au8_ValueCpy;
    16e6:	e2 e3       	ldi	r30, 0x32	; 50
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <DIO_Read_Pin>:
/* Description! Interface to read an input digital pin                                 */
/* Input      ! Pin number                                               			   */
/* Output     ! uint8 contains the Pin value                                           */
/***************************************************************************************/
uint8_t DIO_Read_Pin(uint8_t au8_PinNumberCpy, uint8_t * pu8_PinValueCpy)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	27 97       	sbiw	r28, 0x07	; 7
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	7d 83       	std	Y+5, r23	; 0x05
    1718:	6c 83       	std	Y+4, r22	; 0x04

	uint8_t Error = ERROR_NOK;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	80 32       	cpi	r24, 0x20	; 32
    1722:	08 f0       	brcs	.+2      	; 0x1726 <DIO_Read_Pin+0x26>
    1724:	79 c0       	rjmp	.+242    	; 0x1818 <DIO_Read_Pin+0x118>
	{
		Error = ERROR_OK;
    1726:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	86 95       	lsr	r24
    172c:	86 95       	lsr	r24
    172e:	86 95       	lsr	r24
    1730:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	87 70       	andi	r24, 0x07	; 7
    1736:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3f 83       	std	Y+7, r19	; 0x07
    1740:	2e 83       	std	Y+6, r18	; 0x06
    1742:	4e 81       	ldd	r20, Y+6	; 0x06
    1744:	5f 81       	ldd	r21, Y+7	; 0x07
    1746:	41 30       	cpi	r20, 0x01	; 1
    1748:	51 05       	cpc	r21, r1
    174a:	59 f1       	breq	.+86     	; 0x17a2 <DIO_Read_Pin+0xa2>
    174c:	8e 81       	ldd	r24, Y+6	; 0x06
    174e:	9f 81       	ldd	r25, Y+7	; 0x07
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	91 05       	cpc	r25, r1
    1754:	34 f4       	brge	.+12     	; 0x1762 <DIO_Read_Pin+0x62>
    1756:	2e 81       	ldd	r18, Y+6	; 0x06
    1758:	3f 81       	ldd	r19, Y+7	; 0x07
    175a:	21 15       	cp	r18, r1
    175c:	31 05       	cpc	r19, r1
    175e:	69 f0       	breq	.+26     	; 0x177a <DIO_Read_Pin+0x7a>
    1760:	5b c0       	rjmp	.+182    	; 0x1818 <DIO_Read_Pin+0x118>
    1762:	4e 81       	ldd	r20, Y+6	; 0x06
    1764:	5f 81       	ldd	r21, Y+7	; 0x07
    1766:	42 30       	cpi	r20, 0x02	; 2
    1768:	51 05       	cpc	r21, r1
    176a:	79 f1       	breq	.+94     	; 0x17ca <DIO_Read_Pin+0xca>
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	9f 81       	ldd	r25, Y+7	; 0x07
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <DIO_Read_Pin+0x78>
    1776:	3d c0       	rjmp	.+122    	; 0x17f2 <DIO_Read_Pin+0xf2>
    1778:	4f c0       	rjmp	.+158    	; 0x1818 <DIO_Read_Pin+0x118>
		{
			case DIO_PORTA:

				*pu8_PinValueCpy = GET_BIT(PINA,au8_PinNumberCpy);
    177a:	e9 e3       	ldi	r30, 0x39	; 57
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_Read_Pin+0x92>
    178e:	55 95       	asr	r21
    1790:	47 95       	ror	r20
    1792:	8a 95       	dec	r24
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_Read_Pin+0x8e>
    1796:	ca 01       	movw	r24, r20
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	ec 81       	ldd	r30, Y+4	; 0x04
    179c:	fd 81       	ldd	r31, Y+5	; 0x05
    179e:	80 83       	st	Z, r24
    17a0:	3b c0       	rjmp	.+118    	; 0x1818 <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTB:

				*pu8_PinValueCpy = GET_BIT(PINB,au8_PinNumberCpy);
    17a2:	e6 e3       	ldi	r30, 0x36	; 54
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a9 01       	movw	r20, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_Read_Pin+0xba>
    17b6:	55 95       	asr	r21
    17b8:	47 95       	ror	r20
    17ba:	8a 95       	dec	r24
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_Read_Pin+0xb6>
    17be:	ca 01       	movw	r24, r20
    17c0:	81 70       	andi	r24, 0x01	; 1
    17c2:	ec 81       	ldd	r30, Y+4	; 0x04
    17c4:	fd 81       	ldd	r31, Y+5	; 0x05
    17c6:	80 83       	st	Z, r24
    17c8:	27 c0       	rjmp	.+78     	; 0x1818 <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTC:

				*pu8_PinValueCpy = GET_BIT(PINC,au8_PinNumberCpy);
    17ca:	e3 e3       	ldi	r30, 0x33	; 51
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a9 01       	movw	r20, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_Read_Pin+0xe2>
    17de:	55 95       	asr	r21
    17e0:	47 95       	ror	r20
    17e2:	8a 95       	dec	r24
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_Read_Pin+0xde>
    17e6:	ca 01       	movw	r24, r20
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	ec 81       	ldd	r30, Y+4	; 0x04
    17ec:	fd 81       	ldd	r31, Y+5	; 0x05
    17ee:	80 83       	st	Z, r24
    17f0:	13 c0       	rjmp	.+38     	; 0x1818 <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTD:

				*pu8_PinValueCpy = GET_BIT(PIND,au8_PinNumberCpy);
    17f2:	e0 e3       	ldi	r30, 0x30	; 48
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_Read_Pin+0x10a>
    1806:	55 95       	asr	r21
    1808:	47 95       	ror	r20
    180a:	8a 95       	dec	r24
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_Read_Pin+0x106>
    180e:	ca 01       	movw	r24, r20
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	ec 81       	ldd	r30, Y+4	; 0x04
    1814:	fd 81       	ldd	r31, Y+5	; 0x05
    1816:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
}
    181a:	27 96       	adiw	r28, 0x07	; 7
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <DIO_Read_Port>:
/* Description! Interface to get the input value on Port                               */
/* Input      ! Port number                                                            */
/* Output     ! Port Value                                                             */
/***************************************************************************************/
uint8_t DIO_Read_Port(uint8_t au8_PortNumberCpy, uint8_t * pu8_PortValueCpy)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_Read_Port+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_Read_Port+0x8>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <DIO_Read_Port+0xa>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	7c 83       	std	Y+4, r23	; 0x04
    183e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	89 83       	std	Y+1, r24	; 0x01
	if( (au8_PortNumberCpy >= DIO_PORTA)&&(au8_PortNumberCpy <= DIO_PORTD) )
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	d8 f5       	brcc	.+118    	; 0x18c0 <DIO_Read_Port+0x94>
	{
		Error = ERROR_OK;
    184a:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3e 83       	std	Y+6, r19	; 0x06
    1854:	2d 83       	std	Y+5, r18	; 0x05
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	91 05       	cpc	r25, r1
    185e:	e1 f0       	breq	.+56     	; 0x1898 <DIO_Read_Port+0x6c>
    1860:	2d 81       	ldd	r18, Y+5	; 0x05
    1862:	3e 81       	ldd	r19, Y+6	; 0x06
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	2c f4       	brge	.+10     	; 0x1874 <DIO_Read_Port+0x48>
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	61 f0       	breq	.+24     	; 0x188a <DIO_Read_Port+0x5e>
    1872:	26 c0       	rjmp	.+76     	; 0x18c0 <DIO_Read_Port+0x94>
    1874:	2d 81       	ldd	r18, Y+5	; 0x05
    1876:	3e 81       	ldd	r19, Y+6	; 0x06
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	a1 f0       	breq	.+40     	; 0x18a6 <DIO_Read_Port+0x7a>
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	91 05       	cpc	r25, r1
    1886:	b1 f0       	breq	.+44     	; 0x18b4 <DIO_Read_Port+0x88>
    1888:	1b c0       	rjmp	.+54     	; 0x18c0 <DIO_Read_Port+0x94>
		{
			case DIO_PORTA:

				*pu8_PortValueCpy = PINA;
    188a:	e9 e3       	ldi	r30, 0x39	; 57
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	eb 81       	ldd	r30, Y+3	; 0x03
    1892:	fc 81       	ldd	r31, Y+4	; 0x04
    1894:	80 83       	st	Z, r24
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <DIO_Read_Port+0x94>
			break;
			case DIO_PORTB:
				*pu8_PortValueCpy = PINB;
    1898:	e6 e3       	ldi	r30, 0x36	; 54
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	eb 81       	ldd	r30, Y+3	; 0x03
    18a0:	fc 81       	ldd	r31, Y+4	; 0x04
    18a2:	80 83       	st	Z, r24
    18a4:	0d c0       	rjmp	.+26     	; 0x18c0 <DIO_Read_Port+0x94>
			break;
			case DIO_PORTC:
				*pu8_PortValueCpy = PINC;
    18a6:	e3 e3       	ldi	r30, 0x33	; 51
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	eb 81       	ldd	r30, Y+3	; 0x03
    18ae:	fc 81       	ldd	r31, Y+4	; 0x04
    18b0:	80 83       	st	Z, r24
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <DIO_Read_Port+0x94>
			break;
			case DIO_PORTD:
				*pu8_PortValueCpy = PIND;
    18b4:	e0 e3       	ldi	r30, 0x30	; 48
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	eb 81       	ldd	r30, Y+3	; 0x03
    18bc:	fc 81       	ldd	r31, Y+4	; 0x04
    18be:	80 83       	st	Z, r24
			break;
		}
	}
	return Error;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c2:	26 96       	adiw	r28, 0x06	; 6
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <DIO_Pullup_Pin>:
/* Description! Interface to make pin Pullup                                           */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Pullup_Pin(uint8_t au8_PinNumberCpy)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <DIO_Pullup_Pin+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <DIO_Pullup_Pin+0x8>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Error = ERROR_NOK;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	80 32       	cpi	r24, 0x20	; 32
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <DIO_Pullup_Pin+0x1c>
    18ee:	73 c0       	rjmp	.+230    	; 0x19d6 <DIO_Pullup_Pin+0x102>
	{
		Error = ERROR_OK;
    18f0:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	86 95       	lsr	r24
    18f6:	86 95       	lsr	r24
    18f8:	86 95       	lsr	r24
    18fa:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	87 70       	andi	r24, 0x07	; 7
    1900:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	3d 83       	std	Y+5, r19	; 0x05
    190a:	2c 83       	std	Y+4, r18	; 0x04
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	91 05       	cpc	r25, r1
    1914:	41 f1       	breq	.+80     	; 0x1966 <DIO_Pullup_Pin+0x92>
    1916:	2c 81       	ldd	r18, Y+4	; 0x04
    1918:	3d 81       	ldd	r19, Y+5	; 0x05
    191a:	22 30       	cpi	r18, 0x02	; 2
    191c:	31 05       	cpc	r19, r1
    191e:	2c f4       	brge	.+10     	; 0x192a <DIO_Pullup_Pin+0x56>
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	61 f0       	breq	.+24     	; 0x1940 <DIO_Pullup_Pin+0x6c>
    1928:	56 c0       	rjmp	.+172    	; 0x19d6 <DIO_Pullup_Pin+0x102>
    192a:	2c 81       	ldd	r18, Y+4	; 0x04
    192c:	3d 81       	ldd	r19, Y+5	; 0x05
    192e:	22 30       	cpi	r18, 0x02	; 2
    1930:	31 05       	cpc	r19, r1
    1932:	61 f1       	breq	.+88     	; 0x198c <DIO_Pullup_Pin+0xb8>
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	9d 81       	ldd	r25, Y+5	; 0x05
    1938:	83 30       	cpi	r24, 0x03	; 3
    193a:	91 05       	cpc	r25, r1
    193c:	d1 f1       	breq	.+116    	; 0x19b2 <DIO_Pullup_Pin+0xde>
    193e:	4b c0       	rjmp	.+150    	; 0x19d6 <DIO_Pullup_Pin+0x102>
		{
			case DIO_PORTA:

				SET_BIT(PORTA,au8_PinNumberCpy);
    1940:	ab e3       	ldi	r26, 0x3B	; 59
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	eb e3       	ldi	r30, 0x3B	; 59
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	40 81       	ld	r20, Z
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_Pullup_Pin+0x88>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_Pullup_Pin+0x84>
    1960:	84 2b       	or	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	38 c0       	rjmp	.+112    	; 0x19d6 <DIO_Pullup_Pin+0x102>
				break;
			case DIO_PORTB:

				SET_BIT(PORTB,au8_PinNumberCpy);
    1966:	a8 e3       	ldi	r26, 0x38	; 56
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	40 81       	ld	r20, Z
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_Pullup_Pin+0xae>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_Pullup_Pin+0xaa>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	25 c0       	rjmp	.+74     	; 0x19d6 <DIO_Pullup_Pin+0x102>
				break;
			case DIO_PORTC:

				SET_BIT(PORTC,au8_PinNumberCpy);
    198c:	a5 e3       	ldi	r26, 0x35	; 53
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	40 81       	ld	r20, Z
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_Pullup_Pin+0xd4>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_Pullup_Pin+0xd0>
    19ac:	84 2b       	or	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	12 c0       	rjmp	.+36     	; 0x19d6 <DIO_Pullup_Pin+0x102>
				break;
			case DIO_PORTD:

				SET_BIT(PORTD,au8_PinNumberCpy);
    19b2:	a2 e3       	ldi	r26, 0x32	; 50
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e2 e3       	ldi	r30, 0x32	; 50
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	40 81       	ld	r20, Z
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_Pullup_Pin+0xfa>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_Pullup_Pin+0xf6>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <DIO_Pullup_Port>:
/* Description! Interface to make port Pullup                                          */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Pullup_Port(uint8_t au8_PortNumberCpy)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <DIO_Pullup_Port+0x6>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <DIO_Pullup_Port+0x8>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Error = ERROR_NOK;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD) )
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	98 f5       	brcc	.+102    	; 0x1a66 <DIO_Pullup_Port+0x7e>
	{
		Error = ERROR_OK;
    1a00:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	3c 83       	std	Y+4, r19	; 0x04
    1a0a:	2b 83       	std	Y+3, r18	; 0x03
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	d1 f0       	breq	.+52     	; 0x1a4a <DIO_Pullup_Port+0x62>
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <DIO_Pullup_Port+0x42>
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <DIO_Pullup_Port+0x58>
    1a28:	1e c0       	rjmp	.+60     	; 0x1a66 <DIO_Pullup_Port+0x7e>
    1a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	81 f0       	breq	.+32     	; 0x1a54 <DIO_Pullup_Port+0x6c>
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	81 f0       	breq	.+32     	; 0x1a5e <DIO_Pullup_Port+0x76>
    1a3e:	13 c0       	rjmp	.+38     	; 0x1a66 <DIO_Pullup_Port+0x7e>
		{
			case DIO_PORTA:

				PORTA = HIGH_PORT;
    1a40:	eb e3       	ldi	r30, 0x3B	; 59
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	80 83       	st	Z, r24
    1a48:	0e c0       	rjmp	.+28     	; 0x1a66 <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTB:

				PORTB = HIGH_PORT;
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	80 83       	st	Z, r24
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTC:

				PORTC = HIGH_PORT;
    1a54:	e5 e3       	ldi	r30, 0x35	; 53
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	80 83       	st	Z, r24
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTD:

				PORTD = HIGH_PORT;
    1a5e:	e2 e3       	ldi	r30, 0x32	; 50
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <DIO_Toggle_Pin>:
/* Description! Interface to Toggle the Output value of the pin                        */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Toggle_Pin(uint8_t au8_PinNumberCpy)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <DIO_Toggle_Pin+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <DIO_Toggle_Pin+0x8>
    1a7e:	0f 92       	push	r0
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Error = ERROR_NOK;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	80 32       	cpi	r24, 0x20	; 32
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <DIO_Toggle_Pin+0x1c>
    1a90:	73 c0       	rjmp	.+230    	; 0x1b78 <DIO_Toggle_Pin+0x102>
	{
		Error = ERROR_OK;
    1a92:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	86 95       	lsr	r24
    1a98:	86 95       	lsr	r24
    1a9a:	86 95       	lsr	r24
    1a9c:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	87 70       	andi	r24, 0x07	; 7
    1aa2:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	3d 83       	std	Y+5, r19	; 0x05
    1aac:	2c 83       	std	Y+4, r18	; 0x04
    1aae:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	41 f1       	breq	.+80     	; 0x1b08 <DIO_Toggle_Pin+0x92>
    1ab8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aba:	3d 81       	ldd	r19, Y+5	; 0x05
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <DIO_Toggle_Pin+0x56>
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	61 f0       	breq	.+24     	; 0x1ae2 <DIO_Toggle_Pin+0x6c>
    1aca:	56 c0       	rjmp	.+172    	; 0x1b78 <DIO_Toggle_Pin+0x102>
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	61 f1       	breq	.+88     	; 0x1b2e <DIO_Toggle_Pin+0xb8>
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	91 05       	cpc	r25, r1
    1ade:	d1 f1       	breq	.+116    	; 0x1b54 <DIO_Toggle_Pin+0xde>
    1ae0:	4b c0       	rjmp	.+150    	; 0x1b78 <DIO_Toggle_Pin+0x102>
		{
			case DIO_PORTA:
				TOGGLE_BIT(PORTA, au8_PinNumberCpy);
    1ae2:	ab e3       	ldi	r26, 0x3B	; 59
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	eb e3       	ldi	r30, 0x3B	; 59
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	40 81       	ld	r20, Z
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_Toggle_Pin+0x88>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_Toggle_Pin+0x84>
    1b02:	84 27       	eor	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	38 c0       	rjmp	.+112    	; 0x1b78 <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTB:
				TOGGLE_BIT(PORTB, au8_PinNumberCpy);
    1b08:	a8 e3       	ldi	r26, 0x38	; 56
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	40 81       	ld	r20, Z
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_Toggle_Pin+0xae>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_Toggle_Pin+0xaa>
    1b28:	84 27       	eor	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	25 c0       	rjmp	.+74     	; 0x1b78 <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTC:
				TOGGLE_BIT(PORTC, au8_PinNumberCpy);
    1b2e:	a5 e3       	ldi	r26, 0x35	; 53
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e3       	ldi	r30, 0x35	; 53
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	40 81       	ld	r20, Z
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <DIO_Toggle_Pin+0xd4>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <DIO_Toggle_Pin+0xd0>
    1b4e:	84 27       	eor	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	12 c0       	rjmp	.+36     	; 0x1b78 <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTD:
				TOGGLE_BIT(PORTD, au8_PinNumberCpy);
    1b54:	a2 e3       	ldi	r26, 0x32	; 50
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e2 e3       	ldi	r30, 0x32	; 50
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	40 81       	ld	r20, Z
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_Toggle_Pin+0xfa>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <DIO_Toggle_Pin+0xf6>
    1b74:	84 27       	eor	r24, r20
    1b76:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <DIO_Toggle_Port>:
/* Description! Interface to Toggle the output value of port                           */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Toggle_Port(uint8_t au8_PortNumberCpy)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <DIO_Toggle_Port+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <DIO_Toggle_Port+0x8>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Error = ERROR_NOK;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD) )
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	84 30       	cpi	r24, 0x04	; 4
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <DIO_Toggle_Port+0x1a>
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <DIO_Toggle_Port+0x98>
	{
		Error = ERROR_OK;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	3c 83       	std	Y+4, r19	; 0x04
    1bae:	2b 83       	std	Y+3, r18	; 0x03
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	e9 f0       	breq	.+58     	; 0x1bf4 <DIO_Toggle_Port+0x6a>
    1bba:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <DIO_Toggle_Port+0x44>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	61 f0       	breq	.+24     	; 0x1be4 <DIO_Toggle_Port+0x5a>
    1bcc:	2a c0       	rjmp	.+84     	; 0x1c22 <DIO_Toggle_Port+0x98>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	b1 f0       	breq	.+44     	; 0x1c04 <DIO_Toggle_Port+0x7a>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	83 30       	cpi	r24, 0x03	; 3
    1bde:	91 05       	cpc	r25, r1
    1be0:	c9 f0       	breq	.+50     	; 0x1c14 <DIO_Toggle_Port+0x8a>
    1be2:	1f c0       	rjmp	.+62     	; 0x1c22 <DIO_Toggle_Port+0x98>
		{
			case DIO_PORTA:
				TOGGLE_BYTE(PORTA);
    1be4:	ab e3       	ldi	r26, 0x3B	; 59
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	eb e3       	ldi	r30, 0x3B	; 59
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 95       	com	r24
    1bf0:	8c 93       	st	X, r24
    1bf2:	17 c0       	rjmp	.+46     	; 0x1c22 <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTB:
				TOGGLE_BYTE(PORTB);
    1bf4:	a8 e3       	ldi	r26, 0x38	; 56
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e8 e3       	ldi	r30, 0x38	; 56
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	80 95       	com	r24
    1c00:	8c 93       	st	X, r24
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTC:
				TOGGLE_BYTE(PORTC);
    1c04:	a5 e3       	ldi	r26, 0x35	; 53
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e5 e3       	ldi	r30, 0x35	; 53
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 95       	com	r24
    1c10:	8c 93       	st	X, r24
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTD:
				TOGGLE_BYTE(PORTD);
    1c14:	a2 e3       	ldi	r26, 0x32	; 50
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e2 e3       	ldi	r30, 0x32	; 50
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 95       	com	r24
    1c20:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <TMU_TIMER_CallBack>:
/* brief!  what ISR handling                                                           */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
static void TMU_TIMER_CallBack(void)
{
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	Disable_GlobalInterrupt();
    1c42:	0e 94 30 05 	call	0xa60	; 0xa60 <Disable_GlobalInterrupt>

	if (gu32_OVF_Multiple < ISR_RESET_FLAG)
    1c46:	80 91 9f 00 	lds	r24, 0x009F
    1c4a:	90 91 a0 00 	lds	r25, 0x00A0
    1c4e:	a0 91 a1 00 	lds	r26, 0x00A1
    1c52:	b0 91 a2 00 	lds	r27, 0x00A2
    1c56:	80 3a       	cpi	r24, 0xA0	; 160
    1c58:	26 e8       	ldi	r18, 0x86	; 134
    1c5a:	92 07       	cpc	r25, r18
    1c5c:	21 e0       	ldi	r18, 0x01	; 1
    1c5e:	a2 07       	cpc	r26, r18
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	b2 07       	cpc	r27, r18
    1c64:	a0 f4       	brcc	.+40     	; 0x1c8e <TMU_TIMER_CallBack+0x5c>
	{
		gu32_OVF_Multiple ++ ;
    1c66:	80 91 9f 00 	lds	r24, 0x009F
    1c6a:	90 91 a0 00 	lds	r25, 0x00A0
    1c6e:	a0 91 a1 00 	lds	r26, 0x00A1
    1c72:	b0 91 a2 00 	lds	r27, 0x00A2
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	a1 1d       	adc	r26, r1
    1c7a:	b1 1d       	adc	r27, r1
    1c7c:	80 93 9f 00 	sts	0x009F, r24
    1c80:	90 93 a0 00 	sts	0x00A0, r25
    1c84:	a0 93 a1 00 	sts	0x00A1, r26
    1c88:	b0 93 a2 00 	sts	0x00A2, r27
    1c8c:	0c c0       	rjmp	.+24     	; 0x1ca6 <TMU_TIMER_CallBack+0x74>
	}
	else
	{
		gu32_OVF_Multiple = 1U ;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	80 93 9f 00 	sts	0x009F, r24
    1c9a:	90 93 a0 00 	sts	0x00A0, r25
    1c9e:	a0 93 a1 00 	sts	0x00A1, r26
    1ca2:	b0 93 a2 00 	sts	0x00A2, r27
	}

/*TODO we already discussed this in the last meeting !! */
	for (gu8_ISR_Count = NULL ; gu8_ISR_Count < NUMBER_OF_EVENTS ; gu8_ISR_Count++)
    1ca6:	10 92 9b 00 	sts	0x009B, r1
    1caa:	4f c0       	rjmp	.+158    	; 0x1d4a <TMU_TIMER_CallBack+0x118>
	{
		if (NOT_YET == gastr_TMU_Events[gu8_ISR_Count].u8_TaskTerminate)
    1cac:	80 91 9b 00 	lds	r24, 0x009B
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	c9 01       	movw	r24, r18
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	82 0f       	add	r24, r18
    1cc4:	93 1f       	adc	r25, r19
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e7 55       	subi	r30, 0x57	; 87
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	b9 f5       	brne	.+110    	; 0x1d40 <TMU_TIMER_CallBack+0x10e>
		{
			if (NULL == gu32_OVF_Multiple % gastr_TMU_Events[gu8_ISR_Count].u32_TMU_Resolution)
    1cd2:	e0 90 9f 00 	lds	r14, 0x009F
    1cd6:	f0 90 a0 00 	lds	r15, 0x00A0
    1cda:	00 91 a1 00 	lds	r16, 0x00A1
    1cde:	10 91 a2 00 	lds	r17, 0x00A2
    1ce2:	80 91 9b 00 	lds	r24, 0x009B
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	c9 01       	movw	r24, r18
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	82 0f       	add	r24, r18
    1cfa:	93 1f       	adc	r25, r19
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	ed 55       	subi	r30, 0x5D	; 93
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	20 81       	ld	r18, Z
    1d04:	31 81       	ldd	r19, Z+1	; 0x01
    1d06:	42 81       	ldd	r20, Z+2	; 0x02
    1d08:	53 81       	ldd	r21, Z+3	; 0x03
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	a1 05       	cpc	r26, r1
    1d1a:	b1 05       	cpc	r27, r1
    1d1c:	89 f4       	brne	.+34     	; 0x1d40 <TMU_TIMER_CallBack+0x10e>
			{
				gastr_TMU_Events[gu8_ISR_Count].u8_Ready = READY ;
    1d1e:	80 91 9b 00 	lds	r24, 0x009B
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	c9 01       	movw	r24, r18
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	82 0f       	add	r24, r18
    1d36:	93 1f       	adc	r25, r19
    1d38:	fc 01       	movw	r30, r24
    1d3a:	e8 55       	subi	r30, 0x58	; 88
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	10 82       	st	Z, r1
	{
		gu32_OVF_Multiple = 1U ;
	}

/*TODO we already discussed this in the last meeting !! */
	for (gu8_ISR_Count = NULL ; gu8_ISR_Count < NUMBER_OF_EVENTS ; gu8_ISR_Count++)
    1d40:	80 91 9b 00 	lds	r24, 0x009B
    1d44:	8f 5f       	subi	r24, 0xFF	; 255
    1d46:	80 93 9b 00 	sts	0x009B, r24
    1d4a:	80 91 9b 00 	lds	r24, 0x009B
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	08 f4       	brcc	.+2      	; 0x1d54 <TMU_TIMER_CallBack+0x122>
    1d52:	ac cf       	rjmp	.-168    	; 0x1cac <TMU_TIMER_CallBack+0x7a>
			/*
			 * Do nothing The event is not ready
			 */
		}
	}
	Enable_GlobalInterrupt();
    1d54:	0e 94 22 05 	call	0xa44	; 0xa44 <Enable_GlobalInterrupt>
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	08 95       	ret

00001d66 <TMU_Init>:
/* brief!  TMU Initialization                                                          */
/* param!  (I/P) desired resolution in microseconds                                    */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t TMU_Init(uint32_t au32_Resolution)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	29 97       	sbiw	r28, 0x09	; 9
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	6e 83       	std	Y+6, r22	; 0x06
    1d7c:	7f 83       	std	Y+7, r23	; 0x07
    1d7e:	88 87       	std	Y+8, r24	; 0x08
    1d80:	99 87       	std	Y+9, r25	; 0x09
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    1d82:	19 82       	std	Y+1, r1	; 0x01

	/* A variable that will hold the time per tick for the chosen timer */
	uint32_t au32_TickTime = NULL ;
    1d84:	1a 82       	std	Y+2, r1	; 0x02
    1d86:	1b 82       	std	Y+3, r1	; 0x03
    1d88:	1c 82       	std	Y+4, r1	; 0x04
    1d8a:	1d 82       	std	Y+5, r1	; 0x05

	/*
	*	Calculating the minimum and maximum resolution for the chosen timer configuration
	*/
	gu32_MinResolution = ( (PRESCALE_VALUE) / FREQ_OVER_MICRO ) ;//todo TMU_Config.u8_PSC
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e0       	ldi	r26, 0x00	; 0
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	80 93 93 00 	sts	0x0093, r24
    1d98:	90 93 94 00 	sts	0x0094, r25
    1d9c:	a0 93 95 00 	sts	0x0095, r26
    1da0:	b0 93 96 00 	sts	0x0096, r27

	if (TIMER0 == TMU_Config.u8_Channel)
    1da4:	80 91 61 00 	lds	r24, 0x0061
    1da8:	88 23       	and	r24, r24
    1daa:	d9 f4       	brne	.+54     	; 0x1de2 <TMU_Init+0x7c>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER0_MAX_VALUE ;
    1dac:	80 91 93 00 	lds	r24, 0x0093
    1db0:	90 91 94 00 	lds	r25, 0x0094
    1db4:	a0 91 95 00 	lds	r26, 0x0095
    1db8:	b0 91 96 00 	lds	r27, 0x0096
    1dbc:	2f ef       	ldi	r18, 0xFF	; 255
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	80 93 97 00 	sts	0x0097, r24
    1dd4:	90 93 98 00 	sts	0x0098, r25
    1dd8:	a0 93 99 00 	sts	0x0099, r26
    1ddc:	b0 93 9a 00 	sts	0x009A, r27
    1de0:	40 c0       	rjmp	.+128    	; 0x1e62 <TMU_Init+0xfc>

	}
	else if(TIMER1 == TMU_Config.u8_Channel)
    1de2:	80 91 61 00 	lds	r24, 0x0061
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	d9 f4       	brne	.+54     	; 0x1e20 <TMU_Init+0xba>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER1_MAX_VALUE ;
    1dea:	80 91 93 00 	lds	r24, 0x0093
    1dee:	90 91 94 00 	lds	r25, 0x0094
    1df2:	a0 91 95 00 	lds	r26, 0x0095
    1df6:	b0 91 96 00 	lds	r27, 0x0096
    1dfa:	2f ef       	ldi	r18, 0xFF	; 255
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	80 93 97 00 	sts	0x0097, r24
    1e12:	90 93 98 00 	sts	0x0098, r25
    1e16:	a0 93 99 00 	sts	0x0099, r26
    1e1a:	b0 93 9a 00 	sts	0x009A, r27
    1e1e:	21 c0       	rjmp	.+66     	; 0x1e62 <TMU_Init+0xfc>
	}
	else if(TIMER2 == TMU_Config.u8_Channel)
    1e20:	80 91 61 00 	lds	r24, 0x0061
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	d9 f4       	brne	.+54     	; 0x1e5e <TMU_Init+0xf8>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER2_MAX_VALUE ;
    1e28:	80 91 93 00 	lds	r24, 0x0093
    1e2c:	90 91 94 00 	lds	r25, 0x0094
    1e30:	a0 91 95 00 	lds	r26, 0x0095
    1e34:	b0 91 96 00 	lds	r27, 0x0096
    1e38:	2f ef       	ldi	r18, 0xFF	; 255
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	80 93 97 00 	sts	0x0097, r24
    1e50:	90 93 98 00 	sts	0x0098, r25
    1e54:	a0 93 99 00 	sts	0x0099, r26
    1e58:	b0 93 9a 00 	sts	0x009A, r27
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <TMU_Init+0xfc>
	}
	else
	{
		/* Handling of entering wrong timer channel is already done in Timer_Init function in Timer.c */
		u8_Det = E_CHANNEL;
    1e5e:	85 e1       	ldi	r24, 0x15	; 21
    1e60:	89 83       	std	Y+1, r24	; 0x01

	/*
	*	Checking if the passed resolution is in the allowed range for the resolution
	*/

	if ((au32_Resolution >= gu32_MinResolution) && (au32_Resolution <= gu32_MaxResolution) && (ERROR_OK == u8_Det))
    1e62:	20 91 93 00 	lds	r18, 0x0093
    1e66:	30 91 94 00 	lds	r19, 0x0094
    1e6a:	40 91 95 00 	lds	r20, 0x0095
    1e6e:	50 91 96 00 	lds	r21, 0x0096
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	9f 81       	ldd	r25, Y+7	; 0x07
    1e76:	a8 85       	ldd	r26, Y+8	; 0x08
    1e78:	b9 85       	ldd	r27, Y+9	; 0x09
    1e7a:	82 17       	cp	r24, r18
    1e7c:	93 07       	cpc	r25, r19
    1e7e:	a4 07       	cpc	r26, r20
    1e80:	b5 07       	cpc	r27, r21
    1e82:	e8 f1       	brcs	.+122    	; 0x1efe <TMU_Init+0x198>
    1e84:	20 91 97 00 	lds	r18, 0x0097
    1e88:	30 91 98 00 	lds	r19, 0x0098
    1e8c:	40 91 99 00 	lds	r20, 0x0099
    1e90:	50 91 9a 00 	lds	r21, 0x009A
    1e94:	8e 81       	ldd	r24, Y+6	; 0x06
    1e96:	9f 81       	ldd	r25, Y+7	; 0x07
    1e98:	a8 85       	ldd	r26, Y+8	; 0x08
    1e9a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e9c:	28 17       	cp	r18, r24
    1e9e:	39 07       	cpc	r19, r25
    1ea0:	4a 07       	cpc	r20, r26
    1ea2:	5b 07       	cpc	r21, r27
    1ea4:	60 f1       	brcs	.+88     	; 0x1efe <TMU_Init+0x198>
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	88 23       	and	r24, r24
    1eaa:	49 f5       	brne	.+82     	; 0x1efe <TMU_Init+0x198>
	{
		/*
		*	Initializing the timer with the configuration defined in TMU_cfg.c
		*/
		Timer_Init(&TMU_Config);
    1eac:	81 e6       	ldi	r24, 0x61	; 97
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <Timer_Init>

		Timer_Get_Tick_Time(TMU_Config.u8_Channel , &au32_TickTime) ; /* Now au32_TickTime holds the value of tick time in nano seconds*/
    1eb4:	80 91 61 00 	lds	r24, 0x0061
    1eb8:	9e 01       	movw	r18, r28
    1eba:	2e 5f       	subi	r18, 0xFE	; 254
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	0e 94 3f 03 	call	0x67e	; 0x67e <Timer_Get_Tick_Time>

		//au32_TickTime /= RESOLUTION_IN_MICRO ; /* so we divide it by 1000 to get it in micro sec. */

		gu16_TicksCount = (au32_Resolution * RESOLUTION_IN_MICRO )/ au32_TickTime ;
    1ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec8:	a8 85       	ldd	r26, Y+8	; 0x08
    1eca:	b9 85       	ldd	r27, Y+9	; 0x09
    1ecc:	28 ee       	ldi	r18, 0xE8	; 232
    1ece:	33 e0       	ldi	r19, 0x03	; 3
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ee6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    1ef0:	da 01       	movw	r26, r20
    1ef2:	c9 01       	movw	r24, r18
    1ef4:	90 93 9d 00 	sts	0x009D, r25
    1ef8:	80 93 9c 00 	sts	0x009C, r24
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <TMU_Init+0x19c>
	}
	else
	{
		/* Handling of entering wrong resolution */
		u8_Det = E_RESOLUTION ;
    1efe:	89 e6       	ldi	r24, 0x69	; 105
    1f00:	89 83       	std	Y+1, r24	; 0x01
	}

	if (ERROR_OK == u8_Det)
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	88 23       	and	r24, r24
    1f06:	99 f4       	brne	.+38     	; 0x1f2e <TMU_Init+0x1c8>
	{
		gu8_TMU_InitFlag = E_TMU_INTIALIZED ;
    1f08:	8c e6       	ldi	r24, 0x6C	; 108
    1f0a:	80 93 60 00 	sts	0x0060, r24
		TIMER_SetCallBack(TMU_TIMER_CallBack, TMU_Config.u8_Channel);
    1f0e:	20 91 61 00 	lds	r18, 0x0061
    1f12:	89 e1       	ldi	r24, 0x19	; 25
    1f14:	9e e0       	ldi	r25, 0x0E	; 14
    1f16:	62 2f       	mov	r22, r18
    1f18:	0e 94 90 03 	call	0x720	; 0x720 <TIMER_SetCallBack>
		Timer_Start(TMU_Config.u8_Channel , gu16_TicksCount);
    1f1c:	80 91 61 00 	lds	r24, 0x0061
    1f20:	20 91 9c 00 	lds	r18, 0x009C
    1f24:	30 91 9d 00 	lds	r19, 0x009D
    1f28:	b9 01       	movw	r22, r18
    1f2a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Timer_Start>
	else
	{
			/* Do nothing */
	}

	return u8_Det ;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f30:	29 96       	adiw	r28, 0x09	; 9
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <TMU_Deinit>:
/* brief!  TMU Deinitialization                                                        */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t TMU_Deinit(void)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	0f 92       	push	r0
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    1f4c:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the TMU is Initialized
	*/
	if (E_TMU_INTIALIZED == gu8_TMU_InitFlag)
    1f4e:	80 91 60 00 	lds	r24, 0x0060
    1f52:	8c 36       	cpi	r24, 0x6C	; 108
    1f54:	49 f4       	brne	.+18     	; 0x1f68 <TMU_Deinit+0x26>
	{
		u8_Det = Timer_Stop(TMU_Config.u8_Channel);
    1f56:	80 91 61 00 	lds	r24, 0x0061
    1f5a:	0e 94 ce 02 	call	0x59c	; 0x59c <Timer_Stop>
    1f5e:	89 83       	std	Y+1, r24	; 0x01
		gu8_TMU_InitFlag = E_TMU_NOT_INTIALIZED;
    1f60:	8d e6       	ldi	r24, 0x6D	; 109
    1f62:	80 93 60 00 	sts	0x0060, r24
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <TMU_Deinit+0x2a>
	}
	else
	{
		/* Handling of Deinitialize TMU module before initialize it */
		u8_Det = E_TMU_NOT_INTIALIZED;
    1f68:	8d e6       	ldi	r24, 0x6D	; 109
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_Det ;
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <TMU_Start>:
/* param!  u32 (I/P) delay time before executing the desired function                  */
/* param!  u8 (I/P) user wants to execute this function periodically or one shot       */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t TMU_Start(u8_pfunc_t pfun_Timer_App, uint32_t au32_Resolution , uint8_t au8_Periodicity )
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	28 97       	sbiw	r28, 0x08	; 8
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	4c 83       	std	Y+4, r20	; 0x04
    1f90:	5d 83       	std	Y+5, r21	; 0x05
    1f92:	6e 83       	std	Y+6, r22	; 0x06
    1f94:	7f 83       	std	Y+7, r23	; 0x07
    1f96:	28 87       	std	Y+8, r18	; 0x08
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    1f98:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the TMU is Initialized
	*/
	if (E_TMU_INTIALIZED == gu8_TMU_InitFlag)
    1f9a:	80 91 60 00 	lds	r24, 0x0060
    1f9e:	8c 36       	cpi	r24, 0x6C	; 108
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <TMU_Start+0x2e>
    1fa2:	a9 c0       	rjmp	.+338    	; 0x20f6 <TMU_Start+0x180>
	{
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if (NULL != pfun_Timer_App )
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	09 f4       	brne	.+2      	; 0x1fae <TMU_Start+0x38>
    1fac:	a1 c0       	rjmp	.+322    	; 0x20f0 <TMU_Start+0x17a>
		{
			if ((au32_Resolution >= gu32_MinResolution) && (au32_Resolution <= gu32_MaxResolution))//why? todo
    1fae:	20 91 93 00 	lds	r18, 0x0093
    1fb2:	30 91 94 00 	lds	r19, 0x0094
    1fb6:	40 91 95 00 	lds	r20, 0x0095
    1fba:	50 91 96 00 	lds	r21, 0x0096
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc2:	ae 81       	ldd	r26, Y+6	; 0x06
    1fc4:	bf 81       	ldd	r27, Y+7	; 0x07
    1fc6:	82 17       	cp	r24, r18
    1fc8:	93 07       	cpc	r25, r19
    1fca:	a4 07       	cpc	r26, r20
    1fcc:	b5 07       	cpc	r27, r21
    1fce:	08 f4       	brcc	.+2      	; 0x1fd2 <TMU_Start+0x5c>
    1fd0:	8c c0       	rjmp	.+280    	; 0x20ea <TMU_Start+0x174>
    1fd2:	20 91 97 00 	lds	r18, 0x0097
    1fd6:	30 91 98 00 	lds	r19, 0x0098
    1fda:	40 91 99 00 	lds	r20, 0x0099
    1fde:	50 91 9a 00 	lds	r21, 0x009A
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	ae 81       	ldd	r26, Y+6	; 0x06
    1fe8:	bf 81       	ldd	r27, Y+7	; 0x07
    1fea:	28 17       	cp	r18, r24
    1fec:	39 07       	cpc	r19, r25
    1fee:	4a 07       	cpc	r20, r26
    1ff0:	5b 07       	cpc	r21, r27
    1ff2:	08 f4       	brcc	.+2      	; 0x1ff6 <TMU_Start+0x80>
    1ff4:	7a c0       	rjmp	.+244    	; 0x20ea <TMU_Start+0x174>
			{
				if ((PERIODIC == au8_Periodicity) || (ONE_SHOT == au8_Periodicity))
    1ff6:	88 85       	ldd	r24, Y+8	; 0x08
    1ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffa:	21 f0       	breq	.+8      	; 0x2004 <TMU_Start+0x8e>
    1ffc:	88 85       	ldd	r24, Y+8	; 0x08
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	09 f0       	breq	.+2      	; 0x2004 <TMU_Start+0x8e>
    2002:	70 c0       	rjmp	.+224    	; 0x20e4 <TMU_Start+0x16e>
				{
					/*
					*	Checking if the array o events "buffer" is full or not
					*/
					if(gu8_Free_Index < NUMBER_OF_EVENTS)
    2004:	80 91 9e 00 	lds	r24, 0x009E
    2008:	84 30       	cpi	r24, 0x04	; 4
    200a:	08 f0       	brcs	.+2      	; 0x200e <TMU_Start+0x98>
    200c:	68 c0       	rjmp	.+208    	; 0x20de <TMU_Start+0x168>
					{
						/*
						 *	Passing the event information to the events array
						 */
						gastr_TMU_Events[gu8_Free_Index].u32_TMU_Resolution = au32_Resolution ;
    200e:	80 91 9e 00 	lds	r24, 0x009E
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	c9 01       	movw	r24, r18
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	82 0f       	add	r24, r18
    2026:	93 1f       	adc	r25, r19
    2028:	fc 01       	movw	r30, r24
    202a:	ed 55       	subi	r30, 0x5D	; 93
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	9d 81       	ldd	r25, Y+5	; 0x05
    2032:	ae 81       	ldd	r26, Y+6	; 0x06
    2034:	bf 81       	ldd	r27, Y+7	; 0x07
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
						gastr_TMU_Events[gu8_Free_Index].u8_Periodicity = au8_Periodicity ;
    203e:	80 91 9e 00 	lds	r24, 0x009E
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	c9 01       	movw	r24, r18
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	82 0f       	add	r24, r18
    2056:	93 1f       	adc	r25, r19
    2058:	fc 01       	movw	r30, r24
    205a:	e9 55       	subi	r30, 0x59	; 89
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	88 85       	ldd	r24, Y+8	; 0x08
    2060:	80 83       	st	Z, r24
						gastr_TMU_Events[gu8_Free_Index].u8_Ready = NOT_READY ;
    2062:	80 91 9e 00 	lds	r24, 0x009E
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	c9 01       	movw	r24, r18
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	82 0f       	add	r24, r18
    207a:	93 1f       	adc	r25, r19
    207c:	fc 01       	movw	r30, r24
    207e:	e8 55       	subi	r30, 0x58	; 88
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 83       	st	Z, r24
						gastr_TMU_Events[gu8_Free_Index].u8_TaskTerminate = NOT_YET ;
    2086:	80 91 9e 00 	lds	r24, 0x009E
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	c9 01       	movw	r24, r18
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	82 0f       	add	r24, r18
    209e:	93 1f       	adc	r25, r19
    20a0:	fc 01       	movw	r30, r24
    20a2:	e7 55       	subi	r30, 0x57	; 87
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	80 83       	st	Z, r24
						gastr_TMU_Events[gu8_Free_Index].u8pfunc_Event = pfun_Timer_App ;
    20aa:	80 91 9e 00 	lds	r24, 0x009E
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	c9 01       	movw	r24, r18
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	82 0f       	add	r24, r18
    20c2:	93 1f       	adc	r25, r19
    20c4:	fc 01       	movw	r30, r24
    20c6:	e6 55       	subi	r30, 0x56	; 86
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	9b 81       	ldd	r25, Y+3	; 0x03
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24

						gu8_Free_Index ++ ; /* Increment the index to the next free element in the events array */
    20d2:	80 91 9e 00 	lds	r24, 0x009E
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	80 93 9e 00 	sts	0x009E, r24
    20dc:	0e c0       	rjmp	.+28     	; 0x20fa <TMU_Start+0x184>
					}
					else
					{
						/* Handling number of events limit*/
						u8_Det = E_NUMBER_OF_EVENTS ;
    20de:	8b e6       	ldi	r24, 0x6B	; 107
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	0b c0       	rjmp	.+22     	; 0x20fa <TMU_Start+0x184>
					}
				}
				else
				{
					/* Handling of entering wrong periodicity */
					u8_Det = E_PERIODICITY ;
    20e4:	85 e6       	ldi	r24, 0x65	; 101
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	08 c0       	rjmp	.+16     	; 0x20fa <TMU_Start+0x184>
				}
			}
			else
			{
				/* Entering delay doesn't match the defined limits */
				u8_Det = E_RESOLUTION ;
    20ea:	89 e6       	ldi	r24, 0x69	; 105
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	05 c0       	rjmp	.+10     	; 0x20fa <TMU_Start+0x184>
			}
		}
		else
		{
			/* Handling of entering null pointer*/
			u8_Det = E_NULL_PTR ;
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <TMU_Start+0x184>
		}
	}
	else
	{
		/* Handling of Start TMU module before initialize it */
		u8_Det = E_TMU_NOT_INTIALIZED;
    20f6:	8d e6       	ldi	r24, 0x6D	; 109
    20f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Det ;
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    20fc:	28 96       	adiw	r28, 0x08	; 8
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <TMU_Stop>:
/* brief!  Stops a certain event from being executed                                   */
/* param!  (I/P) pointer to function that is desired to be stopped                     */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t TMU_Stop(u8_pfunc_t pfun_Timer_App)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <TMU_Stop+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <TMU_Stop+0x8>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    211e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_Count = NULL ;
    2120:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the TMU is Initialized
	*/
	if (E_TMU_INTIALIZED == gu8_TMU_InitFlag)
    2122:	80 91 60 00 	lds	r24, 0x0060
    2126:	8c 36       	cpi	r24, 0x6C	; 108
    2128:	09 f0       	breq	.+2      	; 0x212c <TMU_Stop+0x1e>
    212a:	54 c0       	rjmp	.+168    	; 0x21d4 <TMU_Stop+0xc6>
	{
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if ( NULL != pfun_Timer_App )
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	09 f4       	brne	.+2      	; 0x2136 <TMU_Stop+0x28>
    2134:	4c c0       	rjmp	.+152    	; 0x21ce <TMU_Stop+0xc0>
		{
			for (au8_Count = NULL ; au8_Count < NUMBER_OF_EVENTS ; au8_Count ++)
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	45 c0       	rjmp	.+138    	; 0x21c4 <TMU_Stop+0xb6>
			{
				if (pfun_Timer_App == gastr_TMU_Events[au8_Count].u8pfunc_Event)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	c9 01       	movw	r24, r18
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	fc 01       	movw	r30, r24
    2154:	e6 55       	subi	r30, 0x56	; 86
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	20 81       	ld	r18, Z
    215a:	31 81       	ldd	r19, Z+1	; 0x01
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	28 17       	cp	r18, r24
    2162:	39 07       	cpc	r19, r25
    2164:	89 f4       	brne	.+34     	; 0x2188 <TMU_Stop+0x7a>
				{
					gastr_TMU_Events[au8_Count].u8_TaskTerminate = OK ;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	c9 01       	movw	r24, r18
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	82 0f       	add	r24, r18
    217c:	93 1f       	adc	r25, r19
    217e:	fc 01       	movw	r30, r24
    2180:	e7 55       	subi	r30, 0x57	; 87
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	10 82       	st	Z, r1
    2186:	1b c0       	rjmp	.+54     	; 0x21be <TMU_Stop+0xb0>
				}
				else if((pfun_Timer_App != gastr_TMU_Events[au8_Count].u8pfunc_Event)&&(au8_Count == NUMBER_OF_EVENTS -1U))
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	c9 01       	movw	r24, r18
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	82 0f       	add	r24, r18
    219e:	93 1f       	adc	r25, r19
    21a0:	fc 01       	movw	r30, r24
    21a2:	e6 55       	subi	r30, 0x56	; 86
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	20 81       	ld	r18, Z
    21a8:	31 81       	ldd	r19, Z+1	; 0x01
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	28 17       	cp	r18, r24
    21b0:	39 07       	cpc	r19, r25
    21b2:	29 f0       	breq	.+10     	; 0x21be <TMU_Stop+0xb0>
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	11 f4       	brne	.+4      	; 0x21be <TMU_Stop+0xb0>
				{
					/* Handling Wrong events */
					u8_Det = E_EVENT ;
    21ba:	8a e6       	ldi	r24, 0x6A	; 106
    21bc:	8a 83       	std	Y+2, r24	; 0x02
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if ( NULL != pfun_Timer_App )
		{
			for (au8_Count = NULL ; au8_Count < NUMBER_OF_EVENTS ; au8_Count ++)
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	8f 5f       	subi	r24, 0xFF	; 255
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	84 30       	cpi	r24, 0x04	; 4
    21c8:	08 f4       	brcc	.+2      	; 0x21cc <TMU_Stop+0xbe>
    21ca:	b7 cf       	rjmp	.-146    	; 0x213a <TMU_Stop+0x2c>
    21cc:	05 c0       	rjmp	.+10     	; 0x21d8 <TMU_Stop+0xca>
			}
		}
		else
		{
			/* Handling of passing null pointer */
			u8_Det = E_NULL_PTR ;
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	8a 83       	std	Y+2, r24	; 0x02
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <TMU_Stop+0xca>
		}
	}
	else
	{
		/* Handling of Stop TMU module before initialize it */
		u8_Det = E_TMU_NOT_INTIALIZED;
    21d4:	8d e6       	ldi	r24, 0x6D	; 109
    21d6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8_Det ;
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <TMU_Restart>:
/* brief!  Restart a certain event after it has been stopped                           */
/* param!  (I/P) pointer to function that is desired to be restart                     */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t TMU_Restart(u8_pfunc_t pfun_Timer_App)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <TMU_Restart+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <TMU_Restart+0x8>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    21f8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_Count = NULL ;
    21fa:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the TMU is Initialized
	*/
	if (E_TMU_INTIALIZED == gu8_TMU_InitFlag)
    21fc:	80 91 60 00 	lds	r24, 0x0060
    2200:	8c 36       	cpi	r24, 0x6C	; 108
    2202:	09 f0       	breq	.+2      	; 0x2206 <TMU_Restart+0x1e>
    2204:	55 c0       	rjmp	.+170    	; 0x22b0 <TMU_Restart+0xc8>
	{
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if (NULL != pfun_Timer_App)
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	09 f4       	brne	.+2      	; 0x2210 <TMU_Restart+0x28>
    220e:	4d c0       	rjmp	.+154    	; 0x22aa <TMU_Restart+0xc2>
		{
			for (au8_Count = NULL ; au8_Count < NUMBER_OF_EVENTS ; au8_Count ++)
    2210:	19 82       	std	Y+1, r1	; 0x01
    2212:	46 c0       	rjmp	.+140    	; 0x22a0 <TMU_Restart+0xb8>
			{
				if (pfun_Timer_App == gastr_TMU_Events[au8_Count].u8pfunc_Event)
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	c9 01       	movw	r24, r18
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	82 0f       	add	r24, r18
    222a:	93 1f       	adc	r25, r19
    222c:	fc 01       	movw	r30, r24
    222e:	e6 55       	subi	r30, 0x56	; 86
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	20 81       	ld	r18, Z
    2234:	31 81       	ldd	r19, Z+1	; 0x01
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	28 17       	cp	r18, r24
    223c:	39 07       	cpc	r19, r25
    223e:	91 f4       	brne	.+36     	; 0x2264 <TMU_Restart+0x7c>
				{
					gastr_TMU_Events[au8_Count].u8_TaskTerminate = NOT_YET ;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	c9 01       	movw	r24, r18
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	82 0f       	add	r24, r18
    2256:	93 1f       	adc	r25, r19
    2258:	fc 01       	movw	r30, r24
    225a:	e7 55       	subi	r30, 0x57	; 87
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	80 83       	st	Z, r24
    2262:	1b c0       	rjmp	.+54     	; 0x229a <TMU_Restart+0xb2>
				}
				else if((pfun_Timer_App != gastr_TMU_Events[au8_Count].u8pfunc_Event)&&(au8_Count == NUMBER_OF_EVENTS -1U))
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	c9 01       	movw	r24, r18
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	82 0f       	add	r24, r18
    227a:	93 1f       	adc	r25, r19
    227c:	fc 01       	movw	r30, r24
    227e:	e6 55       	subi	r30, 0x56	; 86
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	20 81       	ld	r18, Z
    2284:	31 81       	ldd	r19, Z+1	; 0x01
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	28 17       	cp	r18, r24
    228c:	39 07       	cpc	r19, r25
    228e:	29 f0       	breq	.+10     	; 0x229a <TMU_Restart+0xb2>
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	11 f4       	brne	.+4      	; 0x229a <TMU_Restart+0xb2>
				{
					/* Handling Wrong events */
					u8_Det = E_EVENT ;
    2296:	8a e6       	ldi	r24, 0x6A	; 106
    2298:	8a 83       	std	Y+2, r24	; 0x02
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if (NULL != pfun_Timer_App)
		{
			for (au8_Count = NULL ; au8_Count < NUMBER_OF_EVENTS ; au8_Count ++)
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	84 30       	cpi	r24, 0x04	; 4
    22a4:	08 f4       	brcc	.+2      	; 0x22a8 <TMU_Restart+0xc0>
    22a6:	b6 cf       	rjmp	.-148    	; 0x2214 <TMU_Restart+0x2c>
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <TMU_Restart+0xcc>
			}
		}
		else
		{
			/* Handling of passing null pointer */
			u8_Det = E_NULL_PTR ;
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	8a 83       	std	Y+2, r24	; 0x02
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <TMU_Restart+0xcc>
		}
	}
	else
	{
		/* Handling of Stop TMU module before initialize it */
		u8_Det = E_TMU_NOT_INTIALIZED;
    22b0:	8d e6       	ldi	r24, 0x6D	; 109
    22b2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8_Det ;
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <TMU_Dispatcher>:
/* brief!  TMU Manager                                                                 */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t TMU_Dispatcher(void)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <TMU_Dispatcher+0x6>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    22ce:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_Count = NULL ;
    22d0:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Execute Ready Events
	*/
	/*TODO please follow the last session to modifie your dispatcher */
	for (au8_Count = NULL ; au8_Count < NUMBER_OF_EVENTS ; au8_Count++)
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	5f c0       	rjmp	.+190    	; 0x2394 <TMU_Dispatcher+0xd0>
	{
		if (READY == gastr_TMU_Events[au8_Count].u8_Ready )
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	c9 01       	movw	r24, r18
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	82 0f       	add	r24, r18
    22ec:	93 1f       	adc	r25, r19
    22ee:	fc 01       	movw	r30, r24
    22f0:	e8 55       	subi	r30, 0x58	; 88
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	88 23       	and	r24, r24
    22f8:	09 f0       	breq	.+2      	; 0x22fc <TMU_Dispatcher+0x38>
    22fa:	49 c0       	rjmp	.+146    	; 0x238e <TMU_Dispatcher+0xca>
		{
			gastr_TMU_Events[au8_Count].u8pfunc_Event();
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	c9 01       	movw	r24, r18
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	82 0f       	add	r24, r18
    2312:	93 1f       	adc	r25, r19
    2314:	fc 01       	movw	r30, r24
    2316:	e6 55       	subi	r30, 0x56	; 86
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	01 90       	ld	r0, Z+
    231c:	f0 81       	ld	r31, Z
    231e:	e0 2d       	mov	r30, r0
    2320:	09 95       	icall
			gastr_TMU_Events[au8_Count].u8_Ready = NOT_READY ;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	c9 01       	movw	r24, r18
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	82 0f       	add	r24, r18
    2338:	93 1f       	adc	r25, r19
    233a:	fc 01       	movw	r30, r24
    233c:	e8 55       	subi	r30, 0x58	; 88
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	80 83       	st	Z, r24

			if (ONE_SHOT == gastr_TMU_Events[au8_Count].u8_Periodicity)
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	c9 01       	movw	r24, r18
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	82 0f       	add	r24, r18
    235a:	93 1f       	adc	r25, r19
    235c:	fc 01       	movw	r30, r24
    235e:	e9 55       	subi	r30, 0x59	; 89
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 81       	ld	r24, Z
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	99 f4       	brne	.+38     	; 0x238e <TMU_Dispatcher+0xca>
			{
				TMU_Stop(gastr_TMU_Events[au8_Count].u8pfunc_Event);
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	c9 01       	movw	r24, r18
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	88 0f       	add	r24, r24
    2376:	99 1f       	adc	r25, r25
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
    2380:	fc 01       	movw	r30, r24
    2382:	e6 55       	subi	r30, 0x56	; 86
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	0e 94 87 10 	call	0x210e	; 0x210e <TMU_Stop>

	/*
	*	Execute Ready Events
	*/
	/*TODO please follow the last session to modifie your dispatcher */
	for (au8_Count = NULL ; au8_Count < NUMBER_OF_EVENTS ; au8_Count++)
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	08 f4       	brcc	.+2      	; 0x239c <TMU_Dispatcher+0xd8>
    239a:	9d cf       	rjmp	.-198    	; 0x22d6 <TMU_Dispatcher+0x12>
			/*
			 * Do nothing If Event not Ready
			 */
		}
	}
	return u8_Det ;
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <SOS_TIMER_CallBack>:
/* brief!  what ISR handling                                                           */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
static void SOS_TIMER_CallBack(void)
{
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	0f 92       	push	r0
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
	Disable_GlobalInterrupt();
    23ba:	0e 94 30 05 	call	0xa60	; 0xa60 <Disable_GlobalInterrupt>
	/*
	 *	variable that will hold the ISR count
	 */
	uint8_t gu8_ISR_Count = NULL ;
    23be:	19 82       	std	Y+1, r1	; 0x01

	switch(gu32_SOS_Ticks_Num)
    23c0:	80 91 d2 00 	lds	r24, 0x00D2
    23c4:	90 91 d3 00 	lds	r25, 0x00D3
    23c8:	a0 91 d4 00 	lds	r26, 0x00D4
    23cc:	b0 91 d5 00 	lds	r27, 0x00D5
    23d0:	80 3a       	cpi	r24, 0xA0	; 160
    23d2:	26 e8       	ldi	r18, 0x86	; 134
    23d4:	92 07       	cpc	r25, r18
    23d6:	21 e0       	ldi	r18, 0x01	; 1
    23d8:	a2 07       	cpc	r26, r18
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	b2 07       	cpc	r27, r18
    23de:	69 f4       	brne	.+26     	; 0x23fa <SOS_TIMER_CallBack+0x52>
	{
		case SOS_ISR_RESET_FLAG:
			gu32_SOS_Ticks_Num = SOS_ISR_RESET_VALUE ;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	80 93 d2 00 	sts	0x00D2, r24
    23ec:	90 93 d3 00 	sts	0x00D3, r25
    23f0:	a0 93 d4 00 	sts	0x00D4, r26
    23f4:	b0 93 d5 00 	sts	0x00D5, r27
    23f8:	13 c0       	rjmp	.+38     	; 0x2420 <SOS_TIMER_CallBack+0x78>
		break;

		default:
			gu32_SOS_Ticks_Num ++ ;
    23fa:	80 91 d2 00 	lds	r24, 0x00D2
    23fe:	90 91 d3 00 	lds	r25, 0x00D3
    2402:	a0 91 d4 00 	lds	r26, 0x00D4
    2406:	b0 91 d5 00 	lds	r27, 0x00D5
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	a1 1d       	adc	r26, r1
    240e:	b1 1d       	adc	r27, r1
    2410:	80 93 d2 00 	sts	0x00D2, r24
    2414:	90 93 d3 00 	sts	0x00D3, r25
    2418:	a0 93 d4 00 	sts	0x00D4, r26
    241c:	b0 93 d5 00 	sts	0x00D5, r27
		break;
	}

	/* loop on the tasks buffer to check if any task become ready */
	for (gu8_ISR_Count = NULL ; gu8_ISR_Count < gu8_Buffer_Index ; gu8_ISR_Count++)
    2420:	19 82       	std	Y+1, r1	; 0x01
    2422:	38 c0       	rjmp	.+112    	; 0x2494 <SOS_TIMER_CallBack+0xec>
	{
		/* make the task ready if it's meet her time */
		switch(gu32_SOS_Ticks_Num % gastr_SOS_Tasks[gu8_ISR_Count].u32_SOS_Ticks_Num)
    2424:	e0 90 d2 00 	lds	r14, 0x00D2
    2428:	f0 90 d3 00 	lds	r15, 0x00D3
    242c:	00 91 d4 00 	lds	r16, 0x00D4
    2430:	10 91 d5 00 	lds	r17, 0x00D5
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	c9 01       	movw	r24, r18
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	82 0f       	add	r24, r18
    244a:	93 1f       	adc	r25, r19
    244c:	fc 01       	movw	r30, r24
    244e:	ea 52       	subi	r30, 0x2A	; 42
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	20 81       	ld	r18, Z
    2454:	31 81       	ldd	r19, Z+1	; 0x01
    2456:	42 81       	ldd	r20, Z+2	; 0x02
    2458:	53 81       	ldd	r21, Z+3	; 0x03
    245a:	c8 01       	movw	r24, r16
    245c:	b7 01       	movw	r22, r14
    245e:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	a1 05       	cpc	r26, r1
    246a:	b1 05       	cpc	r27, r1
    246c:	81 f4       	brne	.+32     	; 0x248e <SOS_TIMER_CallBack+0xe6>
		{
			case NULL:
				gastr_SOS_Tasks[gu8_ISR_Count].u8_TaskState = READY ;
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	c9 01       	movw	r24, r18
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	82 0f       	add	r24, r18
    2484:	93 1f       	adc	r25, r19
    2486:	fc 01       	movw	r30, r24
    2488:	e4 52       	subi	r30, 0x24	; 36
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	10 82       	st	Z, r1
			gu32_SOS_Ticks_Num ++ ;
		break;
	}

	/* loop on the tasks buffer to check if any task become ready */
	for (gu8_ISR_Count = NULL ; gu8_ISR_Count < gu8_Buffer_Index ; gu8_ISR_Count++)
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	8f 5f       	subi	r24, 0xFF	; 255
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	90 91 d1 00 	lds	r25, 0x00D1
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	89 17       	cp	r24, r25
    249c:	18 f2       	brcs	.-122    	; 0x2424 <SOS_TIMER_CallBack+0x7c>
			default:
				/* Do nothing */
			break;
		}
	}
	Enable_GlobalInterrupt();
    249e:	0e 94 22 05 	call	0xa44	; 0xa44 <Enable_GlobalInterrupt>
}
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	ff 90       	pop	r15
    24ae:	ef 90       	pop	r14
    24b0:	08 95       	ret

000024b2 <SOS_Init>:
/* brief!  SOS Initialization                                                          */
/* param!  (I/P) desired resolution in microseconds                                    */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t SOS_Init(uint32_t au32_TicksNum)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	29 97       	sbiw	r28, 0x09	; 9
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	6e 83       	std	Y+6, r22	; 0x06
    24c8:	7f 83       	std	Y+7, r23	; 0x07
    24ca:	88 87       	std	Y+8, r24	; 0x08
    24cc:	99 87       	std	Y+9, r25	; 0x09
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    24ce:	19 82       	std	Y+1, r1	; 0x01

	/* A variable that will hold the time per tick for the chosen timer */
	uint32_t au32_TickTime = NULL ;
    24d0:	1a 82       	std	Y+2, r1	; 0x02
    24d2:	1b 82       	std	Y+3, r1	; 0x03
    24d4:	1c 82       	std	Y+4, r1	; 0x04
    24d6:	1d 82       	std	Y+5, r1	; 0x05

	/*
	*	Calculating the minimum and maximum resolution for the chosen timer configuration
	*/
	gu32_MinResolution = ( (SOS_PRESCALE) / FREQ_OVER_MICRO ) ;
    24d8:	80 e8       	ldi	r24, 0x80	; 128
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e0       	ldi	r26, 0x00	; 0
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	80 93 c7 00 	sts	0x00C7, r24
    24e4:	90 93 c8 00 	sts	0x00C8, r25
    24e8:	a0 93 c9 00 	sts	0x00C9, r26
    24ec:	b0 93 ca 00 	sts	0x00CA, r27

	if (TIMER0 == SOS_Config.u8_Channel)
    24f0:	80 91 66 00 	lds	r24, 0x0066
    24f4:	88 23       	and	r24, r24
    24f6:	d9 f4       	brne	.+54     	; 0x252e <SOS_Init+0x7c>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER0_MAX_VALUE ;
    24f8:	80 91 c7 00 	lds	r24, 0x00C7
    24fc:	90 91 c8 00 	lds	r25, 0x00C8
    2500:	a0 91 c9 00 	lds	r26, 0x00C9
    2504:	b0 91 ca 00 	lds	r27, 0x00CA
    2508:	2f ef       	ldi	r18, 0xFF	; 255
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	80 93 cb 00 	sts	0x00CB, r24
    2520:	90 93 cc 00 	sts	0x00CC, r25
    2524:	a0 93 cd 00 	sts	0x00CD, r26
    2528:	b0 93 ce 00 	sts	0x00CE, r27
    252c:	40 c0       	rjmp	.+128    	; 0x25ae <SOS_Init+0xfc>

	}
	else if(TIMER1 == SOS_Config.u8_Channel)
    252e:	80 91 66 00 	lds	r24, 0x0066
    2532:	81 30       	cpi	r24, 0x01	; 1
    2534:	d9 f4       	brne	.+54     	; 0x256c <SOS_Init+0xba>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER1_MAX_VALUE ;
    2536:	80 91 c7 00 	lds	r24, 0x00C7
    253a:	90 91 c8 00 	lds	r25, 0x00C8
    253e:	a0 91 c9 00 	lds	r26, 0x00C9
    2542:	b0 91 ca 00 	lds	r27, 0x00CA
    2546:	2f ef       	ldi	r18, 0xFF	; 255
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	80 93 cb 00 	sts	0x00CB, r24
    255e:	90 93 cc 00 	sts	0x00CC, r25
    2562:	a0 93 cd 00 	sts	0x00CD, r26
    2566:	b0 93 ce 00 	sts	0x00CE, r27
    256a:	21 c0       	rjmp	.+66     	; 0x25ae <SOS_Init+0xfc>
	}
	else if(TIMER2 == SOS_Config.u8_Channel)
    256c:	80 91 66 00 	lds	r24, 0x0066
    2570:	82 30       	cpi	r24, 0x02	; 2
    2572:	d9 f4       	brne	.+54     	; 0x25aa <SOS_Init+0xf8>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER2_MAX_VALUE ;
    2574:	80 91 c7 00 	lds	r24, 0x00C7
    2578:	90 91 c8 00 	lds	r25, 0x00C8
    257c:	a0 91 c9 00 	lds	r26, 0x00C9
    2580:	b0 91 ca 00 	lds	r27, 0x00CA
    2584:	2f ef       	ldi	r18, 0xFF	; 255
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	80 93 cb 00 	sts	0x00CB, r24
    259c:	90 93 cc 00 	sts	0x00CC, r25
    25a0:	a0 93 cd 00 	sts	0x00CD, r26
    25a4:	b0 93 ce 00 	sts	0x00CE, r27
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <SOS_Init+0xfc>
	}
	else
	{
		/* Handling of entering wrong timer channel is already done in Timer_Init function in Timer.c */
		u8_Det = E_CHANNEL;
    25aa:	85 e1       	ldi	r24, 0x15	; 21
    25ac:	89 83       	std	Y+1, r24	; 0x01

	/*
	*	Checking if the passed resolution is in the allowed range for the resolution
	*/

	if ((au32_TicksNum >= gu32_MinResolution) && (au32_TicksNum <= gu32_MaxResolution) && (ERROR_OK == u8_Det))
    25ae:	20 91 c7 00 	lds	r18, 0x00C7
    25b2:	30 91 c8 00 	lds	r19, 0x00C8
    25b6:	40 91 c9 00 	lds	r20, 0x00C9
    25ba:	50 91 ca 00 	lds	r21, 0x00CA
    25be:	8e 81       	ldd	r24, Y+6	; 0x06
    25c0:	9f 81       	ldd	r25, Y+7	; 0x07
    25c2:	a8 85       	ldd	r26, Y+8	; 0x08
    25c4:	b9 85       	ldd	r27, Y+9	; 0x09
    25c6:	82 17       	cp	r24, r18
    25c8:	93 07       	cpc	r25, r19
    25ca:	a4 07       	cpc	r26, r20
    25cc:	b5 07       	cpc	r27, r21
    25ce:	08 f4       	brcc	.+2      	; 0x25d2 <SOS_Init+0x120>
    25d0:	45 c0       	rjmp	.+138    	; 0x265c <SOS_Init+0x1aa>
    25d2:	20 91 cb 00 	lds	r18, 0x00CB
    25d6:	30 91 cc 00 	lds	r19, 0x00CC
    25da:	40 91 cd 00 	lds	r20, 0x00CD
    25de:	50 91 ce 00 	lds	r21, 0x00CE
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	a8 85       	ldd	r26, Y+8	; 0x08
    25e8:	b9 85       	ldd	r27, Y+9	; 0x09
    25ea:	28 17       	cp	r18, r24
    25ec:	39 07       	cpc	r19, r25
    25ee:	4a 07       	cpc	r20, r26
    25f0:	5b 07       	cpc	r21, r27
    25f2:	a0 f1       	brcs	.+104    	; 0x265c <SOS_Init+0x1aa>
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 23       	and	r24, r24
    25f8:	89 f5       	brne	.+98     	; 0x265c <SOS_Init+0x1aa>
	{
		/*
		*	Initializing the timer with the configuration defined in SOS_cfg.c
		*/
		Timer_Init(&SOS_Config);
    25fa:	86 e6       	ldi	r24, 0x66	; 102
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <Timer_Init>

		Timer_Get_Tick_Time(SOS_Config.u8_Channel , &au32_TickTime) ; /* Now au32_TickTime holds the value of tick time in nano seconds*/
    2602:	80 91 66 00 	lds	r24, 0x0066
    2606:	9e 01       	movw	r18, r28
    2608:	2e 5f       	subi	r18, 0xFE	; 254
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	b9 01       	movw	r22, r18
    260e:	0e 94 3f 03 	call	0x67e	; 0x67e <Timer_Get_Tick_Time>

		au32_TickTime /= SOS_RESOLUTION_IN_MICRO ; /* so we divide it by 1000 to get it in micro sec. */
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	ac 81       	ldd	r26, Y+4	; 0x04
    2618:	bd 81       	ldd	r27, Y+5	; 0x05
    261a:	28 ee       	ldi	r18, 0xE8	; 232
    261c:	33 e0       	ldi	r19, 0x03	; 3
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    262a:	da 01       	movw	r26, r20
    262c:	c9 01       	movw	r24, r18
    262e:	8a 83       	std	Y+2, r24	; 0x02
    2630:	9b 83       	std	Y+3, r25	; 0x03
    2632:	ac 83       	std	Y+4, r26	; 0x04
    2634:	bd 83       	std	Y+5, r27	; 0x05

		gu16_TicksCount = au32_TicksNum / au32_TickTime ;
    2636:	2a 81       	ldd	r18, Y+2	; 0x02
    2638:	3b 81       	ldd	r19, Y+3	; 0x03
    263a:	4c 81       	ldd	r20, Y+4	; 0x04
    263c:	5d 81       	ldd	r21, Y+5	; 0x05
    263e:	8e 81       	ldd	r24, Y+6	; 0x06
    2640:	9f 81       	ldd	r25, Y+7	; 0x07
    2642:	a8 85       	ldd	r26, Y+8	; 0x08
    2644:	b9 85       	ldd	r27, Y+9	; 0x09
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    264e:	da 01       	movw	r26, r20
    2650:	c9 01       	movw	r24, r18
    2652:	90 93 d0 00 	sts	0x00D0, r25
    2656:	80 93 cf 00 	sts	0x00CF, r24
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <SOS_Init+0x1ae>
	}
	else
	{
		/* Handling of entering wrong resolution */
		u8_Det = E_SOS_RESOLUTION ;
    265c:	8e e8       	ldi	r24, 0x8E	; 142
    265e:	89 83       	std	Y+1, r24	; 0x01
	}

	if (ERROR_OK == u8_Det)
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	88 23       	and	r24, r24
    2664:	99 f4       	brne	.+38     	; 0x268c <SOS_Init+0x1da>
	{
		gu8_SOS_InitFlag = E_SOS_INTIALIZED ;
    2666:	80 e9       	ldi	r24, 0x90	; 144
    2668:	80 93 65 00 	sts	0x0065, r24
		TIMER_SetCallBack(SOS_TIMER_CallBack, SOS_Config.u8_Channel);
    266c:	20 91 66 00 	lds	r18, 0x0066
    2670:	84 ed       	ldi	r24, 0xD4	; 212
    2672:	91 e1       	ldi	r25, 0x11	; 17
    2674:	62 2f       	mov	r22, r18
    2676:	0e 94 90 03 	call	0x720	; 0x720 <TIMER_SetCallBack>
		Timer_Start(SOS_Config.u8_Channel , gu16_TicksCount);
    267a:	80 91 66 00 	lds	r24, 0x0066
    267e:	20 91 cf 00 	lds	r18, 0x00CF
    2682:	30 91 d0 00 	lds	r19, 0x00D0
    2686:	b9 01       	movw	r22, r18
    2688:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Timer_Start>
	else
	{
			/* Do nothing */
	}

	return u8_Det ;
    268c:	89 81       	ldd	r24, Y+1	; 0x01
}
    268e:	29 96       	adiw	r28, 0x09	; 9
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <SOS_Deinit>:
/* brief!  SOS Deinitialization                                                        */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t SOS_Deinit(void)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	0f 92       	push	r0
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    26aa:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the SOS is Initialized
	*/
	if (E_SOS_INTIALIZED == gu8_SOS_InitFlag)
    26ac:	80 91 65 00 	lds	r24, 0x0065
    26b0:	80 39       	cpi	r24, 0x90	; 144
    26b2:	49 f4       	brne	.+18     	; 0x26c6 <SOS_Deinit+0x26>
	{
		u8_Det = Timer_Stop(SOS_Config.u8_Channel);
    26b4:	80 91 66 00 	lds	r24, 0x0066
    26b8:	0e 94 ce 02 	call	0x59c	; 0x59c <Timer_Stop>
    26bc:	89 83       	std	Y+1, r24	; 0x01
		gu8_SOS_InitFlag = E_SOS_NOT_INTIALIZED;
    26be:	81 e9       	ldi	r24, 0x91	; 145
    26c0:	80 93 65 00 	sts	0x0065, r24
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <SOS_Deinit+0x2a>
	}
	else
	{
		/* Handling of Deinitialize SOS module before initialize it */
		u8_Det = E_SOS_NOT_INTIALIZED;
    26c6:	81 e9       	ldi	r24, 0x91	; 145
    26c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_Det ;
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <SOS_CreatTask>:
/* param!  u32 (I/P) delay time before executing the desired function                  */
/* param!  u8 (I/P) user wants to execute this function periodically or one shot       */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t SOS_CreatTask(u8_pfunc_t pfun_SosApp, uint32_t au32_TicksNum , uint8_t u8_Priority, uint8_t au8_Periodicity )
{
    26d4:	0f 93       	push	r16
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	29 97       	sbiw	r28, 0x09	; 9
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	9b 83       	std	Y+3, r25	; 0x03
    26ec:	8a 83       	std	Y+2, r24	; 0x02
    26ee:	4c 83       	std	Y+4, r20	; 0x04
    26f0:	5d 83       	std	Y+5, r21	; 0x05
    26f2:	6e 83       	std	Y+6, r22	; 0x06
    26f4:	7f 83       	std	Y+7, r23	; 0x07
    26f6:	28 87       	std	Y+8, r18	; 0x08
    26f8:	09 87       	std	Y+9, r16	; 0x09
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    26fa:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the SOS is Initialized
	*/
	if (E_SOS_INTIALIZED == gu8_SOS_InitFlag)
    26fc:	80 91 65 00 	lds	r24, 0x0065
    2700:	80 39       	cpi	r24, 0x90	; 144
    2702:	09 f0       	breq	.+2      	; 0x2706 <SOS_CreatTask+0x32>
    2704:	a6 c0       	rjmp	.+332    	; 0x2852 <SOS_CreatTask+0x17e>
	{
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if (NULL != pfun_SosApp )
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	09 f4       	brne	.+2      	; 0x2710 <SOS_CreatTask+0x3c>
    270e:	9e c0       	rjmp	.+316    	; 0x284c <SOS_CreatTask+0x178>
		{
			if ((au32_TicksNum >= gu32_MinResolution) && (au32_TicksNum <= gu32_MaxResolution))
    2710:	20 91 c7 00 	lds	r18, 0x00C7
    2714:	30 91 c8 00 	lds	r19, 0x00C8
    2718:	40 91 c9 00 	lds	r20, 0x00C9
    271c:	50 91 ca 00 	lds	r21, 0x00CA
    2720:	8c 81       	ldd	r24, Y+4	; 0x04
    2722:	9d 81       	ldd	r25, Y+5	; 0x05
    2724:	ae 81       	ldd	r26, Y+6	; 0x06
    2726:	bf 81       	ldd	r27, Y+7	; 0x07
    2728:	82 17       	cp	r24, r18
    272a:	93 07       	cpc	r25, r19
    272c:	a4 07       	cpc	r26, r20
    272e:	b5 07       	cpc	r27, r21
    2730:	08 f4       	brcc	.+2      	; 0x2734 <SOS_CreatTask+0x60>
    2732:	89 c0       	rjmp	.+274    	; 0x2846 <SOS_CreatTask+0x172>
    2734:	20 91 cb 00 	lds	r18, 0x00CB
    2738:	30 91 cc 00 	lds	r19, 0x00CC
    273c:	40 91 cd 00 	lds	r20, 0x00CD
    2740:	50 91 ce 00 	lds	r21, 0x00CE
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	9d 81       	ldd	r25, Y+5	; 0x05
    2748:	ae 81       	ldd	r26, Y+6	; 0x06
    274a:	bf 81       	ldd	r27, Y+7	; 0x07
    274c:	28 17       	cp	r18, r24
    274e:	39 07       	cpc	r19, r25
    2750:	4a 07       	cpc	r20, r26
    2752:	5b 07       	cpc	r21, r27
    2754:	08 f4       	brcc	.+2      	; 0x2758 <SOS_CreatTask+0x84>
    2756:	77 c0       	rjmp	.+238    	; 0x2846 <SOS_CreatTask+0x172>
			{
				if ((PERIODIC >= au8_Periodicity) && (ONE_SHOT <= au8_Periodicity))
    2758:	89 85       	ldd	r24, Y+9	; 0x09
    275a:	88 23       	and	r24, r24
    275c:	09 f4       	brne	.+2      	; 0x2760 <SOS_CreatTask+0x8c>
    275e:	70 c0       	rjmp	.+224    	; 0x2840 <SOS_CreatTask+0x16c>
				{
					/*
					*	Checking if the array o events "buffer" is full or not
					*/
					if(gu8_Buffer_Index < SOS_BUFFER_SIZE)
    2760:	80 91 d1 00 	lds	r24, 0x00D1
    2764:	8a 30       	cpi	r24, 0x0A	; 10
    2766:	08 f0       	brcs	.+2      	; 0x276a <SOS_CreatTask+0x96>
    2768:	68 c0       	rjmp	.+208    	; 0x283a <SOS_CreatTask+0x166>
					{
						/*
						 *	Passing the event information to the events array
						 */
						gastr_SOS_Tasks[gu8_Buffer_Index].u32_SOS_Ticks_Num = au32_TicksNum ;
    276a:	80 91 d1 00 	lds	r24, 0x00D1
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	c9 01       	movw	r24, r18
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	82 0f       	add	r24, r18
    2782:	93 1f       	adc	r25, r19
    2784:	fc 01       	movw	r30, r24
    2786:	ea 52       	subi	r30, 0x2A	; 42
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	9d 81       	ldd	r25, Y+5	; 0x05
    278e:	ae 81       	ldd	r26, Y+6	; 0x06
    2790:	bf 81       	ldd	r27, Y+7	; 0x07
    2792:	80 83       	st	Z, r24
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	a2 83       	std	Z+2, r26	; 0x02
    2798:	b3 83       	std	Z+3, r27	; 0x03
						gastr_SOS_Tasks[gu8_Buffer_Index].u8_Priority       = u8_Priority ;
    279a:	80 91 d1 00 	lds	r24, 0x00D1
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	c9 01       	movw	r24, r18
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	82 0f       	add	r24, r18
    27b2:	93 1f       	adc	r25, r19
    27b4:	fc 01       	movw	r30, r24
    27b6:	e6 52       	subi	r30, 0x26	; 38
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	88 85       	ldd	r24, Y+8	; 0x08
    27bc:	80 83       	st	Z, r24
						gastr_SOS_Tasks[gu8_Buffer_Index].u8_Periodicity    = au8_Periodicity ;
    27be:	80 91 d1 00 	lds	r24, 0x00D1
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	c9 01       	movw	r24, r18
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	82 0f       	add	r24, r18
    27d6:	93 1f       	adc	r25, r19
    27d8:	fc 01       	movw	r30, r24
    27da:	e5 52       	subi	r30, 0x25	; 37
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	80 83       	st	Z, r24
						gastr_SOS_Tasks[gu8_Buffer_Index].u8_TaskState      = WAITING ;
    27e2:	80 91 d1 00 	lds	r24, 0x00D1
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	c9 01       	movw	r24, r18
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	82 0f       	add	r24, r18
    27fa:	93 1f       	adc	r25, r19
    27fc:	fc 01       	movw	r30, r24
    27fe:	e4 52       	subi	r30, 0x24	; 36
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	80 83       	st	Z, r24
						gastr_SOS_Tasks[gu8_Buffer_Index].u8pfunc_Task      = pfun_SosApp ;
    2806:	80 91 d1 00 	lds	r24, 0x00D1
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	c9 01       	movw	r24, r18
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	82 0f       	add	r24, r18
    281e:	93 1f       	adc	r25, r19
    2820:	fc 01       	movw	r30, r24
    2822:	e3 52       	subi	r30, 0x23	; 35
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	9b 81       	ldd	r25, Y+3	; 0x03
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24

						gu8_Buffer_Index ++ ; /* Increment the index to the next free element in the events array */
    282e:	80 91 d1 00 	lds	r24, 0x00D1
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	80 93 d1 00 	sts	0x00D1, r24
    2838:	0e c0       	rjmp	.+28     	; 0x2856 <SOS_CreatTask+0x182>
					}
					else
					{
						/* Handling number of events limit*/
						u8_Det = E_SOS_BUFFER_SIZE ;
    283a:	8f e8       	ldi	r24, 0x8F	; 143
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	0b c0       	rjmp	.+22     	; 0x2856 <SOS_CreatTask+0x182>
					}
				}
				else
				{
					/* Handling of entering wrong periodicity */
					u8_Det = E_SOS_PERIODICITY ;
    2840:	8d e8       	ldi	r24, 0x8D	; 141
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	08 c0       	rjmp	.+16     	; 0x2856 <SOS_CreatTask+0x182>
				}
			}
			else
			{
				/* Entering delay doesn't match the defined limits */
				u8_Det = E_SOS_RESOLUTION ;
    2846:	8e e8       	ldi	r24, 0x8E	; 142
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	05 c0       	rjmp	.+10     	; 0x2856 <SOS_CreatTask+0x182>
			}
		}
		else
		{
			/* Handling of entering null pointer*/
			u8_Det = E_NULL_PTR ;
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <SOS_CreatTask+0x182>
		}
	}
	else
	{
		/* Handling of Start SOS module before initialize it */
		u8_Det = E_SOS_NOT_INTIALIZED;
    2852:	81 e9       	ldi	r24, 0x91	; 145
    2854:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Det ;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
}
    2858:	29 96       	adiw	r28, 0x09	; 9
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <SOS_DeleteTask>:
/* brief!  Delete a certain event from being executed                                  */
/* param!  (I/P) pointer to function that is desired to be stopped                     */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t SOS_DeleteTask(u8_pfunc_t pfun_SosApp)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <SOS_DeleteTask+0x6>
    2872:	00 d0       	rcall	.+0      	; 0x2874 <SOS_DeleteTask+0x8>
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    287c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_Count = NULL ;
    287e:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the SOS is Initialized
	*/
	if (E_SOS_INTIALIZED == gu8_SOS_InitFlag)
    2880:	80 91 65 00 	lds	r24, 0x0065
    2884:	80 39       	cpi	r24, 0x90	; 144
    2886:	09 f0       	breq	.+2      	; 0x288a <SOS_DeleteTask+0x1e>
    2888:	5b c1       	rjmp	.+694    	; 0x2b40 <SOS_DeleteTask+0x2d4>
	{
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if ( NULL != pfun_SosApp )
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	9c 81       	ldd	r25, Y+4	; 0x04
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	09 f4       	brne	.+2      	; 0x2894 <SOS_DeleteTask+0x28>
    2892:	53 c1       	rjmp	.+678    	; 0x2b3a <SOS_DeleteTask+0x2ce>
		{
			for (au8_Count = NULL ; au8_Count < gu8_Buffer_Index ; au8_Count ++)
    2894:	19 82       	std	Y+1, r1	; 0x01
    2896:	4a c1       	rjmp	.+660    	; 0x2b2c <SOS_DeleteTask+0x2c0>
			{
				if (pfun_SosApp == gastr_SOS_Tasks[au8_Count].u8pfunc_Task)
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	c9 01       	movw	r24, r18
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	82 0f       	add	r24, r18
    28ae:	93 1f       	adc	r25, r19
    28b0:	fc 01       	movw	r30, r24
    28b2:	e3 52       	subi	r30, 0x23	; 35
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	20 81       	ld	r18, Z
    28b8:	31 81       	ldd	r19, Z+1	; 0x01
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	28 17       	cp	r18, r24
    28c0:	39 07       	cpc	r19, r25
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <SOS_DeleteTask+0x5a>
    28c4:	0d c1       	rjmp	.+538    	; 0x2ae0 <SOS_DeleteTask+0x274>
				{
					gu8_Buffer_Index --;
    28c6:	80 91 d1 00 	lds	r24, 0x00D1
    28ca:	81 50       	subi	r24, 0x01	; 1
    28cc:	80 93 d1 00 	sts	0x00D1, r24
					gastr_SOS_Tasks[au8_Count].u8pfunc_Task      = gastr_SOS_Tasks[gu8_Buffer_Index].u8pfunc_Task ;
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	48 2f       	mov	r20, r24
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	80 91 d1 00 	lds	r24, 0x00D1
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	c9 01       	movw	r24, r18
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	82 0f       	add	r24, r18
    28ee:	93 1f       	adc	r25, r19
    28f0:	fc 01       	movw	r30, r24
    28f2:	e3 52       	subi	r30, 0x23	; 35
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	20 81       	ld	r18, Z
    28f8:	31 81       	ldd	r19, Z+1	; 0x01
    28fa:	ca 01       	movw	r24, r20
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	84 0f       	add	r24, r20
    290a:	95 1f       	adc	r25, r21
    290c:	fc 01       	movw	r30, r24
    290e:	e3 52       	subi	r30, 0x23	; 35
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	31 83       	std	Z+1, r19	; 0x01
    2914:	20 83       	st	Z, r18
					gastr_SOS_Tasks[au8_Count].u32_SOS_Ticks_Num = gastr_SOS_Tasks[gu8_Buffer_Index].u32_SOS_Ticks_Num ;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	68 2f       	mov	r22, r24
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	80 91 d1 00 	lds	r24, 0x00D1
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	c9 01       	movw	r24, r18
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	82 0f       	add	r24, r18
    2934:	93 1f       	adc	r25, r19
    2936:	fc 01       	movw	r30, r24
    2938:	ea 52       	subi	r30, 0x2A	; 42
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	20 81       	ld	r18, Z
    293e:	31 81       	ldd	r19, Z+1	; 0x01
    2940:	42 81       	ldd	r20, Z+2	; 0x02
    2942:	53 81       	ldd	r21, Z+3	; 0x03
    2944:	cb 01       	movw	r24, r22
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	86 0f       	add	r24, r22
    2954:	97 1f       	adc	r25, r23
    2956:	fc 01       	movw	r30, r24
    2958:	ea 52       	subi	r30, 0x2A	; 42
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	20 83       	st	Z, r18
    295e:	31 83       	std	Z+1, r19	; 0x01
    2960:	42 83       	std	Z+2, r20	; 0x02
    2962:	53 83       	std	Z+3, r21	; 0x03
					gastr_SOS_Tasks[au8_Count].u8_Periodicity 	 = gastr_SOS_Tasks[gu8_Buffer_Index].u8_Periodicity ;
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	48 2f       	mov	r20, r24
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	80 91 d1 00 	lds	r24, 0x00D1
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	c9 01       	movw	r24, r18
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	82 0f       	add	r24, r18
    2982:	93 1f       	adc	r25, r19
    2984:	fc 01       	movw	r30, r24
    2986:	e5 52       	subi	r30, 0x25	; 37
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	20 81       	ld	r18, Z
    298c:	ca 01       	movw	r24, r20
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	84 0f       	add	r24, r20
    299c:	95 1f       	adc	r25, r21
    299e:	fc 01       	movw	r30, r24
    29a0:	e5 52       	subi	r30, 0x25	; 37
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	20 83       	st	Z, r18
					gastr_SOS_Tasks[au8_Count].u8_Priority       = gastr_SOS_Tasks[gu8_Buffer_Index].u8_Priority ;
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	48 2f       	mov	r20, r24
    29aa:	50 e0       	ldi	r21, 0x00	; 0
    29ac:	80 91 d1 00 	lds	r24, 0x00D1
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	c9 01       	movw	r24, r18
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	82 0f       	add	r24, r18
    29c4:	93 1f       	adc	r25, r19
    29c6:	fc 01       	movw	r30, r24
    29c8:	e6 52       	subi	r30, 0x26	; 38
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	20 81       	ld	r18, Z
    29ce:	ca 01       	movw	r24, r20
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	84 0f       	add	r24, r20
    29de:	95 1f       	adc	r25, r21
    29e0:	fc 01       	movw	r30, r24
    29e2:	e6 52       	subi	r30, 0x26	; 38
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	20 83       	st	Z, r18
					gastr_SOS_Tasks[au8_Count].u8_TaskState      = gastr_SOS_Tasks[gu8_Buffer_Index].u8_TaskState ;
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	48 2f       	mov	r20, r24
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	80 91 d1 00 	lds	r24, 0x00D1
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	c9 01       	movw	r24, r18
    29f8:	88 0f       	add	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	82 0f       	add	r24, r18
    2a06:	93 1f       	adc	r25, r19
    2a08:	fc 01       	movw	r30, r24
    2a0a:	e4 52       	subi	r30, 0x24	; 36
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	20 81       	ld	r18, Z
    2a10:	ca 01       	movw	r24, r20
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	84 0f       	add	r24, r20
    2a20:	95 1f       	adc	r25, r21
    2a22:	fc 01       	movw	r30, r24
    2a24:	e4 52       	subi	r30, 0x24	; 36
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	20 83       	st	Z, r18

					gastr_SOS_Tasks[gu8_Buffer_Index].u8pfunc_Task      = NULL ;
    2a2a:	80 91 d1 00 	lds	r24, 0x00D1
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	c9 01       	movw	r24, r18
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	82 0f       	add	r24, r18
    2a42:	93 1f       	adc	r25, r19
    2a44:	fc 01       	movw	r30, r24
    2a46:	e3 52       	subi	r30, 0x23	; 35
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	11 82       	std	Z+1, r1	; 0x01
    2a4c:	10 82       	st	Z, r1
					gastr_SOS_Tasks[gu8_Buffer_Index].u32_SOS_Ticks_Num = NULL;
    2a4e:	80 91 d1 00 	lds	r24, 0x00D1
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	c9 01       	movw	r24, r18
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	82 0f       	add	r24, r18
    2a66:	93 1f       	adc	r25, r19
    2a68:	fc 01       	movw	r30, r24
    2a6a:	ea 52       	subi	r30, 0x2A	; 42
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	10 82       	st	Z, r1
    2a70:	11 82       	std	Z+1, r1	; 0x01
    2a72:	12 82       	std	Z+2, r1	; 0x02
    2a74:	13 82       	std	Z+3, r1	; 0x03
					gastr_SOS_Tasks[gu8_Buffer_Index].u8_Periodicity    = NULL;
    2a76:	80 91 d1 00 	lds	r24, 0x00D1
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	c9 01       	movw	r24, r18
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	82 0f       	add	r24, r18
    2a8e:	93 1f       	adc	r25, r19
    2a90:	fc 01       	movw	r30, r24
    2a92:	e5 52       	subi	r30, 0x25	; 37
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	10 82       	st	Z, r1
					gastr_SOS_Tasks[gu8_Buffer_Index].u8_Priority       = NULL;
    2a98:	80 91 d1 00 	lds	r24, 0x00D1
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	c9 01       	movw	r24, r18
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	82 0f       	add	r24, r18
    2ab0:	93 1f       	adc	r25, r19
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	e6 52       	subi	r30, 0x26	; 38
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	10 82       	st	Z, r1
					gastr_SOS_Tasks[gu8_Buffer_Index].u8_TaskState      = NOT_READY;
    2aba:	80 91 d1 00 	lds	r24, 0x00D1
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	c9 01       	movw	r24, r18
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	82 0f       	add	r24, r18
    2ad2:	93 1f       	adc	r25, r19
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e4 52       	subi	r30, 0x24	; 36
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	80 83       	st	Z, r24
    2ade:	23 c0       	rjmp	.+70     	; 0x2b26 <SOS_DeleteTask+0x2ba>

				}
				else if((pfun_SosApp != gastr_SOS_Tasks[au8_Count].u8pfunc_Task)&&(au8_Count == gu8_Buffer_Index -1U))
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	c9 01       	movw	r24, r18
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	82 0f       	add	r24, r18
    2af6:	93 1f       	adc	r25, r19
    2af8:	fc 01       	movw	r30, r24
    2afa:	e3 52       	subi	r30, 0x23	; 35
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	20 81       	ld	r18, Z
    2b00:	31 81       	ldd	r19, Z+1	; 0x01
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	28 17       	cp	r18, r24
    2b08:	39 07       	cpc	r19, r25
    2b0a:	69 f0       	breq	.+26     	; 0x2b26 <SOS_DeleteTask+0x2ba>
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	80 91 d1 00 	lds	r24, 0x00D1
    2b16:	88 2f       	mov	r24, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	28 17       	cp	r18, r24
    2b1e:	39 07       	cpc	r19, r25
    2b20:	11 f4       	brne	.+4      	; 0x2b26 <SOS_DeleteTask+0x2ba>
				{
					/* Handling Wrong events */
					u8_Det = E_SOS_BUFFER_SIZE ;
    2b22:	8f e8       	ldi	r24, 0x8F	; 143
    2b24:	8a 83       	std	Y+2, r24	; 0x02
		/*
		*	Making sure that the passed pointer is not a null one
		*/
		if ( NULL != pfun_SosApp )
		{
			for (au8_Count = NULL ; au8_Count < gu8_Buffer_Index ; au8_Count ++)
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	90 91 d1 00 	lds	r25, 0x00D1
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	89 17       	cp	r24, r25
    2b34:	08 f4       	brcc	.+2      	; 0x2b38 <SOS_DeleteTask+0x2cc>
    2b36:	b0 ce       	rjmp	.-672    	; 0x2898 <SOS_DeleteTask+0x2c>
    2b38:	05 c0       	rjmp	.+10     	; 0x2b44 <SOS_DeleteTask+0x2d8>
			}
		}
		else
		{
			/* Handling of passing null pointer */
			u8_Det = E_NULL_PTR ;
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	8a 83       	std	Y+2, r24	; 0x02
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <SOS_DeleteTask+0x2d8>
		}
	}
	else
	{
		/* Handling of Stop SOS module before initialize it */
		u8_Det = E_SOS_NOT_INTIALIZED;
    2b40:	81 e9       	ldi	r24, 0x91	; 145
    2b42:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8_Det ;
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <SOS_Run>:
/* brief!  SOS Manager                                                                 */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t SOS_Run(void)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <SOS_Run+0x6>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <SOS_Run+0x8>
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <SOS_Run+0xa>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t u8_Det = ERROR_OK ;
    2b62:	1c 82       	std	Y+4, r1	; 0x04

	uint8_t au8_Count = NULL ;
    2b64:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t au8_Primitive_ReadyTask_index = NULL ;
    2b66:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_Is_FirstReadyTask_Flag    = FIRST_READYTASK ;
    2b68:	19 82       	std	Y+1, r1	; 0x01
	/*
	*	Execute Ready Tasks
	*/
	while (1)
	{
		for (au8_Count = NULL ; au8_Count < gu8_Buffer_Index ; au8_Count++)
    2b6a:	1b 82       	std	Y+3, r1	; 0x03
    2b6c:	45 c0       	rjmp	.+138    	; 0x2bf8 <SOS_Run+0xa4>
		{
			switch( gastr_SOS_Tasks[au8_Count].u8_TaskState )
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	c9 01       	movw	r24, r18
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	82 0f       	add	r24, r18
    2b84:	93 1f       	adc	r25, r19
    2b86:	fc 01       	movw	r30, r24
    2b88:	e4 52       	subi	r30, 0x24	; 36
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	80 81       	ld	r24, Z
    2b8e:	88 2f       	mov	r24, r24
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	71 f5       	brne	.+92     	; 0x2bf2 <SOS_Run+0x9e>
			{
				/* the task is ready */
				case READY:
					switch( au8_Is_FirstReadyTask_Flag )
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	88 2f       	mov	r24, r24
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	29 f4       	brne	.+10     	; 0x2baa <SOS_Run+0x56>
					{
						case FIRST_READYTASK:

							au8_Primitive_ReadyTask_index = au8_Count ;
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	8a 83       	std	Y+2, r24	; 0x02
							au8_Is_FirstReadyTask_Flag = SECOND_READYTASK ;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	24 c0       	rjmp	.+72     	; 0x2bf2 <SOS_Run+0x9e>
						break;

						default:
							/* choosing the highest priority task to be the Primitive task that will be determined */
							if (gastr_SOS_Tasks[au8_Count].u8_Priority > gastr_SOS_Tasks[au8_Primitive_ReadyTask_index].u8_Priority)
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	c9 01       	movw	r24, r18
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	82 0f       	add	r24, r18
    2bc0:	93 1f       	adc	r25, r19
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e6 52       	subi	r30, 0x26	; 38
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	40 81       	ld	r20, Z
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	82 0f       	add	r24, r18
    2be0:	93 1f       	adc	r25, r19
    2be2:	fc 01       	movw	r30, r24
    2be4:	e6 52       	subi	r30, 0x26	; 38
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	84 17       	cp	r24, r20
    2bec:	10 f4       	brcc	.+4      	; 0x2bf2 <SOS_Run+0x9e>
							{
								au8_Primitive_ReadyTask_index = au8_Count ;
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
	/*
	*	Execute Ready Tasks
	*/
	while (1)
	{
		for (au8_Count = NULL ; au8_Count < gu8_Buffer_Index ; au8_Count++)
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
    2bf8:	90 91 d1 00 	lds	r25, 0x00D1
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	89 17       	cp	r24, r25
    2c00:	08 f4       	brcc	.+2      	; 0x2c04 <SOS_Run+0xb0>
    2c02:	b5 cf       	rjmp	.-150    	; 0x2b6e <SOS_Run+0x1a>
				break;
			}
		}

		/* Task action */
		switch( gastr_SOS_Tasks[au8_Primitive_ReadyTask_index].u8_TaskState )
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	c9 01       	movw	r24, r18
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	82 0f       	add	r24, r18
    2c1a:	93 1f       	adc	r25, r19
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	e4 52       	subi	r30, 0x24	; 36
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <SOS_Run+0xda>
    2c2c:	69 c0       	rjmp	.+210    	; 0x2d00 <SOS_Run+0x1ac>
		{
			/* Run the ready Task */
			case READY:

				gastr_SOS_Tasks[au8_Primitive_ReadyTask_index].u8pfunc_Task();
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	c9 01       	movw	r24, r18
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	82 0f       	add	r24, r18
    2c44:	93 1f       	adc	r25, r19
    2c46:	fc 01       	movw	r30, r24
    2c48:	e3 52       	subi	r30, 0x23	; 35
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	f0 81       	ld	r31, Z
    2c50:	e0 2d       	mov	r30, r0
    2c52:	09 95       	icall
				gastr_SOS_Tasks[au8_Primitive_ReadyTask_index].u8_TaskState = RUNNING ;
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	82 0f       	add	r24, r18
    2c6a:	93 1f       	adc	r25, r19
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e4 52       	subi	r30, 0x24	; 36
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	83 e0       	ldi	r24, 0x03	; 3
    2c74:	80 83       	st	Z, r24

				/* task periodicity decision */
				switch( gastr_SOS_Tasks[au8_Primitive_ReadyTask_index].u8_Periodicity )
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	c9 01       	movw	r24, r18
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	82 0f       	add	r24, r18
    2c8c:	93 1f       	adc	r25, r19
    2c8e:	fc 01       	movw	r30, r24
    2c90:	e5 52       	subi	r30, 0x25	; 37
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	3e 83       	std	Y+6, r19	; 0x06
    2c9c:	2d 83       	std	Y+5, r18	; 0x05
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	31 f0       	breq	.+12     	; 0x2cb4 <SOS_Run+0x160>
    2ca8:	2d 81       	ldd	r18, Y+5	; 0x05
    2caa:	3e 81       	ldd	r19, Y+6	; 0x06
    2cac:	2f 3f       	cpi	r18, 0xFF	; 255
    2cae:	31 05       	cpc	r19, r1
    2cb0:	b1 f0       	breq	.+44     	; 0x2cde <SOS_Run+0x18a>
    2cb2:	26 c0       	rjmp	.+76     	; 0x2d00 <SOS_Run+0x1ac>
				{
					case ONE_SHOT:

						u8_Det = SOS_DeleteTask(gastr_SOS_Tasks[au8_Primitive_ReadyTask_index].u8pfunc_Task);
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	c9 01       	movw	r24, r18
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	82 0f       	add	r24, r18
    2cca:	93 1f       	adc	r25, r19
    2ccc:	fc 01       	movw	r30, r24
    2cce:	e3 52       	subi	r30, 0x23	; 35
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	0e 94 36 14 	call	0x286c	; 0x286c <SOS_DeleteTask>
    2cda:	8c 83       	std	Y+4, r24	; 0x04
    2cdc:	11 c0       	rjmp	.+34     	; 0x2d00 <SOS_Run+0x1ac>
					break;

					case PERIODIC:

						gastr_SOS_Tasks[au8_Primitive_ReadyTask_index].u8_TaskState = WAITING ;
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	c9 01       	movw	r24, r18
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	82 0f       	add	r24, r18
    2cf4:	93 1f       	adc	r25, r19
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e4 52       	subi	r30, 0x24	; 36
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	80 83       	st	Z, r24
			default:
				/* Do nothing */
			break;
		}

		au8_Is_FirstReadyTask_Flag    = FIRST_READYTASK ;
    2d00:	19 82       	std	Y+1, r1	; 0x01
		au8_Primitive_ReadyTask_index = NULL;
    2d02:	1a 82       	std	Y+2, r1	; 0x02

		if(ERROR_OK != u8_Det)
    2d04:	8c 81       	ldd	r24, Y+4	; 0x04
    2d06:	88 23       	and	r24, r24
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <SOS_Run+0x1b8>
    2d0a:	2f cf       	rjmp	.-418    	; 0x2b6a <SOS_Run+0x16>
		{
			return u8_Det ;
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
		}
		//CPU_Sleep();
	}
}
    2d0e:	26 96       	adiw	r28, 0x06	; 6
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <PWM_TIMER_CallBack>:
/* brief!  what ISR handling                                                           */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
static void PWM_TIMER_CallBack(void)
{
    2d20:	ef 92       	push	r14
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
	Disable_GlobalInterrupt();
    2d30:	0e 94 30 05 	call	0xa60	; 0xa60 <Disable_GlobalInterrupt>

	/*TODO just increment the flags */
	/* loop on the PWM channels */
	for (gu8_ISR_Count = NULL ; gu8_ISR_Count <= PWM_CHANNELS_NUM ; gu8_ISR_Count++)
    2d34:	10 92 59 01 	sts	0x0159, r1
    2d38:	03 c1       	rjmp	.+518    	; 0x2f40 <PWM_TIMER_CallBack+0x220>
	{
		/* check if the current PWM channel is in running state */
		if(PWM_CHANNEL_RUNNING == gastr_PWM_Channel[gu8_ISR_Count].u8_Pwm_Channel_States)
    2d3a:	80 91 59 01 	lds	r24, 0x0159
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	c9 01       	movw	r24, r18
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	82 0f       	add	r24, r18
    2d4a:	93 1f       	adc	r25, r19
    2d4c:	9c 01       	movw	r18, r24
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	22 0f       	add	r18, r18
    2d54:	33 1f       	adc	r19, r19
    2d56:	82 0f       	add	r24, r18
    2d58:	93 1f       	adc	r25, r19
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	ea 59       	subi	r30, 0x9A	; 154
    2d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d60:	80 81       	ld	r24, Z
    2d62:	81 30       	cpi	r24, 0x01	; 1
    2d64:	09 f0       	breq	.+2      	; 0x2d68 <PWM_TIMER_CallBack+0x48>
    2d66:	e7 c0       	rjmp	.+462    	; 0x2f36 <PWM_TIMER_CallBack+0x216>
		{
			/* increment the current PWM counter */
			gastr_PWM_Channel[gu8_ISR_Count].u32_Pwm_Channel_Count ++;
    2d68:	80 91 59 01 	lds	r24, 0x0159
    2d6c:	48 2f       	mov	r20, r24
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	ca 01       	movw	r24, r20
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	84 0f       	add	r24, r20
    2d78:	95 1f       	adc	r25, r21
    2d7a:	9c 01       	movw	r18, r24
    2d7c:	22 0f       	add	r18, r18
    2d7e:	33 1f       	adc	r19, r19
    2d80:	22 0f       	add	r18, r18
    2d82:	33 1f       	adc	r19, r19
    2d84:	82 0f       	add	r24, r18
    2d86:	93 1f       	adc	r25, r19
    2d88:	fc 01       	movw	r30, r24
    2d8a:	e9 59       	subi	r30, 0x99	; 153
    2d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	a2 81       	ldd	r26, Z+2	; 0x02
    2d94:	b3 81       	ldd	r27, Z+3	; 0x03
    2d96:	7c 01       	movw	r14, r24
    2d98:	8d 01       	movw	r16, r26
    2d9a:	08 94       	sec
    2d9c:	e1 1c       	adc	r14, r1
    2d9e:	f1 1c       	adc	r15, r1
    2da0:	01 1d       	adc	r16, r1
    2da2:	11 1d       	adc	r17, r1
    2da4:	ca 01       	movw	r24, r20
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	84 0f       	add	r24, r20
    2dac:	95 1f       	adc	r25, r21
    2dae:	9c 01       	movw	r18, r24
    2db0:	22 0f       	add	r18, r18
    2db2:	33 1f       	adc	r19, r19
    2db4:	22 0f       	add	r18, r18
    2db6:	33 1f       	adc	r19, r19
    2db8:	82 0f       	add	r24, r18
    2dba:	93 1f       	adc	r25, r19
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	e9 59       	subi	r30, 0x99	; 153
    2dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc2:	e0 82       	st	Z, r14
    2dc4:	f1 82       	std	Z+1, r15	; 0x01
    2dc6:	02 83       	std	Z+2, r16	; 0x02
    2dc8:	13 83       	std	Z+3, r17	; 0x03

			/* check if the current PWM signal meet his period time */
			if (NULL == (gastr_PWM_Channel[gu8_ISR_Count].u32_Pwm_Channel_Count % gastr_PWM_Channel[gu8_ISR_Count].u32_Pwm_Period))
    2dca:	80 91 59 01 	lds	r24, 0x0159
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	c9 01       	movw	r24, r18
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	82 0f       	add	r24, r18
    2dda:	93 1f       	adc	r25, r19
    2ddc:	9c 01       	movw	r18, r24
    2dde:	22 0f       	add	r18, r18
    2de0:	33 1f       	adc	r19, r19
    2de2:	22 0f       	add	r18, r18
    2de4:	33 1f       	adc	r19, r19
    2de6:	82 0f       	add	r24, r18
    2de8:	93 1f       	adc	r25, r19
    2dea:	fc 01       	movw	r30, r24
    2dec:	e9 59       	subi	r30, 0x99	; 153
    2dee:	fe 4f       	sbci	r31, 0xFE	; 254
    2df0:	e0 80       	ld	r14, Z
    2df2:	f1 80       	ldd	r15, Z+1	; 0x01
    2df4:	02 81       	ldd	r16, Z+2	; 0x02
    2df6:	13 81       	ldd	r17, Z+3	; 0x03
    2df8:	80 91 59 01 	lds	r24, 0x0159
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	c9 01       	movw	r24, r18
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	82 0f       	add	r24, r18
    2e08:	93 1f       	adc	r25, r19
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	22 0f       	add	r18, r18
    2e0e:	33 1f       	adc	r19, r19
    2e10:	22 0f       	add	r18, r18
    2e12:	33 1f       	adc	r19, r19
    2e14:	82 0f       	add	r24, r18
    2e16:	93 1f       	adc	r25, r19
    2e18:	fc 01       	movw	r30, r24
    2e1a:	e2 5a       	subi	r30, 0xA2	; 162
    2e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1e:	20 81       	ld	r18, Z
    2e20:	31 81       	ldd	r19, Z+1	; 0x01
    2e22:	42 81       	ldd	r20, Z+2	; 0x02
    2e24:	53 81       	ldd	r21, Z+3	; 0x03
    2e26:	c8 01       	movw	r24, r16
    2e28:	b7 01       	movw	r22, r14
    2e2a:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	a1 05       	cpc	r26, r1
    2e36:	b1 05       	cpc	r27, r1
    2e38:	79 f5       	brne	.+94     	; 0x2e98 <PWM_TIMER_CallBack+0x178>
			{
				/* PWM ON time */
				DIO_Write_Pin(gastr_PWM_Channel[gu8_ISR_Count].u8_Pwm_Pin, HIGH_PIN);
    2e3a:	80 91 59 01 	lds	r24, 0x0159
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	c9 01       	movw	r24, r18
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	82 0f       	add	r24, r18
    2e4a:	93 1f       	adc	r25, r19
    2e4c:	9c 01       	movw	r18, r24
    2e4e:	22 0f       	add	r18, r18
    2e50:	33 1f       	adc	r19, r19
    2e52:	22 0f       	add	r18, r18
    2e54:	33 1f       	adc	r19, r19
    2e56:	82 0f       	add	r24, r18
    2e58:	93 1f       	adc	r25, r19
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	e4 5a       	subi	r30, 0xA4	; 164
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	80 81       	ld	r24, Z
    2e62:	61 e0       	ldi	r22, 0x01	; 1
    2e64:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_Write_Pin>
				gastr_PWM_Channel[gu8_ISR_Count].u32_Pwm_Channel_Count = INITIAL;
    2e68:	80 91 59 01 	lds	r24, 0x0159
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	c9 01       	movw	r24, r18
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	82 0f       	add	r24, r18
    2e78:	93 1f       	adc	r25, r19
    2e7a:	9c 01       	movw	r18, r24
    2e7c:	22 0f       	add	r18, r18
    2e7e:	33 1f       	adc	r19, r19
    2e80:	22 0f       	add	r18, r18
    2e82:	33 1f       	adc	r19, r19
    2e84:	82 0f       	add	r24, r18
    2e86:	93 1f       	adc	r25, r19
    2e88:	fc 01       	movw	r30, r24
    2e8a:	e9 59       	subi	r30, 0x99	; 153
    2e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8e:	10 82       	st	Z, r1
    2e90:	11 82       	std	Z+1, r1	; 0x01
    2e92:	12 82       	std	Z+2, r1	; 0x02
    2e94:	13 82       	std	Z+3, r1	; 0x03
    2e96:	4f c0       	rjmp	.+158    	; 0x2f36 <PWM_TIMER_CallBack+0x216>
			}
			/* check if the current PWM signal meet his Duty Cycle time */
			else if(NULL == (gastr_PWM_Channel[gu8_ISR_Count].u32_Pwm_Channel_Count % gastr_PWM_Channel[gu8_ISR_Count].u32_Pwm_OFF_Event))
    2e98:	80 91 59 01 	lds	r24, 0x0159
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	c9 01       	movw	r24, r18
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	82 0f       	add	r24, r18
    2ea8:	93 1f       	adc	r25, r19
    2eaa:	9c 01       	movw	r18, r24
    2eac:	22 0f       	add	r18, r18
    2eae:	33 1f       	adc	r19, r19
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	82 0f       	add	r24, r18
    2eb6:	93 1f       	adc	r25, r19
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e9 59       	subi	r30, 0x99	; 153
    2ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ebe:	e0 80       	ld	r14, Z
    2ec0:	f1 80       	ldd	r15, Z+1	; 0x01
    2ec2:	02 81       	ldd	r16, Z+2	; 0x02
    2ec4:	13 81       	ldd	r17, Z+3	; 0x03
    2ec6:	80 91 59 01 	lds	r24, 0x0159
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	c9 01       	movw	r24, r18
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	82 0f       	add	r24, r18
    2ed6:	93 1f       	adc	r25, r19
    2ed8:	9c 01       	movw	r18, r24
    2eda:	22 0f       	add	r18, r18
    2edc:	33 1f       	adc	r19, r19
    2ede:	22 0f       	add	r18, r18
    2ee0:	33 1f       	adc	r19, r19
    2ee2:	82 0f       	add	r24, r18
    2ee4:	93 1f       	adc	r25, r19
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	ee 59       	subi	r30, 0x9E	; 158
    2eea:	fe 4f       	sbci	r31, 0xFE	; 254
    2eec:	20 81       	ld	r18, Z
    2eee:	31 81       	ldd	r19, Z+1	; 0x01
    2ef0:	42 81       	ldd	r20, Z+2	; 0x02
    2ef2:	53 81       	ldd	r21, Z+3	; 0x03
    2ef4:	c8 01       	movw	r24, r16
    2ef6:	b7 01       	movw	r22, r14
    2ef8:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	a1 05       	cpc	r26, r1
    2f04:	b1 05       	cpc	r27, r1
    2f06:	b9 f4       	brne	.+46     	; 0x2f36 <PWM_TIMER_CallBack+0x216>
			{
				/* PWM OFF time */
				DIO_Write_Pin(gastr_PWM_Channel[gu8_ISR_Count].u8_Pwm_Pin, LOW_PIN);
    2f08:	80 91 59 01 	lds	r24, 0x0159
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	c9 01       	movw	r24, r18
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	82 0f       	add	r24, r18
    2f18:	93 1f       	adc	r25, r19
    2f1a:	9c 01       	movw	r18, r24
    2f1c:	22 0f       	add	r18, r18
    2f1e:	33 1f       	adc	r19, r19
    2f20:	22 0f       	add	r18, r18
    2f22:	33 1f       	adc	r19, r19
    2f24:	82 0f       	add	r24, r18
    2f26:	93 1f       	adc	r25, r19
    2f28:	fc 01       	movw	r30, r24
    2f2a:	e4 5a       	subi	r30, 0xA4	; 164
    2f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2e:	80 81       	ld	r24, Z
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_Write_Pin>
{
	Disable_GlobalInterrupt();

	/*TODO just increment the flags */
	/* loop on the PWM channels */
	for (gu8_ISR_Count = NULL ; gu8_ISR_Count <= PWM_CHANNELS_NUM ; gu8_ISR_Count++)
    2f36:	80 91 59 01 	lds	r24, 0x0159
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	80 93 59 01 	sts	0x0159, r24
    2f40:	80 91 59 01 	lds	r24, 0x0159
    2f44:	81 32       	cpi	r24, 0x21	; 33
    2f46:	08 f4       	brcc	.+2      	; 0x2f4a <PWM_TIMER_CallBack+0x22a>
    2f48:	f8 ce       	rjmp	.-528    	; 0x2d3a <PWM_TIMER_CallBack+0x1a>
		else
		{
			/* Do nothing */
		}
	}
	Enable_GlobalInterrupt();
    2f4a:	0e 94 22 05 	call	0xa44	; 0xa44 <Enable_GlobalInterrupt>
}
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	08 95       	ret

00002f5c <PWM_Init>:
/* brief!  PWM Initialization                                                          */
/* param!  (I/P) desired resolution in microseconds                                    */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t PWM_Init(uint32_t au32_Resolution)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	29 97       	sbiw	r28, 0x09	; 9
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	6e 83       	std	Y+6, r22	; 0x06
    2f72:	7f 83       	std	Y+7, r23	; 0x07
    2f74:	88 87       	std	Y+8, r24	; 0x08
    2f76:	99 87       	std	Y+9, r25	; 0x09
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
    2f78:	19 82       	std	Y+1, r1	; 0x01

	/* A variable that will hold the time per tick for the chosen timer */
	uint32_t au32_TickTime = NULL ;
    2f7a:	1a 82       	std	Y+2, r1	; 0x02
    2f7c:	1b 82       	std	Y+3, r1	; 0x03
    2f7e:	1c 82       	std	Y+4, r1	; 0x04
    2f80:	1d 82       	std	Y+5, r1	; 0x05

	/*
	*	Calculating the minimum and maximum resolution for the chosen timer configuration
	*/
	gu32_MinResolution = ( (PWM_PRESCALE_VALUE) / FREQ_OVER_MICRO ) ;
    2f82:	80 e8       	ldi	r24, 0x80	; 128
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	a0 e0       	ldi	r26, 0x00	; 0
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	80 93 51 01 	sts	0x0151, r24
    2f8e:	90 93 52 01 	sts	0x0152, r25
    2f92:	a0 93 53 01 	sts	0x0153, r26
    2f96:	b0 93 54 01 	sts	0x0154, r27

	if (TIMER0 == PWM_Config.u8_Channel)
    2f9a:	80 91 6a 00 	lds	r24, 0x006A
    2f9e:	88 23       	and	r24, r24
    2fa0:	d9 f4       	brne	.+54     	; 0x2fd8 <PWM_Init+0x7c>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER0_MAX_VALUE ;
    2fa2:	80 91 51 01 	lds	r24, 0x0151
    2fa6:	90 91 52 01 	lds	r25, 0x0152
    2faa:	a0 91 53 01 	lds	r26, 0x0153
    2fae:	b0 91 54 01 	lds	r27, 0x0154
    2fb2:	2f ef       	ldi	r18, 0xFF	; 255
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e0       	ldi	r20, 0x00	; 0
    2fb8:	50 e0       	ldi	r21, 0x00	; 0
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	80 93 55 01 	sts	0x0155, r24
    2fca:	90 93 56 01 	sts	0x0156, r25
    2fce:	a0 93 57 01 	sts	0x0157, r26
    2fd2:	b0 93 58 01 	sts	0x0158, r27
    2fd6:	40 c0       	rjmp	.+128    	; 0x3058 <PWM_Init+0xfc>

	}
	else if(TIMER1 == PWM_Config.u8_Channel)
    2fd8:	80 91 6a 00 	lds	r24, 0x006A
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	d9 f4       	brne	.+54     	; 0x3016 <PWM_Init+0xba>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER1_MAX_VALUE ;
    2fe0:	80 91 51 01 	lds	r24, 0x0151
    2fe4:	90 91 52 01 	lds	r25, 0x0152
    2fe8:	a0 91 53 01 	lds	r26, 0x0153
    2fec:	b0 91 54 01 	lds	r27, 0x0154
    2ff0:	2f ef       	ldi	r18, 0xFF	; 255
    2ff2:	3f ef       	ldi	r19, 0xFF	; 255
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	80 93 55 01 	sts	0x0155, r24
    3008:	90 93 56 01 	sts	0x0156, r25
    300c:	a0 93 57 01 	sts	0x0157, r26
    3010:	b0 93 58 01 	sts	0x0158, r27
    3014:	21 c0       	rjmp	.+66     	; 0x3058 <PWM_Init+0xfc>
	}
	else if(TIMER2 == PWM_Config.u8_Channel)
    3016:	80 91 6a 00 	lds	r24, 0x006A
    301a:	82 30       	cpi	r24, 0x02	; 2
    301c:	d9 f4       	brne	.+54     	; 0x3054 <PWM_Init+0xf8>
	{
		gu32_MaxResolution = gu32_MinResolution * TIMER2_MAX_VALUE ;
    301e:	80 91 51 01 	lds	r24, 0x0151
    3022:	90 91 52 01 	lds	r25, 0x0152
    3026:	a0 91 53 01 	lds	r26, 0x0153
    302a:	b0 91 54 01 	lds	r27, 0x0154
    302e:	2f ef       	ldi	r18, 0xFF	; 255
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	80 93 55 01 	sts	0x0155, r24
    3046:	90 93 56 01 	sts	0x0156, r25
    304a:	a0 93 57 01 	sts	0x0157, r26
    304e:	b0 93 58 01 	sts	0x0158, r27
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <PWM_Init+0xfc>
	}
	else
	{
		/* Handling of entering wrong timer channel is already done in Timer_Init function in Timer.c */
		au8_Det = E_CHANNEL;
    3054:	85 e1       	ldi	r24, 0x15	; 21
    3056:	89 83       	std	Y+1, r24	; 0x01

	/*
	 *	Checking if the passed resolution is in the allowed range for the resolution
	 */

	if ((au32_Resolution >= gu32_MinResolution) && (au32_Resolution <= gu32_MaxResolution) && (ERROR_OK == au8_Det))
    3058:	20 91 51 01 	lds	r18, 0x0151
    305c:	30 91 52 01 	lds	r19, 0x0152
    3060:	40 91 53 01 	lds	r20, 0x0153
    3064:	50 91 54 01 	lds	r21, 0x0154
    3068:	8e 81       	ldd	r24, Y+6	; 0x06
    306a:	9f 81       	ldd	r25, Y+7	; 0x07
    306c:	a8 85       	ldd	r26, Y+8	; 0x08
    306e:	b9 85       	ldd	r27, Y+9	; 0x09
    3070:	82 17       	cp	r24, r18
    3072:	93 07       	cpc	r25, r19
    3074:	a4 07       	cpc	r26, r20
    3076:	b5 07       	cpc	r27, r21
    3078:	08 f4       	brcc	.+2      	; 0x307c <PWM_Init+0x120>
    307a:	50 c0       	rjmp	.+160    	; 0x311c <PWM_Init+0x1c0>
    307c:	20 91 55 01 	lds	r18, 0x0155
    3080:	30 91 56 01 	lds	r19, 0x0156
    3084:	40 91 57 01 	lds	r20, 0x0157
    3088:	50 91 58 01 	lds	r21, 0x0158
    308c:	8e 81       	ldd	r24, Y+6	; 0x06
    308e:	9f 81       	ldd	r25, Y+7	; 0x07
    3090:	a8 85       	ldd	r26, Y+8	; 0x08
    3092:	b9 85       	ldd	r27, Y+9	; 0x09
    3094:	28 17       	cp	r18, r24
    3096:	39 07       	cpc	r19, r25
    3098:	4a 07       	cpc	r20, r26
    309a:	5b 07       	cpc	r21, r27
    309c:	08 f4       	brcc	.+2      	; 0x30a0 <PWM_Init+0x144>
    309e:	3e c0       	rjmp	.+124    	; 0x311c <PWM_Init+0x1c0>
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	88 23       	and	r24, r24
    30a4:	d9 f5       	brne	.+118    	; 0x311c <PWM_Init+0x1c0>
	{
		/*
		*	Initializing the timer with the configuration defined in PWM_cfg.c
		*/
		Timer_Init(&PWM_Config);
    30a6:	8a e6       	ldi	r24, 0x6A	; 106
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <Timer_Init>

		Timer_Get_Tick_Time(PWM_Config.u8_Channel , &au32_TickTime) ; /* Now au32_TickTime holds the value of tick time in nano seconds*/
    30ae:	80 91 6a 00 	lds	r24, 0x006A
    30b2:	9e 01       	movw	r18, r28
    30b4:	2e 5f       	subi	r18, 0xFE	; 254
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	b9 01       	movw	r22, r18
    30ba:	0e 94 3f 03 	call	0x67e	; 0x67e <Timer_Get_Tick_Time>

		//au32_TickTime /= PWM_RESOLUTION_IN_MICRO ; /* so we divide it by 1000 to get it in micro sec. */

		gu16_TicksCount = (au32_Resolution * PWM_RESOLUTION_IN_MICRO )/ au32_TickTime ;
    30be:	8e 81       	ldd	r24, Y+6	; 0x06
    30c0:	9f 81       	ldd	r25, Y+7	; 0x07
    30c2:	a8 85       	ldd	r26, Y+8	; 0x08
    30c4:	b9 85       	ldd	r27, Y+9	; 0x09
    30c6:	28 ee       	ldi	r18, 0xE8	; 232
    30c8:	33 e0       	ldi	r19, 0x03	; 3
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    30cc:	50 e0       	ldi	r21, 0x00	; 0
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	2a 81       	ldd	r18, Y+2	; 0x02
    30dc:	3b 81       	ldd	r19, Y+3	; 0x03
    30de:	4c 81       	ldd	r20, Y+4	; 0x04
    30e0:	5d 81       	ldd	r21, Y+5	; 0x05
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    30ea:	da 01       	movw	r26, r20
    30ec:	c9 01       	movw	r24, r18
    30ee:	90 93 5b 01 	sts	0x015B, r25
    30f2:	80 93 5a 01 	sts	0x015A, r24

		au8_Det = TIMER_SetCallBack(PWM_TIMER_CallBack, PWM_Config.u8_Channel);
    30f6:	20 91 6a 00 	lds	r18, 0x006A
    30fa:	80 e9       	ldi	r24, 0x90	; 144
    30fc:	96 e1       	ldi	r25, 0x16	; 22
    30fe:	62 2f       	mov	r22, r18
    3100:	0e 94 90 03 	call	0x720	; 0x720 <TIMER_SetCallBack>
    3104:	89 83       	std	Y+1, r24	; 0x01
		au8_Det = Timer_Start(PWM_Config.u8_Channel , gu16_TicksCount);
    3106:	80 91 6a 00 	lds	r24, 0x006A
    310a:	20 91 5a 01 	lds	r18, 0x015A
    310e:	30 91 5b 01 	lds	r19, 0x015B
    3112:	b9 01       	movw	r22, r18
    3114:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Timer_Start>
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <PWM_Init+0x1c4>
	}
	else
	{
		/* Handling of entering wrong resolution */
		au8_Det = E_PWM_RESOLUTION ;
    311c:	85 ea       	ldi	r24, 0xA5	; 165
    311e:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Fire the PWM module Init. Flag if there is no error */
	if (ERROR_OK == au8_Det)
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	88 23       	and	r24, r24
    3124:	21 f4       	brne	.+8      	; 0x312e <PWM_Init+0x1d2>
	{
		gu8_PWM_InitFlag = PWM_IS_INTIALIZED ;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	80 93 30 01 	sts	0x0130, r24
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <PWM_Init+0x1d6>
	}
	else
	{
		gu8_PWM_InitFlag = PWM_NOT_INTIALIZED ;
    312e:	10 92 30 01 	sts	0x0130, r1
	}

	return au8_Det ;
    3132:	89 81       	ldd	r24, Y+1	; 0x01
}
    3134:	29 96       	adiw	r28, 0x09	; 9
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <PWM_Deinit>:
/* brief!  PWM Deinitialization                                                        */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t PWM_Deinit(void)
{
    3146:	df 93       	push	r29
    3148:	cf 93       	push	r28
    314a:	0f 92       	push	r0
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
    3150:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the PWM is Initialized
	*/
	if (PWM_IS_INTIALIZED == gu8_PWM_InitFlag)
    3152:	80 91 30 01 	lds	r24, 0x0130
    3156:	81 30       	cpi	r24, 0x01	; 1
    3158:	41 f4       	brne	.+16     	; 0x316a <PWM_Deinit+0x24>
	{
		au8_Det = Timer_Stop(PWM_Config.u8_Channel);
    315a:	80 91 6a 00 	lds	r24, 0x006A
    315e:	0e 94 ce 02 	call	0x59c	; 0x59c <Timer_Stop>
    3162:	89 83       	std	Y+1, r24	; 0x01
		gu8_PWM_InitFlag = PWM_NOT_INTIALIZED;
    3164:	10 92 30 01 	sts	0x0130, r1
    3168:	02 c0       	rjmp	.+4      	; 0x316e <PWM_Deinit+0x28>
	}
	else
	{
		/* Handling of Deinitialize PWM module before initialize it */
		au8_Det = E_PWM_NOT_INTIALIZED;
    316a:	82 ea       	ldi	r24, 0xA2	; 162
    316c:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Det ;
    316e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <PWM_Channel_Init>:
/* param!  u8 (I/P) PWM signal Duty Cycle "0:100"               				       */
/* param!  u32(I/P) PWM signal time period 										       */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t PWM_Channel_Init(uint8_t au8_Channel, uint8_t au8_PinNum, uint8_t au8_DutyCycle, uint32_t au32_Period)
{
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	28 97       	sbiw	r28, 0x08	; 8
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	8a 83       	std	Y+2, r24	; 0x02
    319a:	6b 83       	std	Y+3, r22	; 0x03
    319c:	4c 83       	std	Y+4, r20	; 0x04
    319e:	0d 83       	std	Y+5, r16	; 0x05
    31a0:	1e 83       	std	Y+6, r17	; 0x06
    31a2:	2f 83       	std	Y+7, r18	; 0x07
    31a4:	38 87       	std	Y+8, r19	; 0x08
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
    31a6:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Making sure that the PWM module is Initialized
	*/
	if (PWM_IS_INTIALIZED == gu8_PWM_InitFlag)
    31a8:	80 91 30 01 	lds	r24, 0x0130
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <PWM_Channel_Init+0x3a>
    31b0:	d4 c0       	rjmp	.+424    	; 0x335a <PWM_Channel_Init+0x1e2>
	{
		/*
		*	Making sure that the passed Duty Cycle is in range (0%:100%)
		*/
		if ((INITIAL <= au8_DutyCycle) && (100 >= au8_DutyCycle))
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	85 36       	cpi	r24, 0x65	; 101
    31b6:	08 f0       	brcs	.+2      	; 0x31ba <PWM_Channel_Init+0x42>
    31b8:	cd c0       	rjmp	.+410    	; 0x3354 <PWM_Channel_Init+0x1dc>
		{
			/* Making sure we pass a real time value */
			if (au32_Period >= INITIAL)
			{
				/* Checking if the array of channels "buffer" is full or not */
				if(PWM_CHANNELS_NUM > au8_Channel )
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	80 32       	cpi	r24, 0x20	; 32
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <PWM_Channel_Init+0x4a>
    31c0:	c6 c0       	rjmp	.+396    	; 0x334e <PWM_Channel_Init+0x1d6>
				{
					/*
					 *	Passing the Channel information to the Channels array
					 */
					gastr_PWM_Channel[au8_Channel].u8_Pwm_Pin            = au8_PinNum ;
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	c9 01       	movw	r24, r18
    31ca:	88 0f       	add	r24, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	82 0f       	add	r24, r18
    31d0:	93 1f       	adc	r25, r19
    31d2:	9c 01       	movw	r18, r24
    31d4:	22 0f       	add	r18, r18
    31d6:	33 1f       	adc	r19, r19
    31d8:	22 0f       	add	r18, r18
    31da:	33 1f       	adc	r19, r19
    31dc:	82 0f       	add	r24, r18
    31de:	93 1f       	adc	r25, r19
    31e0:	fc 01       	movw	r30, r24
    31e2:	e4 5a       	subi	r30, 0xA4	; 164
    31e4:	fe 4f       	sbci	r31, 0xFE	; 254
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	80 83       	st	Z, r24
					gastr_PWM_Channel[au8_Channel].u8_Pwm_Duty_Cycle     = au8_DutyCycle ;
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	c9 01       	movw	r24, r18
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	82 0f       	add	r24, r18
    31f8:	93 1f       	adc	r25, r19
    31fa:	9c 01       	movw	r18, r24
    31fc:	22 0f       	add	r18, r18
    31fe:	33 1f       	adc	r19, r19
    3200:	22 0f       	add	r18, r18
    3202:	33 1f       	adc	r19, r19
    3204:	82 0f       	add	r24, r18
    3206:	93 1f       	adc	r25, r19
    3208:	fc 01       	movw	r30, r24
    320a:	e3 5a       	subi	r30, 0xA3	; 163
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	8c 81       	ldd	r24, Y+4	; 0x04
    3210:	80 83       	st	Z, r24
					gastr_PWM_Channel[au8_Channel].u32_Pwm_Period        = au32_Period ;
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	28 2f       	mov	r18, r24
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	c9 01       	movw	r24, r18
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	82 0f       	add	r24, r18
    3220:	93 1f       	adc	r25, r19
    3222:	9c 01       	movw	r18, r24
    3224:	22 0f       	add	r18, r18
    3226:	33 1f       	adc	r19, r19
    3228:	22 0f       	add	r18, r18
    322a:	33 1f       	adc	r19, r19
    322c:	82 0f       	add	r24, r18
    322e:	93 1f       	adc	r25, r19
    3230:	fc 01       	movw	r30, r24
    3232:	e2 5a       	subi	r30, 0xA2	; 162
    3234:	fe 4f       	sbci	r31, 0xFE	; 254
    3236:	8d 81       	ldd	r24, Y+5	; 0x05
    3238:	9e 81       	ldd	r25, Y+6	; 0x06
    323a:	af 81       	ldd	r26, Y+7	; 0x07
    323c:	b8 85       	ldd	r27, Y+8	; 0x08
    323e:	80 83       	st	Z, r24
    3240:	91 83       	std	Z+1, r25	; 0x01
    3242:	a2 83       	std	Z+2, r26	; 0x02
    3244:	b3 83       	std	Z+3, r27	; 0x03
					gastr_PWM_Channel[au8_Channel].u32_Pwm_OFF_Event     = ((gastr_PWM_Channel[au8_Channel].u8_Pwm_Duty_Cycle * gastr_PWM_Channel[au8_Channel].u32_Pwm_Period)/100U);
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	c8 2e       	mov	r12, r24
    324a:	dd 24       	eor	r13, r13
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	28 2f       	mov	r18, r24
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	c9 01       	movw	r24, r18
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	82 0f       	add	r24, r18
    325a:	93 1f       	adc	r25, r19
    325c:	9c 01       	movw	r18, r24
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	82 0f       	add	r24, r18
    3268:	93 1f       	adc	r25, r19
    326a:	fc 01       	movw	r30, r24
    326c:	e3 5a       	subi	r30, 0xA3	; 163
    326e:	fe 4f       	sbci	r31, 0xFE	; 254
    3270:	80 81       	ld	r24, Z
    3272:	e8 2e       	mov	r14, r24
    3274:	ff 24       	eor	r15, r15
    3276:	00 e0       	ldi	r16, 0x00	; 0
    3278:	10 e0       	ldi	r17, 0x00	; 0
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	c9 01       	movw	r24, r18
    3282:	88 0f       	add	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	9c 01       	movw	r18, r24
    328c:	22 0f       	add	r18, r18
    328e:	33 1f       	adc	r19, r19
    3290:	22 0f       	add	r18, r18
    3292:	33 1f       	adc	r19, r19
    3294:	82 0f       	add	r24, r18
    3296:	93 1f       	adc	r25, r19
    3298:	fc 01       	movw	r30, r24
    329a:	e2 5a       	subi	r30, 0xA2	; 162
    329c:	fe 4f       	sbci	r31, 0xFE	; 254
    329e:	20 81       	ld	r18, Z
    32a0:	31 81       	ldd	r19, Z+1	; 0x01
    32a2:	42 81       	ldd	r20, Z+2	; 0x02
    32a4:	53 81       	ldd	r21, Z+3	; 0x03
    32a6:	c8 01       	movw	r24, r16
    32a8:	b7 01       	movw	r22, r14
    32aa:	0e 94 a7 1b 	call	0x374e	; 0x374e <__mulsi3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	24 e6       	ldi	r18, 0x64	; 100
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 c6 1b 	call	0x378c	; 0x378c <__udivmodsi4>
    32c2:	da 01       	movw	r26, r20
    32c4:	c9 01       	movw	r24, r18
    32c6:	ac 01       	movw	r20, r24
    32c8:	bd 01       	movw	r22, r26
    32ca:	c6 01       	movw	r24, r12
    32cc:	88 0f       	add	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	8c 0d       	add	r24, r12
    32d2:	9d 1d       	adc	r25, r13
    32d4:	9c 01       	movw	r18, r24
    32d6:	22 0f       	add	r18, r18
    32d8:	33 1f       	adc	r19, r19
    32da:	22 0f       	add	r18, r18
    32dc:	33 1f       	adc	r19, r19
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	fc 01       	movw	r30, r24
    32e4:	ee 59       	subi	r30, 0x9E	; 158
    32e6:	fe 4f       	sbci	r31, 0xFE	; 254
    32e8:	40 83       	st	Z, r20
    32ea:	51 83       	std	Z+1, r21	; 0x01
    32ec:	62 83       	std	Z+2, r22	; 0x02
    32ee:	73 83       	std	Z+3, r23	; 0x03
					gastr_PWM_Channel[au8_Channel].u32_Pwm_Channel_Count = INITIAL ;
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	c9 01       	movw	r24, r18
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
    32fc:	82 0f       	add	r24, r18
    32fe:	93 1f       	adc	r25, r19
    3300:	9c 01       	movw	r18, r24
    3302:	22 0f       	add	r18, r18
    3304:	33 1f       	adc	r19, r19
    3306:	22 0f       	add	r18, r18
    3308:	33 1f       	adc	r19, r19
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	fc 01       	movw	r30, r24
    3310:	e9 59       	subi	r30, 0x99	; 153
    3312:	fe 4f       	sbci	r31, 0xFE	; 254
    3314:	10 82       	st	Z, r1
    3316:	11 82       	std	Z+1, r1	; 0x01
    3318:	12 82       	std	Z+2, r1	; 0x02
    331a:	13 82       	std	Z+3, r1	; 0x03
					gastr_PWM_Channel[au8_Channel].u8_Pwm_Channel_States = PWM_CHANNEL_READY ;
    331c:	8a 81       	ldd	r24, Y+2	; 0x02
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	c9 01       	movw	r24, r18
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	82 0f       	add	r24, r18
    332a:	93 1f       	adc	r25, r19
    332c:	9c 01       	movw	r18, r24
    332e:	22 0f       	add	r18, r18
    3330:	33 1f       	adc	r19, r19
    3332:	22 0f       	add	r18, r18
    3334:	33 1f       	adc	r19, r19
    3336:	82 0f       	add	r24, r18
    3338:	93 1f       	adc	r25, r19
    333a:	fc 01       	movw	r30, r24
    333c:	ea 59       	subi	r30, 0x9A	; 154
    333e:	fe 4f       	sbci	r31, 0xFE	; 254
    3340:	10 82       	st	Z, r1

					/* Make the used pin as output pin */
					au8_Det = DIO_INIT_Pin(au8_PinNum, OUTPUT_PIN);
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	61 e0       	ldi	r22, 0x01	; 1
    3346:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_INIT_Pin>
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	08 c0       	rjmp	.+16     	; 0x335e <PWM_Channel_Init+0x1e6>
					//au8_Det = DIO_INIT_Pin(gastr_PWM_Channel[au8_Channel].u8_Pwm_Pin, OUTPUT_PIN);
				}
				else
				{
					/* Handling number of events limit*/
					au8_Det = E_PWM_CHANNELS_NUM ;
    334e:	89 ea       	ldi	r24, 0xA9	; 169
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	05 c0       	rjmp	.+10     	; 0x335e <PWM_Channel_Init+0x1e6>
			}
		}
		else
		{
			/* Handling entering wrong duty cycle */
			au8_Det = E_PWM_DUTY_CYCLE ;
    3354:	87 ea       	ldi	r24, 0xA7	; 167
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	02 c0       	rjmp	.+4      	; 0x335e <PWM_Channel_Init+0x1e6>
		}
	}
	else
	{
		/* Handling of Start PWM module before initialize it */
		au8_Det = E_PWM_NOT_INTIALIZED;
    335a:	82 ea       	ldi	r24, 0xA2	; 162
    335c:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Fire the PWM Channel Init. Flag if there is no error */
	if (ERROR_OK == au8_Det)
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	88 23       	and	r24, r24
    3362:	61 f4       	brne	.+24     	; 0x337c <PWM_Channel_Init+0x204>
	{
		gu8_PWM_Channel_InitFlag[au8_Channel] = PWM_CHANNEL_IS_INTIALIZED ;
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	fc 01       	movw	r30, r24
    336c:	ef 5c       	subi	r30, 0xCF	; 207
    336e:	fe 4f       	sbci	r31, 0xFE	; 254
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	80 83       	st	Z, r24

		au8_Channel ++ ; /* Increment the index to the next free element in the events array */
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	8f 5f       	subi	r24, 0xFF	; 255
    3378:	8a 83       	std	Y+2, r24	; 0x02
    337a:	07 c0       	rjmp	.+14     	; 0x338a <PWM_Channel_Init+0x212>
	}
	else
	{
		gu8_PWM_Channel_InitFlag[au8_Channel] = PWM_CHANNEL_NOT_INTIALIZED ;
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	88 2f       	mov	r24, r24
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	fc 01       	movw	r30, r24
    3384:	ef 5c       	subi	r30, 0xCF	; 207
    3386:	fe 4f       	sbci	r31, 0xFE	; 254
    3388:	10 82       	st	Z, r1
	}
	return au8_Det ;
    338a:	89 81       	ldd	r24, Y+1	; 0x01
}
    338c:	28 96       	adiw	r28, 0x08	; 8
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	ff 90       	pop	r15
    33a2:	ef 90       	pop	r14
    33a4:	df 90       	pop	r13
    33a6:	cf 90       	pop	r12
    33a8:	08 95       	ret

000033aa <PWM_Channel_Start>:
/* brief!  Start generate PWM Signal on the defined Channel			                   */
/* param!  u8 (I/P) PWM used Channel 								                   */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t PWM_Channel_Start(uint8_t au8_Channel)
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <PWM_Channel_Start+0x6>
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
    33b6:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Checking if the array of Channels "buffer" is full or not
	*/
	if(PWM_CHANNELS_NUM > au8_Channel )
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	80 32       	cpi	r24, 0x20	; 32
    33bc:	08 f0       	brcs	.+2      	; 0x33c0 <PWM_Channel_Start+0x16>
    33be:	4f c0       	rjmp	.+158    	; 0x345e <PWM_Channel_Start+0xb4>
	{
		/*
		 *	Making sure that the PWM Channel is Initialized
		 */
		if (PWM_CHANNEL_IS_INTIALIZED == gu8_PWM_Channel_InitFlag[au8_Channel])
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	88 2f       	mov	r24, r24
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	fc 01       	movw	r30, r24
    33c8:	ef 5c       	subi	r30, 0xCF	; 207
    33ca:	fe 4f       	sbci	r31, 0xFE	; 254
    33cc:	80 81       	ld	r24, Z
    33ce:	81 30       	cpi	r24, 0x01	; 1
    33d0:	09 f0       	breq	.+2      	; 0x33d4 <PWM_Channel_Start+0x2a>
    33d2:	42 c0       	rjmp	.+132    	; 0x3458 <PWM_Channel_Start+0xae>
		{

			/*
			 *	change the PWM Channel state from Ready to Running
			 */
			gastr_PWM_Channel[au8_Channel].u8_Pwm_Channel_States = PWM_CHANNEL_RUNNING ;
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	c9 01       	movw	r24, r18
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	82 0f       	add	r24, r18
    33e2:	93 1f       	adc	r25, r19
    33e4:	9c 01       	movw	r18, r24
    33e6:	22 0f       	add	r18, r18
    33e8:	33 1f       	adc	r19, r19
    33ea:	22 0f       	add	r18, r18
    33ec:	33 1f       	adc	r19, r19
    33ee:	82 0f       	add	r24, r18
    33f0:	93 1f       	adc	r25, r19
    33f2:	fc 01       	movw	r30, r24
    33f4:	ea 59       	subi	r30, 0x9A	; 154
    33f6:	fe 4f       	sbci	r31, 0xFE	; 254
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	80 83       	st	Z, r24
			gastr_PWM_Channel[au8_Channel].u32_Pwm_Channel_Count = INITIAL ;
    33fc:	8a 81       	ldd	r24, Y+2	; 0x02
    33fe:	28 2f       	mov	r18, r24
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	c9 01       	movw	r24, r18
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	82 0f       	add	r24, r18
    340a:	93 1f       	adc	r25, r19
    340c:	9c 01       	movw	r18, r24
    340e:	22 0f       	add	r18, r18
    3410:	33 1f       	adc	r19, r19
    3412:	22 0f       	add	r18, r18
    3414:	33 1f       	adc	r19, r19
    3416:	82 0f       	add	r24, r18
    3418:	93 1f       	adc	r25, r19
    341a:	fc 01       	movw	r30, r24
    341c:	e9 59       	subi	r30, 0x99	; 153
    341e:	fe 4f       	sbci	r31, 0xFE	; 254
    3420:	10 82       	st	Z, r1
    3422:	11 82       	std	Z+1, r1	; 0x01
    3424:	12 82       	std	Z+2, r1	; 0x02
    3426:	13 82       	std	Z+3, r1	; 0x03

			/* we make the pin high here to don't miss the first ISR count */
			au8_Det = DIO_Write_Pin(gastr_PWM_Channel[au8_Channel].u8_Pwm_Pin, HIGH_PIN);
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	c9 01       	movw	r24, r18
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	82 0f       	add	r24, r18
    3436:	93 1f       	adc	r25, r19
    3438:	9c 01       	movw	r18, r24
    343a:	22 0f       	add	r18, r18
    343c:	33 1f       	adc	r19, r19
    343e:	22 0f       	add	r18, r18
    3440:	33 1f       	adc	r19, r19
    3442:	82 0f       	add	r24, r18
    3444:	93 1f       	adc	r25, r19
    3446:	fc 01       	movw	r30, r24
    3448:	e4 5a       	subi	r30, 0xA4	; 164
    344a:	fe 4f       	sbci	r31, 0xFE	; 254
    344c:	80 81       	ld	r24, Z
    344e:	61 e0       	ldi	r22, 0x01	; 1
    3450:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_Write_Pin>
    3454:	89 83       	std	Y+1, r24	; 0x01
    3456:	05 c0       	rjmp	.+10     	; 0x3462 <PWM_Channel_Start+0xb8>

		}
		else
		{
			/* Handling of Start PWM channel before initialize it */
			au8_Det = E_PWM_CHANNEL_NOT_INTIALIZED;
    3458:	84 ea       	ldi	r24, 0xA4	; 164
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <PWM_Channel_Start+0xb8>
		}
	}
	else
	{
		/* Handling number of channel limit*/
		au8_Det = E_PWM_CHANNELS_NUM ;
    345e:	89 ea       	ldi	r24, 0xA9	; 169
    3460:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Det ;
    3462:	89 81       	ldd	r24, Y+1	; 0x01
}
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	08 95       	ret

0000346e <PWM_Channel_Stop>:
/* brief!  Stop generate PWM Signal on the defined Channel			                   */
/* param!  u8 (I/P) PWM used Channel 								                   */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t PWM_Channel_Stop(uint8_t au8_Channel)
{
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	00 d0       	rcall	.+0      	; 0x3474 <PWM_Channel_Stop+0x6>
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_Det = ERROR_OK ;
    347a:	19 82       	std	Y+1, r1	; 0x01

	/*
	*	Checking if the array of events "buffer" is full or not
	*/
	if(PWM_CHANNELS_NUM > au8_Channel )
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	80 32       	cpi	r24, 0x20	; 32
    3480:	08 f0       	brcs	.+2      	; 0x3484 <PWM_Channel_Stop+0x16>
    3482:	4e c0       	rjmp	.+156    	; 0x3520 <PWM_Channel_Stop+0xb2>
	{
		/*
		 *	Making sure that the PWM Channel is Initialized
		 */
		if (PWM_CHANNEL_IS_INTIALIZED == gu8_PWM_Channel_InitFlag[au8_Channel])
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	fc 01       	movw	r30, r24
    348c:	ef 5c       	subi	r30, 0xCF	; 207
    348e:	fe 4f       	sbci	r31, 0xFE	; 254
    3490:	80 81       	ld	r24, Z
    3492:	81 30       	cpi	r24, 0x01	; 1
    3494:	09 f0       	breq	.+2      	; 0x3498 <PWM_Channel_Stop+0x2a>
    3496:	41 c0       	rjmp	.+130    	; 0x351a <PWM_Channel_Stop+0xac>
		{

			/*
			 *	change the PWM Channel state from Running to Ready
			 */
			gastr_PWM_Channel[au8_Channel].u8_Pwm_Channel_States = PWM_CHANNEL_READY ;
    3498:	8a 81       	ldd	r24, Y+2	; 0x02
    349a:	28 2f       	mov	r18, r24
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	c9 01       	movw	r24, r18
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	82 0f       	add	r24, r18
    34a6:	93 1f       	adc	r25, r19
    34a8:	9c 01       	movw	r18, r24
    34aa:	22 0f       	add	r18, r18
    34ac:	33 1f       	adc	r19, r19
    34ae:	22 0f       	add	r18, r18
    34b0:	33 1f       	adc	r19, r19
    34b2:	82 0f       	add	r24, r18
    34b4:	93 1f       	adc	r25, r19
    34b6:	fc 01       	movw	r30, r24
    34b8:	ea 59       	subi	r30, 0x9A	; 154
    34ba:	fe 4f       	sbci	r31, 0xFE	; 254
    34bc:	10 82       	st	Z, r1
			gastr_PWM_Channel[au8_Channel].u32_Pwm_Channel_Count = INITIAL ;
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	c9 01       	movw	r24, r18
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	82 0f       	add	r24, r18
    34cc:	93 1f       	adc	r25, r19
    34ce:	9c 01       	movw	r18, r24
    34d0:	22 0f       	add	r18, r18
    34d2:	33 1f       	adc	r19, r19
    34d4:	22 0f       	add	r18, r18
    34d6:	33 1f       	adc	r19, r19
    34d8:	82 0f       	add	r24, r18
    34da:	93 1f       	adc	r25, r19
    34dc:	fc 01       	movw	r30, r24
    34de:	e9 59       	subi	r30, 0x99	; 153
    34e0:	fe 4f       	sbci	r31, 0xFE	; 254
    34e2:	10 82       	st	Z, r1
    34e4:	11 82       	std	Z+1, r1	; 0x01
    34e6:	12 82       	std	Z+2, r1	; 0x02
    34e8:	13 82       	std	Z+3, r1	; 0x03

			/* pin default value */
			au8_Det = DIO_Write_Pin(gastr_PWM_Channel[au8_Channel].u8_Pwm_Pin, LOW_PIN);
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	c9 01       	movw	r24, r18
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	82 0f       	add	r24, r18
    34f8:	93 1f       	adc	r25, r19
    34fa:	9c 01       	movw	r18, r24
    34fc:	22 0f       	add	r18, r18
    34fe:	33 1f       	adc	r19, r19
    3500:	22 0f       	add	r18, r18
    3502:	33 1f       	adc	r19, r19
    3504:	82 0f       	add	r24, r18
    3506:	93 1f       	adc	r25, r19
    3508:	fc 01       	movw	r30, r24
    350a:	e4 5a       	subi	r30, 0xA4	; 164
    350c:	fe 4f       	sbci	r31, 0xFE	; 254
    350e:	80 81       	ld	r24, Z
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_Write_Pin>
    3516:	89 83       	std	Y+1, r24	; 0x01
    3518:	05 c0       	rjmp	.+10     	; 0x3524 <PWM_Channel_Stop+0xb6>

		}
		else
		{
			/* Handling of Start PWM channel before initialize it */
			au8_Det = E_PWM_CHANNEL_NOT_INTIALIZED;
    351a:	84 ea       	ldi	r24, 0xA4	; 164
    351c:	89 83       	std	Y+1, r24	; 0x01
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <PWM_Channel_Stop+0xb6>
		}
	}
	else
	{
		/* Handling number of channel limit*/
		au8_Det = E_PWM_CHANNELS_NUM ;
    3520:	89 ea       	ldi	r24, 0xA9	; 169
    3522:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Det ;
    3524:	89 81       	ldd	r24, Y+1	; 0x01
}
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <Init_LEDS>:
/* brief!  Initialize The output pins for LEDS                                         */
/* param!  void                            			                                   */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
uint8_t Init_LEDS(void)
{
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
	DIO_INIT_Pin(LED_1,OUTPUT_PIN);
    3538:	8c e0       	ldi	r24, 0x0C	; 12
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_INIT_Pin>
	DIO_INIT_Pin(LED_2,OUTPUT_PIN);
    3540:	8d e0       	ldi	r24, 0x0D	; 13
    3542:	61 e0       	ldi	r22, 0x01	; 1
    3544:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_INIT_Pin>
	DIO_INIT_Pin(LED_3,OUTPUT_PIN);
    3548:	8e e0       	ldi	r24, 0x0E	; 14
    354a:	61 e0       	ldi	r22, 0x01	; 1
    354c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_INIT_Pin>
	DIO_INIT_Pin(LED_4,OUTPUT_PIN);
    3550:	8f e0       	ldi	r24, 0x0F	; 15
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_INIT_Pin>

	return 0;
    3558:	80 e0       	ldi	r24, 0x00	; 0
}
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <LED1_Toggle>:
/* brief!  Toggle LED1                                                                 */
/* param!  LED number                            			                           */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
uint8_t LED1_Toggle(void)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
	DIO_Toggle_Pin(LED_1);
    3568:	8c e0       	ldi	r24, 0x0C	; 12
    356a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <DIO_Toggle_Pin>
	return 0 ;
    356e:	80 e0       	ldi	r24, 0x00	; 0
}
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	08 95       	ret

00003576 <LED2_Toggle>:
/* brief!  Toggle LED2                                                                 */
/* param!  LED number                            			                           */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
uint8_t LED2_Toggle(void)
{
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
	DIO_Toggle_Pin(LED_2);
    357e:	8d e0       	ldi	r24, 0x0D	; 13
    3580:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <DIO_Toggle_Pin>
	return 0 ;
    3584:	80 e0       	ldi	r24, 0x00	; 0
}
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <LED3_Toggle>:
/* brief!  Toggle LED3                                                                 */
/* param!  LED number                            			                           */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
uint8_t LED3_Toggle(void)
{
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
	DIO_Toggle_Pin(LED_3);
    3594:	8e e0       	ldi	r24, 0x0E	; 14
    3596:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <DIO_Toggle_Pin>
	return 0 ;
    359a:	80 e0       	ldi	r24, 0x00	; 0
}
    359c:	cf 91       	pop	r28
    359e:	df 91       	pop	r29
    35a0:	08 95       	ret

000035a2 <LED4_Toggle>:
/* brief!  Toggle LED4                                                                 */
/* param!  LED number                            			                           */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
uint8_t LED4_Toggle(void)
{
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
	DIO_Toggle_Pin(LED_4);
    35aa:	8f e0       	ldi	r24, 0x0F	; 15
    35ac:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <DIO_Toggle_Pin>
	return 0 ;
    35b0:	80 e0       	ldi	r24, 0x00	; 0
}
    35b2:	cf 91       	pop	r28
    35b4:	df 91       	pop	r29
    35b6:	08 95       	ret

000035b8 <TMU_App_Init>:
/* brief!  Initialize used modules "included modules"                                  */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void TMU_App_Init(void)
{
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Initializing the LEDS
	*/
	Init_LEDS();
    35c0:	0e 94 98 1a 	call	0x3530	; 0x3530 <Init_LEDS>
	/*
	*	Initialize the TMU with a certain resolution
	*/
	TMU_Init(1000);
    35c4:	68 ee       	ldi	r22, 0xE8	; 232
    35c6:	73 e0       	ldi	r23, 0x03	; 3
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <TMU_Init>
}
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	08 95       	ret

000035d6 <TMU_App_Main>:
/* brief!  Run our scenario                                                            */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void TMU_App_Main(void)
{
    35d6:	df 93       	push	r29
    35d8:	cf 93       	push	r28
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62

	TMU_Start(LED1_Toggle , 250UL  , PERIODIC);
    35de:	80 eb       	ldi	r24, 0xB0	; 176
    35e0:	9a e1       	ldi	r25, 0x1A	; 26
    35e2:	4a ef       	ldi	r20, 0xFA	; 250
    35e4:	50 e0       	ldi	r21, 0x00	; 0
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	70 e0       	ldi	r23, 0x00	; 0
    35ea:	2f ef       	ldi	r18, 0xFF	; 255
    35ec:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TMU_Start>
	TMU_Start(LED2_Toggle , 500UL  , PERIODIC);
    35f0:	8b eb       	ldi	r24, 0xBB	; 187
    35f2:	9a e1       	ldi	r25, 0x1A	; 26
    35f4:	44 ef       	ldi	r20, 0xF4	; 244
    35f6:	51 e0       	ldi	r21, 0x01	; 1
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	2f ef       	ldi	r18, 0xFF	; 255
    35fe:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TMU_Start>
	TMU_Start(LED3_Toggle , 1000UL , PERIODIC);
    3602:	86 ec       	ldi	r24, 0xC6	; 198
    3604:	9a e1       	ldi	r25, 0x1A	; 26
    3606:	48 ee       	ldi	r20, 0xE8	; 232
    3608:	53 e0       	ldi	r21, 0x03	; 3
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	70 e0       	ldi	r23, 0x00	; 0
    360e:	2f ef       	ldi	r18, 0xFF	; 255
    3610:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TMU_Start>
	TMU_Start(LED4_Toggle , 2000UL , ONE_SHOT);
    3614:	81 ed       	ldi	r24, 0xD1	; 209
    3616:	9a e1       	ldi	r25, 0x1A	; 26
    3618:	40 ed       	ldi	r20, 0xD0	; 208
    361a:	57 e0       	ldi	r21, 0x07	; 7
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	21 e0       	ldi	r18, 0x01	; 1
    3622:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TMU_Start>

	//TMU_Stop(LED1_Toggle);
	//TMU_Restart(LED1_Toggle);
	while (1)
	{
		TMU_Dispatcher();
    3626:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TMU_Dispatcher>
    362a:	fd cf       	rjmp	.-6      	; 0x3626 <TMU_App_Main+0x50>

0000362c <SOS_App_Init>:
/* brief!  Initialize used modules "included modules"                                  */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void SOS_App_Init(void)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Initializing the LEDS
	*/
	Init_LEDS();
    3634:	0e 94 98 1a 	call	0x3530	; 0x3530 <Init_LEDS>
	/*
	*	Initialize the SOS with a certain resolution
	*/
	SOS_Init(SOS_RESOLUTION_IN_MICRO);
    3638:	68 ee       	ldi	r22, 0xE8	; 232
    363a:	73 e0       	ldi	r23, 0x03	; 3
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0e 94 59 12 	call	0x24b2	; 0x24b2 <SOS_Init>
}
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <SOS_App_Main>:
/* brief!  Run our scenario                                                            */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void SOS_App_Main(void)
{
    364a:	0f 93       	push	r16
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62

	SOS_CreatTask(LED1_Toggle , 250UL  , 0U , PERIODIC);
    3654:	80 eb       	ldi	r24, 0xB0	; 176
    3656:	9a e1       	ldi	r25, 0x1A	; 26
    3658:	4a ef       	ldi	r20, 0xFA	; 250
    365a:	50 e0       	ldi	r21, 0x00	; 0
    365c:	60 e0       	ldi	r22, 0x00	; 0
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	0f ef       	ldi	r16, 0xFF	; 255
    3664:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SOS_CreatTask>
	SOS_CreatTask(LED2_Toggle , 500UL  , 1U , PERIODIC);
    3668:	8b eb       	ldi	r24, 0xBB	; 187
    366a:	9a e1       	ldi	r25, 0x1A	; 26
    366c:	44 ef       	ldi	r20, 0xF4	; 244
    366e:	51 e0       	ldi	r21, 0x01	; 1
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	21 e0       	ldi	r18, 0x01	; 1
    3676:	0f ef       	ldi	r16, 0xFF	; 255
    3678:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SOS_CreatTask>
	SOS_CreatTask(LED3_Toggle , 1000UL , 2U , PERIODIC);
    367c:	86 ec       	ldi	r24, 0xC6	; 198
    367e:	9a e1       	ldi	r25, 0x1A	; 26
    3680:	48 ee       	ldi	r20, 0xE8	; 232
    3682:	53 e0       	ldi	r21, 0x03	; 3
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	70 e0       	ldi	r23, 0x00	; 0
    3688:	22 e0       	ldi	r18, 0x02	; 2
    368a:	0f ef       	ldi	r16, 0xFF	; 255
    368c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SOS_CreatTask>
	SOS_CreatTask(LED4_Toggle , 2000UL , 3U , PERIODIC);
    3690:	81 ed       	ldi	r24, 0xD1	; 209
    3692:	9a e1       	ldi	r25, 0x1A	; 26
    3694:	40 ed       	ldi	r20, 0xD0	; 208
    3696:	57 e0       	ldi	r21, 0x07	; 7
    3698:	60 e0       	ldi	r22, 0x00	; 0
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	23 e0       	ldi	r18, 0x03	; 3
    369e:	0f ef       	ldi	r16, 0xFF	; 255
    36a0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SOS_CreatTask>

	//SOS_DeleteTask(LED4_Toggle);

	SOS_Run();
    36a4:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <SOS_Run>

	//CPU_Sleep();
}
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	0f 91       	pop	r16
    36ae:	08 95       	ret

000036b0 <PWM_App_Init>:
/* brief!  Initialize used modules "included modules"                                  */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void PWM_App_Init(void)
{
    36b0:	0f 93       	push	r16
    36b2:	1f 93       	push	r17
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Initialize the PWM with a certain resolution
	*/
	PWM_Init(1000);
    36bc:	68 ee       	ldi	r22, 0xE8	; 232
    36be:	73 e0       	ldi	r23, 0x03	; 3
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <PWM_Init>

	PWM_Channel_Init(0U, DIO_PB4, 50, 100);
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	6c e0       	ldi	r22, 0x0C	; 12
    36cc:	42 e3       	ldi	r20, 0x32	; 50
    36ce:	04 e6       	ldi	r16, 0x64	; 100
    36d0:	10 e0       	ldi	r17, 0x00	; 0
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	0e 94 bc 18 	call	0x3178	; 0x3178 <PWM_Channel_Init>
	PWM_Channel_Init(1U, DIO_PB5, 70, 100);
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	6d e0       	ldi	r22, 0x0D	; 13
    36de:	46 e4       	ldi	r20, 0x46	; 70
    36e0:	04 e6       	ldi	r16, 0x64	; 100
    36e2:	10 e0       	ldi	r17, 0x00	; 0
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	0e 94 bc 18 	call	0x3178	; 0x3178 <PWM_Channel_Init>
	PWM_Channel_Init(2U, DIO_PB6, 50, 50);
    36ec:	82 e0       	ldi	r24, 0x02	; 2
    36ee:	6e e0       	ldi	r22, 0x0E	; 14
    36f0:	42 e3       	ldi	r20, 0x32	; 50
    36f2:	02 e3       	ldi	r16, 0x32	; 50
    36f4:	10 e0       	ldi	r17, 0x00	; 0
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	0e 94 bc 18 	call	0x3178	; 0x3178 <PWM_Channel_Init>
	PWM_Channel_Init(3U, DIO_PB7, 30, 50);
    36fe:	83 e0       	ldi	r24, 0x03	; 3
    3700:	6f e0       	ldi	r22, 0x0F	; 15
    3702:	4e e1       	ldi	r20, 0x1E	; 30
    3704:	02 e3       	ldi	r16, 0x32	; 50
    3706:	10 e0       	ldi	r17, 0x00	; 0
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	0e 94 bc 18 	call	0x3178	; 0x3178 <PWM_Channel_Init>

}
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	1f 91       	pop	r17
    3716:	0f 91       	pop	r16
    3718:	08 95       	ret

0000371a <PWM_App_Main>:
/* brief!  Run our scenario                                                            */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void PWM_App_Main(void)
{
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62

	PWM_Channel_Start(0U);
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	0e 94 d5 19 	call	0x33aa	; 0x33aa <PWM_Channel_Start>
	PWM_Channel_Start(1U);
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <PWM_Channel_Start>
	PWM_Channel_Start(2U);
    372e:	82 e0       	ldi	r24, 0x02	; 2
    3730:	0e 94 d5 19 	call	0x33aa	; 0x33aa <PWM_Channel_Start>
	PWM_Channel_Start(3U);
    3734:	83 e0       	ldi	r24, 0x03	; 3
    3736:	0e 94 d5 19 	call	0x33aa	; 0x33aa <PWM_Channel_Start>
    373a:	ff cf       	rjmp	.-2      	; 0x373a <PWM_App_Main+0x20>

0000373c <main>:
//#include "SOS_App.h"
#include "PWM_App.h"


int main(void)
{
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
	SOS_App_Init();
	SOS_App_Main();
	*/


	PWM_App_Init();
    3744:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <PWM_App_Init>
	PWM_App_Main();
    3748:	0e 94 8d 1b 	call	0x371a	; 0x371a <PWM_App_Main>
    374c:	ff cf       	rjmp	.-2      	; 0x374c <main+0x10>

0000374e <__mulsi3>:
    374e:	62 9f       	mul	r22, r18
    3750:	d0 01       	movw	r26, r0
    3752:	73 9f       	mul	r23, r19
    3754:	f0 01       	movw	r30, r0
    3756:	82 9f       	mul	r24, r18
    3758:	e0 0d       	add	r30, r0
    375a:	f1 1d       	adc	r31, r1
    375c:	64 9f       	mul	r22, r20
    375e:	e0 0d       	add	r30, r0
    3760:	f1 1d       	adc	r31, r1
    3762:	92 9f       	mul	r25, r18
    3764:	f0 0d       	add	r31, r0
    3766:	83 9f       	mul	r24, r19
    3768:	f0 0d       	add	r31, r0
    376a:	74 9f       	mul	r23, r20
    376c:	f0 0d       	add	r31, r0
    376e:	65 9f       	mul	r22, r21
    3770:	f0 0d       	add	r31, r0
    3772:	99 27       	eor	r25, r25
    3774:	72 9f       	mul	r23, r18
    3776:	b0 0d       	add	r27, r0
    3778:	e1 1d       	adc	r30, r1
    377a:	f9 1f       	adc	r31, r25
    377c:	63 9f       	mul	r22, r19
    377e:	b0 0d       	add	r27, r0
    3780:	e1 1d       	adc	r30, r1
    3782:	f9 1f       	adc	r31, r25
    3784:	bd 01       	movw	r22, r26
    3786:	cf 01       	movw	r24, r30
    3788:	11 24       	eor	r1, r1
    378a:	08 95       	ret

0000378c <__udivmodsi4>:
    378c:	a1 e2       	ldi	r26, 0x21	; 33
    378e:	1a 2e       	mov	r1, r26
    3790:	aa 1b       	sub	r26, r26
    3792:	bb 1b       	sub	r27, r27
    3794:	fd 01       	movw	r30, r26
    3796:	0d c0       	rjmp	.+26     	; 0x37b2 <__udivmodsi4_ep>

00003798 <__udivmodsi4_loop>:
    3798:	aa 1f       	adc	r26, r26
    379a:	bb 1f       	adc	r27, r27
    379c:	ee 1f       	adc	r30, r30
    379e:	ff 1f       	adc	r31, r31
    37a0:	a2 17       	cp	r26, r18
    37a2:	b3 07       	cpc	r27, r19
    37a4:	e4 07       	cpc	r30, r20
    37a6:	f5 07       	cpc	r31, r21
    37a8:	20 f0       	brcs	.+8      	; 0x37b2 <__udivmodsi4_ep>
    37aa:	a2 1b       	sub	r26, r18
    37ac:	b3 0b       	sbc	r27, r19
    37ae:	e4 0b       	sbc	r30, r20
    37b0:	f5 0b       	sbc	r31, r21

000037b2 <__udivmodsi4_ep>:
    37b2:	66 1f       	adc	r22, r22
    37b4:	77 1f       	adc	r23, r23
    37b6:	88 1f       	adc	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	1a 94       	dec	r1
    37bc:	69 f7       	brne	.-38     	; 0x3798 <__udivmodsi4_loop>
    37be:	60 95       	com	r22
    37c0:	70 95       	com	r23
    37c2:	80 95       	com	r24
    37c4:	90 95       	com	r25
    37c6:	9b 01       	movw	r18, r22
    37c8:	ac 01       	movw	r20, r24
    37ca:	bd 01       	movw	r22, r26
    37cc:	cf 01       	movw	r24, r30
    37ce:	08 95       	ret

000037d0 <_exit>:
    37d0:	f8 94       	cli

000037d2 <__stop_program>:
    37d2:	ff cf       	rjmp	.-2      	; 0x37d2 <__stop_program>
